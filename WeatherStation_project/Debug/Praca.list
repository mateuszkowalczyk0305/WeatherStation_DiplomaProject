
Praca.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d6a8  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d58  0800d838  0800d838  0000e838  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e590  0800e590  000101d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800e590  0800e590  0000f590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e598  0800e598  000101d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e598  0800e598  0000f598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800e59c  0800e59c  0000f59c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800e5a0  00010000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000864  200001d8  0800e778  000101d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000a3c  0800e778  00010a3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000101d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000378ce  00000000  00000000  00010208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b8a  00000000  00000000  00047ad6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  0004d660  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001330  00000000  00000000  0004ef30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003039e  00000000  00000000  00050260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00026805  00000000  00000000  000805fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010f91c  00000000  00000000  000a6e03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001b671f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00008db0  00000000  00000000  001b6764  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000041  00000000  00000000  001bf514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d8 	.word	0x200001d8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d820 	.word	0x0800d820

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001dc 	.word	0x200001dc
 80001cc:	0800d820 	.word	0x0800d820

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_ldivmod>:
 8000be8:	b97b      	cbnz	r3, 8000c0a <__aeabi_ldivmod+0x22>
 8000bea:	b972      	cbnz	r2, 8000c0a <__aeabi_ldivmod+0x22>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bfbe      	ittt	lt
 8000bf0:	2000      	movlt	r0, #0
 8000bf2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bf6:	e006      	blt.n	8000c06 <__aeabi_ldivmod+0x1e>
 8000bf8:	bf08      	it	eq
 8000bfa:	2800      	cmpeq	r0, #0
 8000bfc:	bf1c      	itt	ne
 8000bfe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c02:	f04f 30ff 	movne.w	r0, #4294967295
 8000c06:	f000 b9b5 	b.w	8000f74 <__aeabi_idiv0>
 8000c0a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c0e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c12:	2900      	cmp	r1, #0
 8000c14:	db09      	blt.n	8000c2a <__aeabi_ldivmod+0x42>
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	db1a      	blt.n	8000c50 <__aeabi_ldivmod+0x68>
 8000c1a:	f000 f84d 	bl	8000cb8 <__udivmoddi4>
 8000c1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c26:	b004      	add	sp, #16
 8000c28:	4770      	bx	lr
 8000c2a:	4240      	negs	r0, r0
 8000c2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	db1b      	blt.n	8000c6c <__aeabi_ldivmod+0x84>
 8000c34:	f000 f840 	bl	8000cb8 <__udivmoddi4>
 8000c38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c40:	b004      	add	sp, #16
 8000c42:	4240      	negs	r0, r0
 8000c44:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c48:	4252      	negs	r2, r2
 8000c4a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c4e:	4770      	bx	lr
 8000c50:	4252      	negs	r2, r2
 8000c52:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c56:	f000 f82f 	bl	8000cb8 <__udivmoddi4>
 8000c5a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c5e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c62:	b004      	add	sp, #16
 8000c64:	4240      	negs	r0, r0
 8000c66:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c6a:	4770      	bx	lr
 8000c6c:	4252      	negs	r2, r2
 8000c6e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c72:	f000 f821 	bl	8000cb8 <__udivmoddi4>
 8000c76:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c7a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c7e:	b004      	add	sp, #16
 8000c80:	4252      	negs	r2, r2
 8000c82:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c86:	4770      	bx	lr

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b96a 	b.w	8000f74 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	460c      	mov	r4, r1
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d14e      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc4:	4694      	mov	ip, r2
 8000cc6:	458c      	cmp	ip, r1
 8000cc8:	4686      	mov	lr, r0
 8000cca:	fab2 f282 	clz	r2, r2
 8000cce:	d962      	bls.n	8000d96 <__udivmoddi4+0xde>
 8000cd0:	b14a      	cbz	r2, 8000ce6 <__udivmoddi4+0x2e>
 8000cd2:	f1c2 0320 	rsb	r3, r2, #32
 8000cd6:	4091      	lsls	r1, r2
 8000cd8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cdc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ce6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cea:	fa1f f68c 	uxth.w	r6, ip
 8000cee:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cf2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cf6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb04 f106 	mul.w	r1, r4, r6
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d0e:	f080 8112 	bcs.w	8000f36 <__udivmoddi4+0x27e>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 810f 	bls.w	8000f36 <__udivmoddi4+0x27e>
 8000d18:	3c02      	subs	r4, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a59      	subs	r1, r3, r1
 8000d1e:	fa1f f38e 	uxth.w	r3, lr
 8000d22:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d26:	fb07 1110 	mls	r1, r7, r0, r1
 8000d2a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d2e:	fb00 f606 	mul.w	r6, r0, r6
 8000d32:	429e      	cmp	r6, r3
 8000d34:	d90a      	bls.n	8000d4c <__udivmoddi4+0x94>
 8000d36:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d3e:	f080 80fc 	bcs.w	8000f3a <__udivmoddi4+0x282>
 8000d42:	429e      	cmp	r6, r3
 8000d44:	f240 80f9 	bls.w	8000f3a <__udivmoddi4+0x282>
 8000d48:	4463      	add	r3, ip
 8000d4a:	3802      	subs	r0, #2
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d52:	2100      	movs	r1, #0
 8000d54:	b11d      	cbz	r5, 8000d5e <__udivmoddi4+0xa6>
 8000d56:	40d3      	lsrs	r3, r2
 8000d58:	2200      	movs	r2, #0
 8000d5a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d905      	bls.n	8000d72 <__udivmoddi4+0xba>
 8000d66:	b10d      	cbz	r5, 8000d6c <__udivmoddi4+0xb4>
 8000d68:	e9c5 0100 	strd	r0, r1, [r5]
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4608      	mov	r0, r1
 8000d70:	e7f5      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d72:	fab3 f183 	clz	r1, r3
 8000d76:	2900      	cmp	r1, #0
 8000d78:	d146      	bne.n	8000e08 <__udivmoddi4+0x150>
 8000d7a:	42a3      	cmp	r3, r4
 8000d7c:	d302      	bcc.n	8000d84 <__udivmoddi4+0xcc>
 8000d7e:	4290      	cmp	r0, r2
 8000d80:	f0c0 80f0 	bcc.w	8000f64 <__udivmoddi4+0x2ac>
 8000d84:	1a86      	subs	r6, r0, r2
 8000d86:	eb64 0303 	sbc.w	r3, r4, r3
 8000d8a:	2001      	movs	r0, #1
 8000d8c:	2d00      	cmp	r5, #0
 8000d8e:	d0e6      	beq.n	8000d5e <__udivmoddi4+0xa6>
 8000d90:	e9c5 6300 	strd	r6, r3, [r5]
 8000d94:	e7e3      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000d96:	2a00      	cmp	r2, #0
 8000d98:	f040 8090 	bne.w	8000ebc <__udivmoddi4+0x204>
 8000d9c:	eba1 040c 	sub.w	r4, r1, ip
 8000da0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000da4:	fa1f f78c 	uxth.w	r7, ip
 8000da8:	2101      	movs	r1, #1
 8000daa:	fbb4 f6f8 	udiv	r6, r4, r8
 8000dae:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000db2:	fb08 4416 	mls	r4, r8, r6, r4
 8000db6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000dba:	fb07 f006 	mul.w	r0, r7, r6
 8000dbe:	4298      	cmp	r0, r3
 8000dc0:	d908      	bls.n	8000dd4 <__udivmoddi4+0x11c>
 8000dc2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc6:	f106 34ff 	add.w	r4, r6, #4294967295
 8000dca:	d202      	bcs.n	8000dd2 <__udivmoddi4+0x11a>
 8000dcc:	4298      	cmp	r0, r3
 8000dce:	f200 80cd 	bhi.w	8000f6c <__udivmoddi4+0x2b4>
 8000dd2:	4626      	mov	r6, r4
 8000dd4:	1a1c      	subs	r4, r3, r0
 8000dd6:	fa1f f38e 	uxth.w	r3, lr
 8000dda:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dde:	fb08 4410 	mls	r4, r8, r0, r4
 8000de2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000de6:	fb00 f707 	mul.w	r7, r0, r7
 8000dea:	429f      	cmp	r7, r3
 8000dec:	d908      	bls.n	8000e00 <__udivmoddi4+0x148>
 8000dee:	eb1c 0303 	adds.w	r3, ip, r3
 8000df2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000df6:	d202      	bcs.n	8000dfe <__udivmoddi4+0x146>
 8000df8:	429f      	cmp	r7, r3
 8000dfa:	f200 80b0 	bhi.w	8000f5e <__udivmoddi4+0x2a6>
 8000dfe:	4620      	mov	r0, r4
 8000e00:	1bdb      	subs	r3, r3, r7
 8000e02:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e06:	e7a5      	b.n	8000d54 <__udivmoddi4+0x9c>
 8000e08:	f1c1 0620 	rsb	r6, r1, #32
 8000e0c:	408b      	lsls	r3, r1
 8000e0e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e12:	431f      	orrs	r7, r3
 8000e14:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e18:	fa04 f301 	lsl.w	r3, r4, r1
 8000e1c:	ea43 030c 	orr.w	r3, r3, ip
 8000e20:	40f4      	lsrs	r4, r6
 8000e22:	fa00 f801 	lsl.w	r8, r0, r1
 8000e26:	0c38      	lsrs	r0, r7, #16
 8000e28:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e2c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e30:	fa1f fc87 	uxth.w	ip, r7
 8000e34:	fb00 441e 	mls	r4, r0, lr, r4
 8000e38:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e3c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e40:	45a1      	cmp	r9, r4
 8000e42:	fa02 f201 	lsl.w	r2, r2, r1
 8000e46:	d90a      	bls.n	8000e5e <__udivmoddi4+0x1a6>
 8000e48:	193c      	adds	r4, r7, r4
 8000e4a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e4e:	f080 8084 	bcs.w	8000f5a <__udivmoddi4+0x2a2>
 8000e52:	45a1      	cmp	r9, r4
 8000e54:	f240 8081 	bls.w	8000f5a <__udivmoddi4+0x2a2>
 8000e58:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e5c:	443c      	add	r4, r7
 8000e5e:	eba4 0409 	sub.w	r4, r4, r9
 8000e62:	fa1f f983 	uxth.w	r9, r3
 8000e66:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e6a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e6e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e72:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e76:	45a4      	cmp	ip, r4
 8000e78:	d907      	bls.n	8000e8a <__udivmoddi4+0x1d2>
 8000e7a:	193c      	adds	r4, r7, r4
 8000e7c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e80:	d267      	bcs.n	8000f52 <__udivmoddi4+0x29a>
 8000e82:	45a4      	cmp	ip, r4
 8000e84:	d965      	bls.n	8000f52 <__udivmoddi4+0x29a>
 8000e86:	3b02      	subs	r3, #2
 8000e88:	443c      	add	r4, r7
 8000e8a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e8e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e92:	eba4 040c 	sub.w	r4, r4, ip
 8000e96:	429c      	cmp	r4, r3
 8000e98:	46ce      	mov	lr, r9
 8000e9a:	469c      	mov	ip, r3
 8000e9c:	d351      	bcc.n	8000f42 <__udivmoddi4+0x28a>
 8000e9e:	d04e      	beq.n	8000f3e <__udivmoddi4+0x286>
 8000ea0:	b155      	cbz	r5, 8000eb8 <__udivmoddi4+0x200>
 8000ea2:	ebb8 030e 	subs.w	r3, r8, lr
 8000ea6:	eb64 040c 	sbc.w	r4, r4, ip
 8000eaa:	fa04 f606 	lsl.w	r6, r4, r6
 8000eae:	40cb      	lsrs	r3, r1
 8000eb0:	431e      	orrs	r6, r3
 8000eb2:	40cc      	lsrs	r4, r1
 8000eb4:	e9c5 6400 	strd	r6, r4, [r5]
 8000eb8:	2100      	movs	r1, #0
 8000eba:	e750      	b.n	8000d5e <__udivmoddi4+0xa6>
 8000ebc:	f1c2 0320 	rsb	r3, r2, #32
 8000ec0:	fa20 f103 	lsr.w	r1, r0, r3
 8000ec4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ec8:	fa24 f303 	lsr.w	r3, r4, r3
 8000ecc:	4094      	lsls	r4, r2
 8000ece:	430c      	orrs	r4, r1
 8000ed0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ed4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ed8:	fa1f f78c 	uxth.w	r7, ip
 8000edc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ee0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ee4:	0c23      	lsrs	r3, r4, #16
 8000ee6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eea:	fb00 f107 	mul.w	r1, r0, r7
 8000eee:	4299      	cmp	r1, r3
 8000ef0:	d908      	bls.n	8000f04 <__udivmoddi4+0x24c>
 8000ef2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ef6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000efa:	d22c      	bcs.n	8000f56 <__udivmoddi4+0x29e>
 8000efc:	4299      	cmp	r1, r3
 8000efe:	d92a      	bls.n	8000f56 <__udivmoddi4+0x29e>
 8000f00:	3802      	subs	r0, #2
 8000f02:	4463      	add	r3, ip
 8000f04:	1a5b      	subs	r3, r3, r1
 8000f06:	b2a4      	uxth	r4, r4
 8000f08:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f0c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f10:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f14:	fb01 f307 	mul.w	r3, r1, r7
 8000f18:	42a3      	cmp	r3, r4
 8000f1a:	d908      	bls.n	8000f2e <__udivmoddi4+0x276>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f101 36ff 	add.w	r6, r1, #4294967295
 8000f24:	d213      	bcs.n	8000f4e <__udivmoddi4+0x296>
 8000f26:	42a3      	cmp	r3, r4
 8000f28:	d911      	bls.n	8000f4e <__udivmoddi4+0x296>
 8000f2a:	3902      	subs	r1, #2
 8000f2c:	4464      	add	r4, ip
 8000f2e:	1ae4      	subs	r4, r4, r3
 8000f30:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f34:	e739      	b.n	8000daa <__udivmoddi4+0xf2>
 8000f36:	4604      	mov	r4, r0
 8000f38:	e6f0      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f3a:	4608      	mov	r0, r1
 8000f3c:	e706      	b.n	8000d4c <__udivmoddi4+0x94>
 8000f3e:	45c8      	cmp	r8, r9
 8000f40:	d2ae      	bcs.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f42:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f46:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f4a:	3801      	subs	r0, #1
 8000f4c:	e7a8      	b.n	8000ea0 <__udivmoddi4+0x1e8>
 8000f4e:	4631      	mov	r1, r6
 8000f50:	e7ed      	b.n	8000f2e <__udivmoddi4+0x276>
 8000f52:	4603      	mov	r3, r0
 8000f54:	e799      	b.n	8000e8a <__udivmoddi4+0x1d2>
 8000f56:	4630      	mov	r0, r6
 8000f58:	e7d4      	b.n	8000f04 <__udivmoddi4+0x24c>
 8000f5a:	46d6      	mov	lr, sl
 8000f5c:	e77f      	b.n	8000e5e <__udivmoddi4+0x1a6>
 8000f5e:	4463      	add	r3, ip
 8000f60:	3802      	subs	r0, #2
 8000f62:	e74d      	b.n	8000e00 <__udivmoddi4+0x148>
 8000f64:	4606      	mov	r6, r0
 8000f66:	4623      	mov	r3, r4
 8000f68:	4608      	mov	r0, r1
 8000f6a:	e70f      	b.n	8000d8c <__udivmoddi4+0xd4>
 8000f6c:	3e02      	subs	r6, #2
 8000f6e:	4463      	add	r3, ip
 8000f70:	e730      	b.n	8000dd4 <__udivmoddi4+0x11c>
 8000f72:	bf00      	nop

08000f74 <__aeabi_idiv0>:
 8000f74:	4770      	bx	lr
 8000f76:	bf00      	nop

08000f78 <_ZN6AS7331C1EP19__I2C_HandleTypeDeft>:
 */


#include "AS7331.hpp"

AS7331::AS7331(I2C_HandleTypeDef* _hi2c, uint16_t _timeout)
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	4613      	mov	r3, r2
 8000f84:	80fb      	strh	r3, [r7, #6]
			: i2c(_hi2c), timeout(_timeout)
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	68ba      	ldr	r2, [r7, #8]
 8000f8a:	619a      	str	r2, [r3, #24]
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	88fa      	ldrh	r2, [r7, #6]
 8000f90:	839a      	strh	r2, [r3, #28]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	22e8      	movs	r2, #232	@ 0xe8
 8000f96:	83da      	strh	r2, [r3, #30]
{}
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	3714      	adds	r7, #20
 8000f9e:	46bd      	mov	sp, r7
 8000fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa4:	4770      	bx	lr

08000fa6 <_ZN6AS73314initEv>:

bool AS7331::init(){
 8000fa6:	b580      	push	{r7, lr}
 8000fa8:	b086      	sub	sp, #24
 8000faa:	af02      	add	r7, sp, #8
 8000fac:	6078      	str	r0, [r7, #4]
	// Data buffer and variable for checking communication errors:
	HAL_StatusTypeDef check;
	uint8_t data[2];

	// Set Power Down mode:
	data[0] = 0x00; // OSR
 8000fae:	2300      	movs	r3, #0
 8000fb0:	733b      	strb	r3, [r7, #12]
	data[1] = 0x40; // PD=1, DOS=010 - Power Down state
 8000fb2:	2340      	movs	r3, #64	@ 0x40
 8000fb4:	737b      	strb	r3, [r7, #13]
	check = HAL_I2C_Master_Transmit(i2c, AS7331_ADDR, data, 2, timeout);
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	6998      	ldr	r0, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	8bd9      	ldrh	r1, [r3, #30]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	8b9b      	ldrh	r3, [r3, #28]
 8000fc2:	f107 020c 	add.w	r2, r7, #12
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	2302      	movs	r3, #2
 8000fca:	f004 fbcd 	bl	8005768 <HAL_I2C_Master_Transmit>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	73fb      	strb	r3, [r7, #15]
    if(check != HAL_OK) return false;
 8000fd2:	7bfb      	ldrb	r3, [r7, #15]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <_ZN6AS73314initEv+0x36>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e077      	b.n	80010cc <_ZN6AS73314initEv+0x126>

	// Reset Power Down mode and set configuration state:
	data[0] = 0x00; // OSR
 8000fdc:	2300      	movs	r3, #0
 8000fde:	733b      	strb	r3, [r7, #12]
	data[1] = 0x02; // PD=0, DOS=010 - Configuration state command
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	737b      	strb	r3, [r7, #13]
	check = HAL_I2C_Master_Transmit(i2c, AS7331_ADDR, data, 2, timeout);
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	6998      	ldr	r0, [r3, #24]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	8bd9      	ldrh	r1, [r3, #30]
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	8b9b      	ldrh	r3, [r3, #28]
 8000ff0:	f107 020c 	add.w	r2, r7, #12
 8000ff4:	9300      	str	r3, [sp, #0]
 8000ff6:	2302      	movs	r3, #2
 8000ff8:	f004 fbb6 	bl	8005768 <HAL_I2C_Master_Transmit>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]
    if(check != HAL_OK) return false;
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d001      	beq.n	800100a <_ZN6AS73314initEv+0x64>
 8001006:	2300      	movs	r3, #0
 8001008:	e060      	b.n	80010cc <_ZN6AS73314initEv+0x126>

    // Set gain and conversion time
    data[0] = 0x01; // CREG1
 800100a:	2301      	movs	r3, #1
 800100c:	733b      	strb	r3, [r7, #12]
    data[1] = 0x0A; // Gain = 2048x, Time = 1024 ms
 800100e:	230a      	movs	r3, #10
 8001010:	737b      	strb	r3, [r7, #13]
    check = HAL_I2C_Master_Transmit(i2c, AS7331_ADDR, data, 2, timeout);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6998      	ldr	r0, [r3, #24]
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	8bd9      	ldrh	r1, [r3, #30]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	8b9b      	ldrh	r3, [r3, #28]
 800101e:	f107 020c 	add.w	r2, r7, #12
 8001022:	9300      	str	r3, [sp, #0]
 8001024:	2302      	movs	r3, #2
 8001026:	f004 fb9f 	bl	8005768 <HAL_I2C_Master_Transmit>
 800102a:	4603      	mov	r3, r0
 800102c:	73fb      	strb	r3, [r7, #15]
    if(check != HAL_OK) return false;
 800102e:	7bfb      	ldrb	r3, [r7, #15]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <_ZN6AS73314initEv+0x92>
 8001034:	2300      	movs	r3, #0
 8001036:	e049      	b.n	80010cc <_ZN6AS73314initEv+0x126>

    // Set measurement mode:
    data[0] = 0x08; // CREG3
 8001038:	2308      	movs	r3, #8
 800103a:	733b      	strb	r3, [r7, #12]
    data[1] = 0x00; // MMODE=00 (CONT Mode), SB=0, RDYOD=0, CCLK=00 (1.024 MHz)
 800103c:	2300      	movs	r3, #0
 800103e:	737b      	strb	r3, [r7, #13]
    check = HAL_I2C_Master_Transmit(i2c, AS7331_ADDR, data, 2, timeout);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6998      	ldr	r0, [r3, #24]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	8bd9      	ldrh	r1, [r3, #30]
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	8b9b      	ldrh	r3, [r3, #28]
 800104c:	f107 020c 	add.w	r2, r7, #12
 8001050:	9300      	str	r3, [sp, #0]
 8001052:	2302      	movs	r3, #2
 8001054:	f004 fb88 	bl	8005768 <HAL_I2C_Master_Transmit>
 8001058:	4603      	mov	r3, r0
 800105a:	73fb      	strb	r3, [r7, #15]
    if (check != HAL_OK) return false;
 800105c:	7bfb      	ldrb	r3, [r7, #15]
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <_ZN6AS73314initEv+0xc0>
 8001062:	2300      	movs	r3, #0
 8001064:	e032      	b.n	80010cc <_ZN6AS73314initEv+0x126>

    // Set measurement state:
    data[0] = 0x00; // OSR
 8001066:	2300      	movs	r3, #0
 8001068:	733b      	strb	r3, [r7, #12]
    data[1] = 0x03; // PD=0, DOS=011 - Measurement state command
 800106a:	2303      	movs	r3, #3
 800106c:	737b      	strb	r3, [r7, #13]
    check = HAL_I2C_Master_Transmit(i2c, AS7331_ADDR, data, 2, timeout);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6998      	ldr	r0, [r3, #24]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	8bd9      	ldrh	r1, [r3, #30]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	8b9b      	ldrh	r3, [r3, #28]
 800107a:	f107 020c 	add.w	r2, r7, #12
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	2302      	movs	r3, #2
 8001082:	f004 fb71 	bl	8005768 <HAL_I2C_Master_Transmit>
 8001086:	4603      	mov	r3, r0
 8001088:	73fb      	strb	r3, [r7, #15]
    if(check != HAL_OK) return false;
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <_ZN6AS73314initEv+0xee>
 8001090:	2300      	movs	r3, #0
 8001092:	e01b      	b.n	80010cc <_ZN6AS73314initEv+0x126>

    // Set Continuous Measurement Mode:
    data[0] = 0x00;  // Adres OSR
 8001094:	2300      	movs	r3, #0
 8001096:	733b      	strb	r3, [r7, #12]
    data[1] = 0x83;  // PD=0, DOS=011, SS=1
 8001098:	2383      	movs	r3, #131	@ 0x83
 800109a:	737b      	strb	r3, [r7, #13]
    check = HAL_I2C_Master_Transmit(i2c, AS7331_ADDR, data, 2, timeout);
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6998      	ldr	r0, [r3, #24]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	8bd9      	ldrh	r1, [r3, #30]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	8b9b      	ldrh	r3, [r3, #28]
 80010a8:	f107 020c 	add.w	r2, r7, #12
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	2302      	movs	r3, #2
 80010b0:	f004 fb5a 	bl	8005768 <HAL_I2C_Master_Transmit>
 80010b4:	4603      	mov	r3, r0
 80010b6:	73fb      	strb	r3, [r7, #15]
    if(check != HAL_OK) return false;
 80010b8:	7bfb      	ldrb	r3, [r7, #15]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <_ZN6AS73314initEv+0x11c>
 80010be:	2300      	movs	r3, #0
 80010c0:	e004      	b.n	80010cc <_ZN6AS73314initEv+0x126>


    HAL_Delay(1000);
 80010c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010c6:	f003 fdf5 	bl	8004cb4 <HAL_Delay>
    return true;
 80010ca:	2301      	movs	r3, #1
}
 80010cc:	4618      	mov	r0, r3
 80010ce:	3710      	adds	r7, #16
 80010d0:	46bd      	mov	sp, r7
 80010d2:	bd80      	pop	{r7, pc}
 80010d4:	0000      	movs	r0, r0
	...

080010d8 <_ZN6AS733116readMeasurementsEv>:


bool AS7331::readMeasurements(){
 80010d8:	b580      	push	{r7, lr}
 80010da:	b08a      	sub	sp, #40	@ 0x28
 80010dc:	af04      	add	r7, sp, #16
 80010de:	6078      	str	r0, [r7, #4]
    HAL_StatusTypeDef check;
    uint8_t data[2];

	// Read UVA (from OUTCONV_A register)
    check = HAL_I2C_Mem_Read(i2c, AS7331_ADDR, 0x02, 1, data, 2, timeout);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6998      	ldr	r0, [r3, #24]
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	8bd9      	ldrh	r1, [r3, #30]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	8b9b      	ldrh	r3, [r3, #28]
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2302      	movs	r3, #2
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 030c 	add.w	r3, r7, #12
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	2202      	movs	r2, #2
 80010fc:	f004 fe56 	bl	8005dac <HAL_I2C_Mem_Read>
 8001100:	4603      	mov	r3, r0
 8001102:	75fb      	strb	r3, [r7, #23]
	if (check != HAL_OK) return false;
 8001104:	7dfb      	ldrb	r3, [r7, #23]
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <_ZN6AS733116readMeasurementsEv+0x36>
 800110a:	2300      	movs	r3, #0
 800110c:	e08b      	b.n	8001226 <_ZN6AS733116readMeasurementsEv+0x14e>
	uint16_t uva_raw = (data[0] << 8) | data[1];
 800110e:	7b3b      	ldrb	r3, [r7, #12]
 8001110:	021b      	lsls	r3, r3, #8
 8001112:	b21a      	sxth	r2, r3
 8001114:	7b7b      	ldrb	r3, [r7, #13]
 8001116:	b21b      	sxth	r3, r3
 8001118:	4313      	orrs	r3, r2
 800111a:	b21b      	sxth	r3, r3
 800111c:	82bb      	strh	r3, [r7, #20]
	uv_data.uva = static_cast<double>(uva_raw * 0.16 * pow(10, -3));  // Save UVA in struct (LSB for UVA = 0.16 nW/cm²)
 800111e:	8abb      	ldrh	r3, [r7, #20]
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff f9ff 	bl	8000524 <__aeabi_i2d>
 8001126:	a342      	add	r3, pc, #264	@ (adr r3, 8001230 <_ZN6AS733116readMeasurementsEv+0x158>)
 8001128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800112c:	f7ff fa64 	bl	80005f8 <__aeabi_dmul>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	4610      	mov	r0, r2
 8001136:	4619      	mov	r1, r3
 8001138:	a33f      	add	r3, pc, #252	@ (adr r3, 8001238 <_ZN6AS733116readMeasurementsEv+0x160>)
 800113a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113e:	f7ff fa5b 	bl	80005f8 <__aeabi_dmul>
 8001142:	4602      	mov	r2, r0
 8001144:	460b      	mov	r3, r1
 8001146:	6879      	ldr	r1, [r7, #4]
 8001148:	e9c1 2300 	strd	r2, r3, [r1]

    // Read UVB (OUTCONV_B register at address 0x03)
    check = HAL_I2C_Mem_Read(i2c, AS7331_ADDR, 0x03, 1, data, 2, timeout);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6998      	ldr	r0, [r3, #24]
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	8bd9      	ldrh	r1, [r3, #30]
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	8b9b      	ldrh	r3, [r3, #28]
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	2302      	movs	r3, #2
 800115c:	9301      	str	r3, [sp, #4]
 800115e:	f107 030c 	add.w	r3, r7, #12
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	2301      	movs	r3, #1
 8001166:	2203      	movs	r2, #3
 8001168:	f004 fe20 	bl	8005dac <HAL_I2C_Mem_Read>
 800116c:	4603      	mov	r3, r0
 800116e:	75fb      	strb	r3, [r7, #23]
    if (check != HAL_OK) return false;
 8001170:	7dfb      	ldrb	r3, [r7, #23]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d001      	beq.n	800117a <_ZN6AS733116readMeasurementsEv+0xa2>
 8001176:	2300      	movs	r3, #0
 8001178:	e055      	b.n	8001226 <_ZN6AS733116readMeasurementsEv+0x14e>
	uint16_t uvb_raw = (data[0] << 8) | data[1];
 800117a:	7b3b      	ldrb	r3, [r7, #12]
 800117c:	021b      	lsls	r3, r3, #8
 800117e:	b21a      	sxth	r2, r3
 8001180:	7b7b      	ldrb	r3, [r7, #13]
 8001182:	b21b      	sxth	r3, r3
 8001184:	4313      	orrs	r3, r2
 8001186:	b21b      	sxth	r3, r3
 8001188:	827b      	strh	r3, [r7, #18]
	uv_data.uvb = static_cast<double>(uvb_raw * 0.16 * pow(10, -3));  // Save UVA in struct (LSB for UVB = 0.16 nW/cm²)
 800118a:	8a7b      	ldrh	r3, [r7, #18]
 800118c:	4618      	mov	r0, r3
 800118e:	f7ff f9c9 	bl	8000524 <__aeabi_i2d>
 8001192:	a327      	add	r3, pc, #156	@ (adr r3, 8001230 <_ZN6AS733116readMeasurementsEv+0x158>)
 8001194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001198:	f7ff fa2e 	bl	80005f8 <__aeabi_dmul>
 800119c:	4602      	mov	r2, r0
 800119e:	460b      	mov	r3, r1
 80011a0:	4610      	mov	r0, r2
 80011a2:	4619      	mov	r1, r3
 80011a4:	a324      	add	r3, pc, #144	@ (adr r3, 8001238 <_ZN6AS733116readMeasurementsEv+0x160>)
 80011a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011aa:	f7ff fa25 	bl	80005f8 <__aeabi_dmul>
 80011ae:	4602      	mov	r2, r0
 80011b0:	460b      	mov	r3, r1
 80011b2:	6879      	ldr	r1, [r7, #4]
 80011b4:	e9c1 2302 	strd	r2, r3, [r1, #8]

    // Read UVC (OUTCONV_C register at address 0x04)
    check = HAL_I2C_Mem_Read(i2c, AS7331_ADDR, 0x04, 1, data, 2, timeout);
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	6998      	ldr	r0, [r3, #24]
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	8bd9      	ldrh	r1, [r3, #30]
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	8b9b      	ldrh	r3, [r3, #28]
 80011c4:	9302      	str	r3, [sp, #8]
 80011c6:	2302      	movs	r3, #2
 80011c8:	9301      	str	r3, [sp, #4]
 80011ca:	f107 030c 	add.w	r3, r7, #12
 80011ce:	9300      	str	r3, [sp, #0]
 80011d0:	2301      	movs	r3, #1
 80011d2:	2204      	movs	r2, #4
 80011d4:	f004 fdea 	bl	8005dac <HAL_I2C_Mem_Read>
 80011d8:	4603      	mov	r3, r0
 80011da:	75fb      	strb	r3, [r7, #23]
    if (check != HAL_OK) return false;
 80011dc:	7dfb      	ldrb	r3, [r7, #23]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <_ZN6AS733116readMeasurementsEv+0x10e>
 80011e2:	2300      	movs	r3, #0
 80011e4:	e01f      	b.n	8001226 <_ZN6AS733116readMeasurementsEv+0x14e>
	uint16_t uvc_raw = (data[0] << 8) | data[1];
 80011e6:	7b3b      	ldrb	r3, [r7, #12]
 80011e8:	021b      	lsls	r3, r3, #8
 80011ea:	b21a      	sxth	r2, r3
 80011ec:	7b7b      	ldrb	r3, [r7, #13]
 80011ee:	b21b      	sxth	r3, r3
 80011f0:	4313      	orrs	r3, r2
 80011f2:	b21b      	sxth	r3, r3
 80011f4:	823b      	strh	r3, [r7, #16]
	uv_data.uvc = static_cast<double>(uvc_raw * 0.08 * pow(10, -3));  // Save UVA in struct (LSB for UVC = 0.08 nW/cm²)
 80011f6:	8a3b      	ldrh	r3, [r7, #16]
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff f993 	bl	8000524 <__aeabi_i2d>
 80011fe:	a310      	add	r3, pc, #64	@ (adr r3, 8001240 <_ZN6AS733116readMeasurementsEv+0x168>)
 8001200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001204:	f7ff f9f8 	bl	80005f8 <__aeabi_dmul>
 8001208:	4602      	mov	r2, r0
 800120a:	460b      	mov	r3, r1
 800120c:	4610      	mov	r0, r2
 800120e:	4619      	mov	r1, r3
 8001210:	a309      	add	r3, pc, #36	@ (adr r3, 8001238 <_ZN6AS733116readMeasurementsEv+0x160>)
 8001212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001216:	f7ff f9ef 	bl	80005f8 <__aeabi_dmul>
 800121a:	4602      	mov	r2, r0
 800121c:	460b      	mov	r3, r1
 800121e:	6879      	ldr	r1, [r7, #4]
 8001220:	e9c1 2304 	strd	r2, r3, [r1, #16]

	return true;
 8001224:	2301      	movs	r3, #1
}
 8001226:	4618      	mov	r0, r3
 8001228:	3718      	adds	r7, #24
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	47ae147b 	.word	0x47ae147b
 8001234:	3fc47ae1 	.word	0x3fc47ae1
 8001238:	d2f1a9fc 	.word	0xd2f1a9fc
 800123c:	3f50624d 	.word	0x3f50624d
 8001240:	47ae147b 	.word	0x47ae147b
 8001244:	3fb47ae1 	.word	0x3fb47ae1

08001248 <HCSR04_delay>:
uint32_t Difference = 0;
uint8_t Is_First_Captured = 0;
uint8_t Distance  = 0;

// Funkcja opóźniająca:
void HCSR04_delay(uint16_t time){
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	4603      	mov	r3, r0
 8001250:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <HCSR04_delay+0x30>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	2200      	movs	r2, #0
 8001258:	625a      	str	r2, [r3, #36]	@ 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < time);
 800125a:	bf00      	nop
 800125c:	4b06      	ldr	r3, [pc, #24]	@ (8001278 <HCSR04_delay+0x30>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001262:	88fb      	ldrh	r3, [r7, #6]
 8001264:	429a      	cmp	r2, r3
 8001266:	d3f9      	bcc.n	800125c <HCSR04_delay+0x14>
}
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
 8001276:	bf00      	nop
 8001278:	20000780 	.word	0x20000780

0800127c <HCSR04_Read>:

void HCSR04_Read(void){
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TRIGPIN_GPIO_Port, TRIGPIN_Pin, GPIO_PIN_SET);
 8001280:	2201      	movs	r2, #1
 8001282:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001286:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800128a:	f004 f9a1 	bl	80055d0 <HAL_GPIO_WritePin>
	HCSR04_delay(10); // opóźnienie na 10 mikrosekund
 800128e:	200a      	movs	r0, #10
 8001290:	f7ff ffda 	bl	8001248 <HCSR04_delay>
	HAL_GPIO_WritePin(TRIGPIN_GPIO_Port, TRIGPIN_Pin, GPIO_PIN_RESET);
 8001294:	2200      	movs	r2, #0
 8001296:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800129a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800129e:	f004 f997 	bl	80055d0 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);
 80012a2:	4b05      	ldr	r3, [pc, #20]	@ (80012b8 <HCSR04_Read+0x3c>)
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	68da      	ldr	r2, [r3, #12]
 80012a8:	4b03      	ldr	r3, [pc, #12]	@ (80012b8 <HCSR04_Read+0x3c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f042 0202 	orr.w	r2, r2, #2
 80012b0:	60da      	str	r2, [r3, #12]
}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	20000780 	.word	0x20000780
 80012bc:	00000000 	.word	0x00000000

080012c0 <HAL_TIM_IC_CaptureCallback>:

// Przerwanie sprawdź dokładnie jak działa:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	7f1b      	ldrb	r3, [r3, #28]
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	f040 8083 	bne.w	80013d8 <HAL_TIM_IC_CaptureCallback+0x118>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 80012d2:	4b45      	ldr	r3, [pc, #276]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d11a      	bne.n	8001310 <HAL_TIM_IC_CaptureCallback+0x50>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 80012da:	2100      	movs	r1, #0
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f007 fdb3 	bl	8008e48 <HAL_TIM_ReadCapturedValue>
 80012e2:	4603      	mov	r3, r0
 80012e4:	4a41      	ldr	r2, [pc, #260]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 80012e6:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 80012e8:	4b3f      	ldr	r3, [pc, #252]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80012ea:	2201      	movs	r2, #1
 80012ec:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6a1a      	ldr	r2, [r3, #32]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f022 020a 	bic.w	r2, r2, #10
 80012fc:	621a      	str	r2, [r3, #32]
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f042 0202 	orr.w	r2, r2, #2
 800130c:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 800130e:	e063      	b.n	80013d8 <HAL_TIM_IC_CaptureCallback+0x118>
		else if (Is_First_Captured==1)   // if the first is already captured
 8001310:	4b35      	ldr	r3, [pc, #212]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 8001312:	781b      	ldrb	r3, [r3, #0]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d15f      	bne.n	80013d8 <HAL_TIM_IC_CaptureCallback+0x118>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 8001318:	2100      	movs	r1, #0
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	f007 fd94 	bl	8008e48 <HAL_TIM_ReadCapturedValue>
 8001320:	4603      	mov	r3, r0
 8001322:	4a33      	ldr	r2, [pc, #204]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001324:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	2200      	movs	r2, #0
 800132c:	625a      	str	r2, [r3, #36]	@ 0x24
			if (IC_Val2 > IC_Val1)
 800132e:	4b30      	ldr	r3, [pc, #192]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001330:	681a      	ldr	r2, [r3, #0]
 8001332:	4b2e      	ldr	r3, [pc, #184]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	429a      	cmp	r2, r3
 8001338:	d907      	bls.n	800134a <HAL_TIM_IC_CaptureCallback+0x8a>
				Difference = IC_Val2-IC_Val1;
 800133a:	4b2d      	ldr	r3, [pc, #180]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	4b2b      	ldr	r3, [pc, #172]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	1ad3      	subs	r3, r2, r3
 8001344:	4a2b      	ldr	r2, [pc, #172]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001346:	6013      	str	r3, [r2, #0]
 8001348:	e00f      	b.n	800136a <HAL_TIM_IC_CaptureCallback+0xaa>
			else if (IC_Val1 > IC_Val2)
 800134a:	4b28      	ldr	r3, [pc, #160]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 800134c:	681a      	ldr	r2, [r3, #0]
 800134e:	4b28      	ldr	r3, [pc, #160]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	429a      	cmp	r2, r3
 8001354:	d909      	bls.n	800136a <HAL_TIM_IC_CaptureCallback+0xaa>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 8001356:	4b26      	ldr	r3, [pc, #152]	@ (80013f0 <HAL_TIM_IC_CaptureCallback+0x130>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	4b24      	ldr	r3, [pc, #144]	@ (80013ec <HAL_TIM_IC_CaptureCallback+0x12c>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	1ad3      	subs	r3, r2, r3
 8001360:	f503 437f 	add.w	r3, r3, #65280	@ 0xff00
 8001364:	33ff      	adds	r3, #255	@ 0xff
 8001366:	4a23      	ldr	r2, [pc, #140]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 8001368:	6013      	str	r3, [r2, #0]
			Distance = Difference * .034/2;
 800136a:	4b22      	ldr	r3, [pc, #136]	@ (80013f4 <HAL_TIM_IC_CaptureCallback+0x134>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4618      	mov	r0, r3
 8001370:	f7ff f8c8 	bl	8000504 <__aeabi_ui2d>
 8001374:	a31a      	add	r3, pc, #104	@ (adr r3, 80013e0 <HAL_TIM_IC_CaptureCallback+0x120>)
 8001376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800137a:	f7ff f93d 	bl	80005f8 <__aeabi_dmul>
 800137e:	4602      	mov	r2, r0
 8001380:	460b      	mov	r3, r1
 8001382:	4610      	mov	r0, r2
 8001384:	4619      	mov	r1, r3
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800138e:	f7ff fa5d 	bl	800084c <__aeabi_ddiv>
 8001392:	4602      	mov	r2, r0
 8001394:	460b      	mov	r3, r1
 8001396:	4610      	mov	r0, r2
 8001398:	4619      	mov	r1, r3
 800139a:	f7ff fc05 	bl	8000ba8 <__aeabi_d2uiz>
 800139e:	4603      	mov	r3, r0
 80013a0:	b2da      	uxtb	r2, r3
 80013a2:	4b15      	ldr	r3, [pc, #84]	@ (80013f8 <HAL_TIM_IC_CaptureCallback+0x138>)
 80013a4:	701a      	strb	r2, [r3, #0]
			Is_First_Captured = 0; // set it back to false
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_TIM_IC_CaptureCallback+0x128>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	6a1a      	ldr	r2, [r3, #32]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f022 020a 	bic.w	r2, r2, #10
 80013ba:	621a      	str	r2, [r3, #32]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	6a12      	ldr	r2, [r2, #32]
 80013c6:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80013c8:	4b0c      	ldr	r3, [pc, #48]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	68da      	ldr	r2, [r3, #12]
 80013ce:	4b0b      	ldr	r3, [pc, #44]	@ (80013fc <HAL_TIM_IC_CaptureCallback+0x13c>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	f022 0202 	bic.w	r2, r2, #2
 80013d6:	60da      	str	r2, [r3, #12]
}
 80013d8:	bf00      	nop
 80013da:	3708      	adds	r7, #8
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	b020c49c 	.word	0xb020c49c
 80013e4:	3fa16872 	.word	0x3fa16872
 80013e8:	20000200 	.word	0x20000200
 80013ec:	200001f4 	.word	0x200001f4
 80013f0:	200001f8 	.word	0x200001f8
 80013f4:	200001fc 	.word	0x200001fc
 80013f8:	20000201 	.word	0x20000201
 80013fc:	20000780 	.word	0x20000780

08001400 <_ZSt23__is_constant_evaluatedv>:
  // This can be used without checking if the compiler supports the feature.
  // The macro _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED can be used to check if
  // the compiler support is present to make this function work as expected.
  _GLIBCXX_CONSTEXPR inline bool
  __is_constant_evaluated() _GLIBCXX_NOEXCEPT
  {
 8001400:	b480      	push	{r7}
 8001402:	af00      	add	r7, sp, #0
#if __cpp_if_consteval >= 202106L
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    if consteval { return true; } else { return false; }
#elif __cplusplus >= 201103L && __has_builtin(__builtin_is_constant_evaluated)
# define _GLIBCXX_HAVE_IS_CONSTANT_EVALUATED 1
    return __builtin_is_constant_evaluated();
 8001404:	2300      	movs	r3, #0
#else
    return false;
#endif
  }
 8001406:	4618      	mov	r0, r3
 8001408:	46bd      	mov	sp, r7
 800140a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140e:	4770      	bx	lr

08001410 <_ZNSt11char_traitsIcE6lengthEPKc>:
#endif
	return __builtin_memcmp(__s1, __s2, __n);
      }

      static _GLIBCXX17_CONSTEXPR size_t
      length(const char_type* __s)
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
      {
#if __cplusplus >= 201703L
	if (std::__is_constant_evaluated())
 8001418:	f7ff fff2 	bl	8001400 <_ZSt23__is_constant_evaluatedv>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d004      	beq.n	800142c <_ZNSt11char_traitsIcE6lengthEPKc+0x1c>
	  return __gnu_cxx::char_traits<char_type>::length(__s);
 8001422:	6878      	ldr	r0, [r7, #4]
 8001424:	f000 fb29 	bl	8001a7a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>
 8001428:	4603      	mov	r3, r0
 800142a:	e004      	b.n	8001436 <_ZNSt11char_traitsIcE6lengthEPKc+0x26>
#endif
	return __builtin_strlen(__s);
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f7fe ff1f 	bl	8000270 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	bf00      	nop
      }
 8001436:	4618      	mov	r0, r3
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}

0800143e <_ZNSt7__cxx119to_stringEi>:
  inline string
  to_string(int __val)
#if _GLIBCXX_USE_CXX11_ABI && (__CHAR_BIT__ * __SIZEOF_INT__) <= 32
  noexcept // any 32-bit value fits in the SSO buffer
#endif
  {
 800143e:	b590      	push	{r4, r7, lr}
 8001440:	b087      	sub	sp, #28
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	6039      	str	r1, [r7, #0]
    const bool __neg = __val < 0;
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	0fdb      	lsrs	r3, r3, #31
 800144c:	75fb      	strb	r3, [r7, #23]
    const unsigned __uval = __neg ? (unsigned)~__val + 1u : __val;
 800144e:	7dfb      	ldrb	r3, [r7, #23]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d002      	beq.n	800145a <_ZNSt7__cxx119to_stringEi+0x1c>
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	425b      	negs	r3, r3
 8001458:	e000      	b.n	800145c <_ZNSt7__cxx119to_stringEi+0x1e>
 800145a:	683b      	ldr	r3, [r7, #0]
 800145c:	613b      	str	r3, [r7, #16]
    const auto __len = __detail::__to_chars_len(__uval);
 800145e:	210a      	movs	r1, #10
 8001460:	6938      	ldr	r0, [r7, #16]
 8001462:	f000 fb2a 	bl	8001aba <_ZNSt8__detail14__to_chars_lenIjEEjT_i>
 8001466:	60f8      	str	r0, [r7, #12]
    string __str(__neg + __len, '-');
 8001468:	7dfa      	ldrb	r2, [r7, #23]
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	18d4      	adds	r4, r2, r3
 800146e:	f107 0308 	add.w	r3, r7, #8
 8001472:	4618      	mov	r0, r3
 8001474:	f009 f89d 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8001478:	f107 0308 	add.w	r3, r7, #8
 800147c:	222d      	movs	r2, #45	@ 0x2d
 800147e:	4621      	mov	r1, r4
 8001480:	6878      	ldr	r0, [r7, #4]
 8001482:	f000 fb59 	bl	8001b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>
 8001486:	f107 0308 	add.w	r3, r7, #8
 800148a:	4618      	mov	r0, r3
 800148c:	f009 f893 	bl	800a5b6 <_ZNSaIcED1Ev>
    __detail::__to_chars_10_impl(&__str[__neg], __len, __uval);
 8001490:	7dfb      	ldrb	r3, [r7, #23]
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f009 fa0e 	bl	800a8b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>
 800149a:	4603      	mov	r3, r0
 800149c:	693a      	ldr	r2, [r7, #16]
 800149e:	68f9      	ldr	r1, [r7, #12]
 80014a0:	4618      	mov	r0, r3
 80014a2:	f000 fb67 	bl	8001b74 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>
    return __str;
 80014a6:	bf00      	nop
  }
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	371c      	adds	r7, #28
 80014ac:	46bd      	mov	sp, r7
 80014ae:	bd90      	pop	{r4, r7, pc}

080014b0 <_ZN16SensorStringDataC1Ev>:
	int16_t temperature;  // Temperatura [°C]
	uint16_t vocIndex;
	uint16_t noxIndex; 	// TUTAJ MAM CHYBA BLAD
};

struct SensorStringData {
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f009 f93c 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3318      	adds	r3, #24
 80014c4:	4618      	mov	r0, r3
 80014c6:	f009 f937 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3330      	adds	r3, #48	@ 0x30
 80014ce:	4618      	mov	r0, r3
 80014d0:	f009 f932 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	3348      	adds	r3, #72	@ 0x48
 80014d8:	4618      	mov	r0, r3
 80014da:	f009 f92d 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	3360      	adds	r3, #96	@ 0x60
 80014e2:	4618      	mov	r0, r3
 80014e4:	f009 f928 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	3378      	adds	r3, #120	@ 0x78
 80014ec:	4618      	mov	r0, r3
 80014ee:	f009 f923 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	3390      	adds	r3, #144	@ 0x90
 80014f6:	4618      	mov	r0, r3
 80014f8:	f009 f91e 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	33a8      	adds	r3, #168	@ 0xa8
 8001500:	4618      	mov	r0, r3
 8001502:	f009 f919 	bl	800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	4618      	mov	r0, r3
 800150a:	3708      	adds	r7, #8
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_ZN5SEN55C1EP19__I2C_HandleTypeDeft>:
 *      Author: Mateusz Kowalczyk
 */

#include "SEN55.hpp"

SEN55::SEN55(I2C_HandleTypeDef* _hi2c, uint16_t _timeout)
 8001510:	b580      	push	{r7, lr}
 8001512:	b084      	sub	sp, #16
 8001514:	af00      	add	r7, sp, #0
 8001516:	60f8      	str	r0, [r7, #12]
 8001518:	60b9      	str	r1, [r7, #8]
 800151a:	4613      	mov	r3, r2
 800151c:	80fb      	strh	r3, [r7, #6]
			:i2c(_hi2c), timeout(_timeout){}
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff ffc5 	bl	80014b0 <_ZN16SensorStringDataC1Ev>
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	68ba      	ldr	r2, [r7, #8]
 800152a:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	88fa      	ldrh	r2, [r7, #6]
 8001532:	f8a3 20c4 	strh.w	r2, [r3, #196]	@ 0xc4
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	22d2      	movs	r2, #210	@ 0xd2
 800153a:	f8a3 20d6 	strh.w	r2, [r3, #214]	@ 0xd6
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	4618      	mov	r0, r3
 8001542:	3710      	adds	r7, #16
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}

08001548 <_ZN5SEN5516startMeasurementEv>:

bool SEN55::startMeasurement(){
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af02      	add	r7, sp, #8
 800154e:	6078      	str	r0, [r7, #4]
	// Komenda do startu pomiarów:
	constexpr uint16_t startMeasurementCmd = 0x0021;
 8001550:	2321      	movs	r3, #33	@ 0x21
 8001552:	81fb      	strh	r3, [r7, #14]
	uint8_t cmd[2];

	// Podzielenie komendy na dwa bajty:
	cmd[0] = startMeasurementCmd >> 8;			// Starszy bajt
 8001554:	2300      	movs	r3, #0
 8001556:	723b      	strb	r3, [r7, #8]
	cmd[1] = startMeasurementCmd & 0xFF;		// Młodszy bajt (maskowanie w celu zachowania pozostałych danych komendy)
 8001558:	2321      	movs	r3, #33	@ 0x21
 800155a:	727b      	strb	r3, [r7, #9]

	// Wysłanie komendy startu pomiaru do czujnika:
	HAL_StatusTypeDef status = HAL_I2C_Master_Transmit(i2c, SEN55_ADDRESS, cmd, sizeof(cmd), timeout);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	f8b3 10d6 	ldrh.w	r1, [r3, #214]	@ 0xd6
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	@ 0xc4
 800156e:	f107 0208 	add.w	r2, r7, #8
 8001572:	9300      	str	r3, [sp, #0]
 8001574:	2302      	movs	r3, #2
 8001576:	f004 f8f7 	bl	8005768 <HAL_I2C_Master_Transmit>
 800157a:	4603      	mov	r3, r0
 800157c:	737b      	strb	r3, [r7, #13]

	// Obsługa błedu wysłania komendy:
	if (status == HAL_OK) return true;
 800157e:	7b7b      	ldrb	r3, [r7, #13]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d101      	bne.n	8001588 <_ZN5SEN5516startMeasurementEv+0x40>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <_ZN5SEN5516startMeasurementEv+0x42>
	else return false;
 8001588:	2300      	movs	r3, #0
}
 800158a:	4618      	mov	r0, r3
 800158c:	3710      	adds	r7, #16
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
	...

08001594 <_ZN5SEN5521readMeasuremendValuesEv>:
	}

	return name;
}

SensorData SEN55::readMeasuremendValues(){
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b0bd      	sub	sp, #244	@ 0xf4
 8001598:	af02      	add	r7, sp, #8
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
    constexpr uint16_t readSensorValuesCmd = 0x03C4;
 800159e:	f44f 7371 	mov.w	r3, #964	@ 0x3c4
 80015a2:	f8a7 30e6 	strh.w	r3, [r7, #230]	@ 0xe6
    uint8_t cmd[2];
    uint8_t buffer[24];  // Bufor na 24 bajty danych

    // Podzielenie komendy na dwa bajty
    cmd[0] = readSensorValuesCmd >> 8;   		// Starszy bajt
 80015a6:	2303      	movs	r3, #3
 80015a8:	f887 3020 	strb.w	r3, [r7, #32]
    cmd[1] = readSensorValuesCmd & 0xFF; 		// Młodszy bajt (maskowanie w celu zachowania pozostałych danych komendy)
 80015ac:	23c4      	movs	r3, #196	@ 0xc4
 80015ae:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

    // Wysłanie komendy do czujnika:
    HAL_I2C_Master_Transmit(i2c, SEN55_ADDRESS, cmd, sizeof(cmd), timeout);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	f8b3 10d6 	ldrh.w	r1, [r3, #214]	@ 0xd6
 80015be:	683b      	ldr	r3, [r7, #0]
 80015c0:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	@ 0xc4
 80015c4:	f107 0220 	add.w	r2, r7, #32
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2302      	movs	r3, #2
 80015cc:	f004 f8cc 	bl	8005768 <HAL_I2C_Master_Transmit>

    // Opóźnienie zgodne z dokumentacją:
    HAL_Delay(20);
 80015d0:	2014      	movs	r0, #20
 80015d2:	f003 fb6f 	bl	8004cb4 <HAL_Delay>

    // Odczytaj dane (24 bajty) danych poamirowych:
    HAL_I2C_Master_Receive(i2c, SEN55_ADDRESS, buffer, sizeof(buffer), timeout);
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	f8d3 00c0 	ldr.w	r0, [r3, #192]	@ 0xc0
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	f8b3 10d6 	ldrh.w	r1, [r3, #214]	@ 0xd6
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	f8b3 30c4 	ldrh.w	r3, [r3, #196]	@ 0xc4
 80015e8:	f107 0208 	add.w	r2, r7, #8
 80015ec:	9300      	str	r3, [sp, #0]
 80015ee:	2318      	movs	r3, #24
 80015f0:	f004 f9d2 	bl	8005998 <HAL_I2C_Master_Receive>

    // Sprawdzenie sum kontrolnych dla każdego bloku danych:
	if (calculate_crc(&buffer[0], 2) != buffer[2]) {
 80015f4:	f107 0308 	add.w	r3, r7, #8
 80015f8:	2202      	movs	r2, #2
 80015fa:	4619      	mov	r1, r3
 80015fc:	6838      	ldr	r0, [r7, #0]
 80015fe:	f000 fa03 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 8001602:	4603      	mov	r3, r0
 8001604:	461a      	mov	r2, r3
 8001606:	7abb      	ldrb	r3, [r7, #10]
 8001608:	429a      	cmp	r2, r3
 800160a:	bf14      	ite	ne
 800160c:	2301      	movne	r3, #1
 800160e:	2300      	moveq	r3, #0
 8001610:	b2db      	uxtb	r3, r3
 8001612:	2b00      	cmp	r3, #0
 8001614:	d007      	beq.n	8001626 <_ZN5SEN5521readMeasuremendValuesEv+0x92>
		// Błąd CRC dla PM1.0
		return {};
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	461a      	mov	r2, r3
 800161a:	2300      	movs	r3, #0
 800161c:	6013      	str	r3, [r2, #0]
 800161e:	6053      	str	r3, [r2, #4]
 8001620:	6093      	str	r3, [r2, #8]
 8001622:	60d3      	str	r3, [r2, #12]
 8001624:	e1e7      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[3], 2) != buffer[5]) {
 8001626:	f107 0308 	add.w	r3, r7, #8
 800162a:	3303      	adds	r3, #3
 800162c:	2202      	movs	r2, #2
 800162e:	4619      	mov	r1, r3
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f000 f9e9 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	7b7b      	ldrb	r3, [r7, #13]
 800163c:	429a      	cmp	r2, r3
 800163e:	bf14      	ite	ne
 8001640:	2301      	movne	r3, #1
 8001642:	2300      	moveq	r3, #0
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d007      	beq.n	800165a <_ZN5SEN5521readMeasuremendValuesEv+0xc6>
		// Błąd CRC dla PM2.5
		return {};
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	461a      	mov	r2, r3
 800164e:	2300      	movs	r3, #0
 8001650:	6013      	str	r3, [r2, #0]
 8001652:	6053      	str	r3, [r2, #4]
 8001654:	6093      	str	r3, [r2, #8]
 8001656:	60d3      	str	r3, [r2, #12]
 8001658:	e1cd      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[6], 2) != buffer[8]) {
 800165a:	f107 0308 	add.w	r3, r7, #8
 800165e:	3306      	adds	r3, #6
 8001660:	2202      	movs	r2, #2
 8001662:	4619      	mov	r1, r3
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f000 f9cf 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 800166a:	4603      	mov	r3, r0
 800166c:	461a      	mov	r2, r3
 800166e:	7c3b      	ldrb	r3, [r7, #16]
 8001670:	429a      	cmp	r2, r3
 8001672:	bf14      	ite	ne
 8001674:	2301      	movne	r3, #1
 8001676:	2300      	moveq	r3, #0
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b00      	cmp	r3, #0
 800167c:	d007      	beq.n	800168e <_ZN5SEN5521readMeasuremendValuesEv+0xfa>
		// Błąd CRC dla PM4.0
		return {};
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	461a      	mov	r2, r3
 8001682:	2300      	movs	r3, #0
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	6053      	str	r3, [r2, #4]
 8001688:	6093      	str	r3, [r2, #8]
 800168a:	60d3      	str	r3, [r2, #12]
 800168c:	e1b3      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[9], 2) != buffer[11]) {
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	3309      	adds	r3, #9
 8001694:	2202      	movs	r2, #2
 8001696:	4619      	mov	r1, r3
 8001698:	6838      	ldr	r0, [r7, #0]
 800169a:	f000 f9b5 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	7cfb      	ldrb	r3, [r7, #19]
 80016a4:	429a      	cmp	r2, r3
 80016a6:	bf14      	ite	ne
 80016a8:	2301      	movne	r3, #1
 80016aa:	2300      	moveq	r3, #0
 80016ac:	b2db      	uxtb	r3, r3
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d007      	beq.n	80016c2 <_ZN5SEN5521readMeasuremendValuesEv+0x12e>
		// Błąd CRC dla PM10
		return {};
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	461a      	mov	r2, r3
 80016b6:	2300      	movs	r3, #0
 80016b8:	6013      	str	r3, [r2, #0]
 80016ba:	6053      	str	r3, [r2, #4]
 80016bc:	6093      	str	r3, [r2, #8]
 80016be:	60d3      	str	r3, [r2, #12]
 80016c0:	e199      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[12], 2) != buffer[14]) {
 80016c2:	f107 0308 	add.w	r3, r7, #8
 80016c6:	330c      	adds	r3, #12
 80016c8:	2202      	movs	r2, #2
 80016ca:	4619      	mov	r1, r3
 80016cc:	6838      	ldr	r0, [r7, #0]
 80016ce:	f000 f99b 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 80016d2:	4603      	mov	r3, r0
 80016d4:	461a      	mov	r2, r3
 80016d6:	7dbb      	ldrb	r3, [r7, #22]
 80016d8:	429a      	cmp	r2, r3
 80016da:	bf14      	ite	ne
 80016dc:	2301      	movne	r3, #1
 80016de:	2300      	moveq	r3, #0
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <_ZN5SEN5521readMeasuremendValuesEv+0x162>
		// Błąd CRC dla wilgotności
		return {};
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	461a      	mov	r2, r3
 80016ea:	2300      	movs	r3, #0
 80016ec:	6013      	str	r3, [r2, #0]
 80016ee:	6053      	str	r3, [r2, #4]
 80016f0:	6093      	str	r3, [r2, #8]
 80016f2:	60d3      	str	r3, [r2, #12]
 80016f4:	e17f      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[15], 2) != buffer[17]) {
 80016f6:	f107 0308 	add.w	r3, r7, #8
 80016fa:	330f      	adds	r3, #15
 80016fc:	2202      	movs	r2, #2
 80016fe:	4619      	mov	r1, r3
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f000 f981 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 8001706:	4603      	mov	r3, r0
 8001708:	461a      	mov	r2, r3
 800170a:	7e7b      	ldrb	r3, [r7, #25]
 800170c:	429a      	cmp	r2, r3
 800170e:	bf14      	ite	ne
 8001710:	2301      	movne	r3, #1
 8001712:	2300      	moveq	r3, #0
 8001714:	b2db      	uxtb	r3, r3
 8001716:	2b00      	cmp	r3, #0
 8001718:	d007      	beq.n	800172a <_ZN5SEN5521readMeasuremendValuesEv+0x196>
		// Błąd CRC dla temperatury
		return {};
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	461a      	mov	r2, r3
 800171e:	2300      	movs	r3, #0
 8001720:	6013      	str	r3, [r2, #0]
 8001722:	6053      	str	r3, [r2, #4]
 8001724:	6093      	str	r3, [r2, #8]
 8001726:	60d3      	str	r3, [r2, #12]
 8001728:	e165      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[18], 2) != buffer[20]) {
 800172a:	f107 0308 	add.w	r3, r7, #8
 800172e:	3312      	adds	r3, #18
 8001730:	2202      	movs	r2, #2
 8001732:	4619      	mov	r1, r3
 8001734:	6838      	ldr	r0, [r7, #0]
 8001736:	f000 f967 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 800173a:	4603      	mov	r3, r0
 800173c:	461a      	mov	r2, r3
 800173e:	7f3b      	ldrb	r3, [r7, #28]
 8001740:	429a      	cmp	r2, r3
 8001742:	bf14      	ite	ne
 8001744:	2301      	movne	r3, #1
 8001746:	2300      	moveq	r3, #0
 8001748:	b2db      	uxtb	r3, r3
 800174a:	2b00      	cmp	r3, #0
 800174c:	d007      	beq.n	800175e <_ZN5SEN5521readMeasuremendValuesEv+0x1ca>
		// Błąd CRC dla VOC
		return {};
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	461a      	mov	r2, r3
 8001752:	2300      	movs	r3, #0
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	6053      	str	r3, [r2, #4]
 8001758:	6093      	str	r3, [r2, #8]
 800175a:	60d3      	str	r3, [r2, #12]
 800175c:	e14b      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

	if (calculate_crc(&buffer[21], 2) != buffer[23]) {
 800175e:	f107 0308 	add.w	r3, r7, #8
 8001762:	3315      	adds	r3, #21
 8001764:	2202      	movs	r2, #2
 8001766:	4619      	mov	r1, r3
 8001768:	6838      	ldr	r0, [r7, #0]
 800176a:	f000 f94d 	bl	8001a08 <_ZN5SEN5513calculate_crcEPhh>
 800176e:	4603      	mov	r3, r0
 8001770:	461a      	mov	r2, r3
 8001772:	7ffb      	ldrb	r3, [r7, #31]
 8001774:	429a      	cmp	r2, r3
 8001776:	bf14      	ite	ne
 8001778:	2301      	movne	r3, #1
 800177a:	2300      	moveq	r3, #0
 800177c:	b2db      	uxtb	r3, r3
 800177e:	2b00      	cmp	r3, #0
 8001780:	d007      	beq.n	8001792 <_ZN5SEN5521readMeasuremendValuesEv+0x1fe>
		// Błąd CRC dla NOx
		return {};
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	461a      	mov	r2, r3
 8001786:	2300      	movs	r3, #0
 8001788:	6013      	str	r3, [r2, #0]
 800178a:	6053      	str	r3, [r2, #4]
 800178c:	6093      	str	r3, [r2, #8]
 800178e:	60d3      	str	r3, [r2, #12]
 8001790:	e131      	b.n	80019f6 <_ZN5SEN5521readMeasuremendValuesEv+0x462>
	}

    // Konwersja danych i zapis do struktury sensorData:
    sensorData.pm1_0 = ((buffer[0] << 8) | buffer[1]) / 10;						// PM 1.0
 8001792:	7a3b      	ldrb	r3, [r7, #8]
 8001794:	021b      	lsls	r3, r3, #8
 8001796:	7a7a      	ldrb	r2, [r7, #9]
 8001798:	4313      	orrs	r3, r2
 800179a:	4a99      	ldr	r2, [pc, #612]	@ (8001a00 <_ZN5SEN5521readMeasuremendValuesEv+0x46c>)
 800179c:	fb82 1203 	smull	r1, r2, r2, r3
 80017a0:	1092      	asrs	r2, r2, #2
 80017a2:	17db      	asrs	r3, r3, #31
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b29a      	uxth	r2, r3
 80017a8:	683b      	ldr	r3, [r7, #0]
 80017aa:	f8a3 20c6 	strh.w	r2, [r3, #198]	@ 0xc6
    sensorData.pm2_5 = ((buffer[3] << 8) | buffer[4]) / 10;						// PM 2.5
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	021b      	lsls	r3, r3, #8
 80017b2:	7b3a      	ldrb	r2, [r7, #12]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	4a92      	ldr	r2, [pc, #584]	@ (8001a00 <_ZN5SEN5521readMeasuremendValuesEv+0x46c>)
 80017b8:	fb82 1203 	smull	r1, r2, r2, r3
 80017bc:	1092      	asrs	r2, r2, #2
 80017be:	17db      	asrs	r3, r3, #31
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	b29a      	uxth	r2, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
    sensorData.pm4_0 = ((buffer[6] << 8) | buffer[7]) / 10;						// PM 4.0
 80017ca:	7bbb      	ldrb	r3, [r7, #14]
 80017cc:	021b      	lsls	r3, r3, #8
 80017ce:	7bfa      	ldrb	r2, [r7, #15]
 80017d0:	4313      	orrs	r3, r2
 80017d2:	4a8b      	ldr	r2, [pc, #556]	@ (8001a00 <_ZN5SEN5521readMeasuremendValuesEv+0x46c>)
 80017d4:	fb82 1203 	smull	r1, r2, r2, r3
 80017d8:	1092      	asrs	r2, r2, #2
 80017da:	17db      	asrs	r3, r3, #31
 80017dc:	1ad3      	subs	r3, r2, r3
 80017de:	b29a      	uxth	r2, r3
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	f8a3 20ca 	strh.w	r2, [r3, #202]	@ 0xca
    sensorData.pm10 = ((buffer[9] << 8) | buffer[10]) / 10;						// PM 10
 80017e6:	7c7b      	ldrb	r3, [r7, #17]
 80017e8:	021b      	lsls	r3, r3, #8
 80017ea:	7cba      	ldrb	r2, [r7, #18]
 80017ec:	4313      	orrs	r3, r2
 80017ee:	4a84      	ldr	r2, [pc, #528]	@ (8001a00 <_ZN5SEN5521readMeasuremendValuesEv+0x46c>)
 80017f0:	fb82 1203 	smull	r1, r2, r2, r3
 80017f4:	1092      	asrs	r2, r2, #2
 80017f6:	17db      	asrs	r3, r3, #31
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	f8a3 20cc 	strh.w	r2, [r3, #204]	@ 0xcc
    sensorData.humidity = ((buffer[12] << 8) | buffer[13]) / 100;  				// Wilgotność względna [%RH]
 8001802:	7d3b      	ldrb	r3, [r7, #20]
 8001804:	021b      	lsls	r3, r3, #8
 8001806:	7d7a      	ldrb	r2, [r7, #21]
 8001808:	4313      	orrs	r3, r2
 800180a:	4a7e      	ldr	r2, [pc, #504]	@ (8001a04 <_ZN5SEN5521readMeasuremendValuesEv+0x470>)
 800180c:	fb82 1203 	smull	r1, r2, r2, r3
 8001810:	1152      	asrs	r2, r2, #5
 8001812:	17db      	asrs	r3, r3, #31
 8001814:	1ad3      	subs	r3, r2, r3
 8001816:	b21a      	sxth	r2, r3
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	f8a3 20ce 	strh.w	r2, [r3, #206]	@ 0xce
    sensorData.temperature = ((buffer[15] << 8) | buffer[16]) / 200;  			// Temperatura [°C]
 800181e:	7dfb      	ldrb	r3, [r7, #23]
 8001820:	021b      	lsls	r3, r3, #8
 8001822:	7e3a      	ldrb	r2, [r7, #24]
 8001824:	4313      	orrs	r3, r2
 8001826:	4a77      	ldr	r2, [pc, #476]	@ (8001a04 <_ZN5SEN5521readMeasuremendValuesEv+0x470>)
 8001828:	fb82 1203 	smull	r1, r2, r2, r3
 800182c:	1192      	asrs	r2, r2, #6
 800182e:	17db      	asrs	r3, r3, #31
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	b21a      	sxth	r2, r3
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	f8a3 20d0 	strh.w	r2, [r3, #208]	@ 0xd0
    sensorData.vocIndex = ((buffer[18] << 8) | buffer[19]) / 10;  				// Wskaźnik VOC
 800183a:	7ebb      	ldrb	r3, [r7, #26]
 800183c:	021b      	lsls	r3, r3, #8
 800183e:	7efa      	ldrb	r2, [r7, #27]
 8001840:	4313      	orrs	r3, r2
 8001842:	4a6f      	ldr	r2, [pc, #444]	@ (8001a00 <_ZN5SEN5521readMeasuremendValuesEv+0x46c>)
 8001844:	fb82 1203 	smull	r1, r2, r2, r3
 8001848:	1092      	asrs	r2, r2, #2
 800184a:	17db      	asrs	r3, r3, #31
 800184c:	1ad3      	subs	r3, r2, r3
 800184e:	b29a      	uxth	r2, r3
 8001850:	683b      	ldr	r3, [r7, #0]
 8001852:	f8a3 20d2 	strh.w	r2, [r3, #210]	@ 0xd2
    sensorData.noxIndex = ((buffer[21] << 8) | buffer[22]) / 10;  				// Wskaźnik NOx
 8001856:	7f7b      	ldrb	r3, [r7, #29]
 8001858:	021b      	lsls	r3, r3, #8
 800185a:	7fba      	ldrb	r2, [r7, #30]
 800185c:	4313      	orrs	r3, r2
 800185e:	4a68      	ldr	r2, [pc, #416]	@ (8001a00 <_ZN5SEN5521readMeasuremendValuesEv+0x46c>)
 8001860:	fb82 1203 	smull	r1, r2, r2, r3
 8001864:	1092      	asrs	r2, r2, #2
 8001866:	17db      	asrs	r3, r3, #31
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	b29a      	uxth	r2, r3
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4

    // Konwersja danych do typu std::sting:
    sensor_string_data.pm1_0 = std::to_string(sensorData.pm1_0);
 8001872:	683b      	ldr	r3, [r7, #0]
 8001874:	f8b3 30c6 	ldrh.w	r3, [r3, #198]	@ 0xc6
 8001878:	461a      	mov	r2, r3
 800187a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800187e:	4611      	mov	r1, r2
 8001880:	4618      	mov	r0, r3
 8001882:	f7ff fddc 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800188c:	4611      	mov	r1, r2
 800188e:	4618      	mov	r0, r3
 8001890:	f008 ff85 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 8001894:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001898:	4618      	mov	r0, r3
 800189a:	f008 ff7a 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.pm2_5 = std::to_string(sensorData.pm2_5);
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	f8b3 30c8 	ldrh.w	r3, [r3, #200]	@ 0xc8
 80018a4:	461a      	mov	r2, r3
 80018a6:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018aa:	4611      	mov	r1, r2
 80018ac:	4618      	mov	r0, r3
 80018ae:	f7ff fdc6 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	3318      	adds	r3, #24
 80018b6:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80018ba:	4611      	mov	r1, r2
 80018bc:	4618      	mov	r0, r3
 80018be:	f008 ff6e 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018c2:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80018c6:	4618      	mov	r0, r3
 80018c8:	f008 ff63 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.pm4_0 = std::to_string(sensorData.pm4_0);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	f8b3 30ca 	ldrh.w	r3, [r3, #202]	@ 0xca
 80018d2:	461a      	mov	r2, r3
 80018d4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018d8:	4611      	mov	r1, r2
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff fdaf 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	3330      	adds	r3, #48	@ 0x30
 80018e4:	f107 0254 	add.w	r2, r7, #84	@ 0x54
 80018e8:	4611      	mov	r1, r2
 80018ea:	4618      	mov	r0, r3
 80018ec:	f008 ff57 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80018f0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80018f4:	4618      	mov	r0, r3
 80018f6:	f008 ff4c 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.pm10 = std::to_string(sensorData.pm10);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	f8b3 30cc 	ldrh.w	r3, [r3, #204]	@ 0xcc
 8001900:	461a      	mov	r2, r3
 8001902:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001906:	4611      	mov	r1, r2
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fd98 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	3348      	adds	r3, #72	@ 0x48
 8001912:	f107 026c 	add.w	r2, r7, #108	@ 0x6c
 8001916:	4611      	mov	r1, r2
 8001918:	4618      	mov	r0, r3
 800191a:	f008 ff40 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800191e:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001922:	4618      	mov	r0, r3
 8001924:	f008 ff35 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.humidity = std::to_string(sensorData.humidity);
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	f9b3 30ce 	ldrsh.w	r3, [r3, #206]	@ 0xce
 800192e:	461a      	mov	r2, r3
 8001930:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001934:	4611      	mov	r1, r2
 8001936:	4618      	mov	r0, r3
 8001938:	f7ff fd81 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	3360      	adds	r3, #96	@ 0x60
 8001940:	f107 0284 	add.w	r2, r7, #132	@ 0x84
 8001944:	4611      	mov	r1, r2
 8001946:	4618      	mov	r0, r3
 8001948:	f008 ff29 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800194c:	f107 0384 	add.w	r3, r7, #132	@ 0x84
 8001950:	4618      	mov	r0, r3
 8001952:	f008 ff1e 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.temperature = std::to_string(sensorData.temperature);
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	f9b3 30d0 	ldrsh.w	r3, [r3, #208]	@ 0xd0
 800195c:	461a      	mov	r2, r3
 800195e:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8001962:	4611      	mov	r1, r2
 8001964:	4618      	mov	r0, r3
 8001966:	f7ff fd6a 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	3378      	adds	r3, #120	@ 0x78
 800196e:	f107 029c 	add.w	r2, r7, #156	@ 0x9c
 8001972:	4611      	mov	r1, r2
 8001974:	4618      	mov	r0, r3
 8001976:	f008 ff12 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 800197a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 800197e:	4618      	mov	r0, r3
 8001980:	f008 ff07 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.vocIndex = std::to_string(sensorData.vocIndex);
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	f8b3 30d2 	ldrh.w	r3, [r3, #210]	@ 0xd2
 800198a:	461a      	mov	r2, r3
 800198c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001990:	4611      	mov	r1, r2
 8001992:	4618      	mov	r0, r3
 8001994:	f7ff fd53 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	3390      	adds	r3, #144	@ 0x90
 800199c:	f107 02b4 	add.w	r2, r7, #180	@ 0xb4
 80019a0:	4611      	mov	r1, r2
 80019a2:	4618      	mov	r0, r3
 80019a4:	f008 fefb 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80019a8:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 80019ac:	4618      	mov	r0, r3
 80019ae:	f008 fef0 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
    sensor_string_data.noxIndex = std::to_string(sensorData.noxIndex);
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	f8b3 30d4 	ldrh.w	r3, [r3, #212]	@ 0xd4
 80019b8:	461a      	mov	r2, r3
 80019ba:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019be:	4611      	mov	r1, r2
 80019c0:	4618      	mov	r0, r3
 80019c2:	f7ff fd3c 	bl	800143e <_ZNSt7__cxx119to_stringEi>
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	33a8      	adds	r3, #168	@ 0xa8
 80019ca:	f107 02cc 	add.w	r2, r7, #204	@ 0xcc
 80019ce:	4611      	mov	r1, r2
 80019d0:	4618      	mov	r0, r3
 80019d2:	f008 fee4 	bl	800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>
 80019d6:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 80019da:	4618      	mov	r0, r3
 80019dc:	f008 fed9 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>

    return sensorData;
 80019e0:	687a      	ldr	r2, [r7, #4]
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	33c6      	adds	r3, #198	@ 0xc6
 80019e6:	681c      	ldr	r4, [r3, #0]
 80019e8:	6858      	ldr	r0, [r3, #4]
 80019ea:	6899      	ldr	r1, [r3, #8]
 80019ec:	68db      	ldr	r3, [r3, #12]
 80019ee:	6014      	str	r4, [r2, #0]
 80019f0:	6050      	str	r0, [r2, #4]
 80019f2:	6091      	str	r1, [r2, #8]
 80019f4:	60d3      	str	r3, [r2, #12]
}
 80019f6:	6878      	ldr	r0, [r7, #4]
 80019f8:	37ec      	adds	r7, #236	@ 0xec
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd90      	pop	{r4, r7, pc}
 80019fe:	bf00      	nop
 8001a00:	66666667 	.word	0x66666667
 8001a04:	51eb851f 	.word	0x51eb851f

08001a08 <_ZN5SEN5513calculate_crcEPhh>:

uint8_t SEN55::calculate_crc(uint8_t *data, uint8_t len){
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	4613      	mov	r3, r2
 8001a14:	71fb      	strb	r3, [r7, #7]
    uint8_t crc = 0xFF;
 8001a16:	23ff      	movs	r3, #255	@ 0xff
 8001a18:	75fb      	strb	r3, [r7, #23]
    for (uint8_t i = 0; i < len; i++) {
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	75bb      	strb	r3, [r7, #22]
 8001a1e:	e021      	b.n	8001a64 <_ZN5SEN5513calculate_crcEPhh+0x5c>
        crc ^= data[i];
 8001a20:	7dbb      	ldrb	r3, [r7, #22]
 8001a22:	68ba      	ldr	r2, [r7, #8]
 8001a24:	4413      	add	r3, r2
 8001a26:	781a      	ldrb	r2, [r3, #0]
 8001a28:	7dfb      	ldrb	r3, [r7, #23]
 8001a2a:	4053      	eors	r3, r2
 8001a2c:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	757b      	strb	r3, [r7, #21]
 8001a32:	e011      	b.n	8001a58 <_ZN5SEN5513calculate_crcEPhh+0x50>
            if (crc & 0x80) {
 8001a34:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	da07      	bge.n	8001a4c <_ZN5SEN5513calculate_crcEPhh+0x44>
                crc = (crc << 1) ^ 0x31;
 8001a3c:	7dfb      	ldrb	r3, [r7, #23]
 8001a3e:	005b      	lsls	r3, r3, #1
 8001a40:	b25b      	sxtb	r3, r3
 8001a42:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	75fb      	strb	r3, [r7, #23]
 8001a4a:	e002      	b.n	8001a52 <_ZN5SEN5513calculate_crcEPhh+0x4a>
            } else {
                crc <<= 1;
 8001a4c:	7dfb      	ldrb	r3, [r7, #23]
 8001a4e:	005b      	lsls	r3, r3, #1
 8001a50:	75fb      	strb	r3, [r7, #23]
        for (uint8_t j = 0; j < 8; j++) {
 8001a52:	7d7b      	ldrb	r3, [r7, #21]
 8001a54:	3301      	adds	r3, #1
 8001a56:	757b      	strb	r3, [r7, #21]
 8001a58:	7d7b      	ldrb	r3, [r7, #21]
 8001a5a:	2b07      	cmp	r3, #7
 8001a5c:	d9ea      	bls.n	8001a34 <_ZN5SEN5513calculate_crcEPhh+0x2c>
    for (uint8_t i = 0; i < len; i++) {
 8001a5e:	7dbb      	ldrb	r3, [r7, #22]
 8001a60:	3301      	adds	r3, #1
 8001a62:	75bb      	strb	r3, [r7, #22]
 8001a64:	7dba      	ldrb	r2, [r7, #22]
 8001a66:	79fb      	ldrb	r3, [r7, #7]
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d3d9      	bcc.n	8001a20 <_ZN5SEN5513calculate_crcEPhh+0x18>
            }
        }
    }
    return crc;
 8001a6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a6e:	4618      	mov	r0, r3
 8001a70:	371c      	adds	r7, #28
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr

08001a7a <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc>:
    char_traits<_CharT>::
 8001a7a:	b580      	push	{r7, lr}
 8001a7c:	b084      	sub	sp, #16
 8001a7e:	af00      	add	r7, sp, #0
 8001a80:	6078      	str	r0, [r7, #4]
      std::size_t __i = 0;
 8001a82:	2300      	movs	r3, #0
 8001a84:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8001a86:	e002      	b.n	8001a8e <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0x14>
        ++__i;
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	60fb      	str	r3, [r7, #12]
      while (!eq(__p[__i], char_type()))
 8001a8e:	687a      	ldr	r2, [r7, #4]
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4413      	add	r3, r2
 8001a94:	2200      	movs	r2, #0
 8001a96:	72fa      	strb	r2, [r7, #11]
 8001a98:	f107 020b 	add.w	r2, r7, #11
 8001a9c:	4611      	mov	r1, r2
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f000 f8e8 	bl	8001c74 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	f083 0301 	eor.w	r3, r3, #1
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1eb      	bne.n	8001a88 <_ZN9__gnu_cxx11char_traitsIcE6lengthEPKc+0xe>
      return __i;
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    }
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3710      	adds	r7, #16
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_ZNSt8__detail14__to_chars_lenIjEEjT_i>:
namespace __detail
{
  // Generic implementation for arbitrary bases.
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR unsigned
    __to_chars_len(_Tp __value, int __base = 10) noexcept
 8001aba:	b480      	push	{r7}
 8001abc:	b087      	sub	sp, #28
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	6039      	str	r1, [r7, #0]
    {
      static_assert(is_integral<_Tp>::value, "implementation bug");
      static_assert(is_unsigned<_Tp>::value, "implementation bug");

      unsigned __n = 1;
 8001ac4:	2301      	movs	r3, #1
 8001ac6:	617b      	str	r3, [r7, #20]
      const unsigned __b2 = __base  * __base;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	fb03 f303 	mul.w	r3, r3, r3
 8001ace:	613b      	str	r3, [r7, #16]
      const unsigned __b3 = __b2 * __base;
 8001ad0:	683a      	ldr	r2, [r7, #0]
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	fb02 f303 	mul.w	r3, r2, r3
 8001ad8:	60fb      	str	r3, [r7, #12]
      const unsigned long __b4 = __b3 * __base;
 8001ada:	683a      	ldr	r2, [r7, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	fb02 f303 	mul.w	r3, r2, r3
 8001ae2:	60bb      	str	r3, [r7, #8]
      for (;;)
	{
	  if (__value < (unsigned)__base) return __n;
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	687a      	ldr	r2, [r7, #4]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d201      	bcs.n	8001af0 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x36>
 8001aec:	697b      	ldr	r3, [r7, #20]
 8001aee:	e01d      	b.n	8001b2c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b2) return __n + 1;
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	429a      	cmp	r2, r3
 8001af6:	d202      	bcs.n	8001afe <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x44>
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	3301      	adds	r3, #1
 8001afc:	e016      	b.n	8001b2c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b3) return __n + 2;
 8001afe:	687a      	ldr	r2, [r7, #4]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	429a      	cmp	r2, r3
 8001b04:	d202      	bcs.n	8001b0c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x52>
 8001b06:	697b      	ldr	r3, [r7, #20]
 8001b08:	3302      	adds	r3, #2
 8001b0a:	e00f      	b.n	8001b2c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  if (__value < __b4) return __n + 3;
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	68bb      	ldr	r3, [r7, #8]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d202      	bcs.n	8001b1a <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x60>
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	3303      	adds	r3, #3
 8001b18:	e008      	b.n	8001b2c <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x72>
	  __value /= __b4;
 8001b1a:	687a      	ldr	r2, [r7, #4]
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b22:	607b      	str	r3, [r7, #4]
	  __n += 4;
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	3304      	adds	r3, #4
 8001b28:	617b      	str	r3, [r7, #20]
	  if (__value < (unsigned)__base) return __n;
 8001b2a:	e7db      	b.n	8001ae4 <_ZNSt8__detail14__to_chars_lenIjEEjT_i+0x2a>
	}
    }
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	371c      	adds	r7, #28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEjcRKS3_>:
      basic_string(size_type __n, _CharT __c, const _Alloc& __a = _Alloc())
 8001b38:	b590      	push	{r4, r7, lr}
 8001b3a:	b085      	sub	sp, #20
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	603b      	str	r3, [r7, #0]
 8001b44:	4613      	mov	r3, r2
 8001b46:	71fb      	strb	r3, [r7, #7]
      : _M_dataplus(_M_local_data(), __a)
 8001b48:	68fc      	ldr	r4, [r7, #12]
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	f008 fd49 	bl	800a5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001b50:	4603      	mov	r3, r0
 8001b52:	683a      	ldr	r2, [r7, #0]
 8001b54:	4619      	mov	r1, r3
 8001b56:	4620      	mov	r0, r4
 8001b58:	f008 ffa7 	bl	800aaaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
      { _M_construct(__n, __c); }
 8001b5c:	79fb      	ldrb	r3, [r7, #7]
 8001b5e:	461a      	mov	r2, r3
 8001b60:	68b9      	ldr	r1, [r7, #8]
 8001b62:	68f8      	ldr	r0, [r7, #12]
 8001b64:	f008 fdc9 	bl	800a6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	3714      	adds	r7, #20
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd90      	pop	{r4, r7, pc}
	...

08001b74 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_>:
  // Write an unsigned integer value to the range [first,first+len).
  // The caller is required to provide a buffer of exactly the right size
  // (which can be determined by the __to_chars_len function).
  template<typename _Tp>
    void
    __to_chars_10_impl(char* __first, unsigned __len, _Tp __val) noexcept
 8001b74:	b480      	push	{r7}
 8001b76:	b089      	sub	sp, #36	@ 0x24
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
	"0001020304050607080910111213141516171819"
	"2021222324252627282930313233343536373839"
	"4041424344454647484950515253545556575859"
	"6061626364656667686970717273747576777879"
	"8081828384858687888990919293949596979899";
      unsigned __pos = __len - 1;
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	3b01      	subs	r3, #1
 8001b84:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001b86:	e024      	b.n	8001bd2 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x5e>
	{
	  auto const __num = (__val % 100) * 2;
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	4b23      	ldr	r3, [pc, #140]	@ (8001c18 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001b8c:	fba3 1302 	umull	r1, r3, r3, r2
 8001b90:	095b      	lsrs	r3, r3, #5
 8001b92:	2164      	movs	r1, #100	@ 0x64
 8001b94:	fb01 f303 	mul.w	r3, r1, r3
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	005b      	lsls	r3, r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
	  __val /= 100;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c18 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa4>)
 8001ba2:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba6:	095b      	lsrs	r3, r3, #5
 8001ba8:	607b      	str	r3, [r7, #4]
	  __first[__pos] = __digits[__num + 1];
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	1c5a      	adds	r2, r3, #1
 8001bae:	68f9      	ldr	r1, [r7, #12]
 8001bb0:	69fb      	ldr	r3, [r7, #28]
 8001bb2:	440b      	add	r3, r1
 8001bb4:	4919      	ldr	r1, [pc, #100]	@ (8001c1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001bb6:	5c8a      	ldrb	r2, [r1, r2]
 8001bb8:	701a      	strb	r2, [r3, #0]
	  __first[__pos - 1] = __digits[__num];
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	3b01      	subs	r3, #1
 8001bbe:	68fa      	ldr	r2, [r7, #12]
 8001bc0:	4413      	add	r3, r2
 8001bc2:	4916      	ldr	r1, [pc, #88]	@ (8001c1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001bc4:	697a      	ldr	r2, [r7, #20]
 8001bc6:	440a      	add	r2, r1
 8001bc8:	7812      	ldrb	r2, [r2, #0]
 8001bca:	701a      	strb	r2, [r3, #0]
	  __pos -= 2;
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	3b02      	subs	r3, #2
 8001bd0:	61fb      	str	r3, [r7, #28]
      while (__val >= 100)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b63      	cmp	r3, #99	@ 0x63
 8001bd6:	d8d7      	bhi.n	8001b88 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x14>
	}
      if (__val >= 10)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2b09      	cmp	r3, #9
 8001bdc:	d910      	bls.n	8001c00 <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x8c>
	{
	  auto const __num = __val * 2;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	005b      	lsls	r3, r3, #1
 8001be2:	61bb      	str	r3, [r7, #24]
	  __first[1] = __digits[__num + 1];
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	1c5a      	adds	r2, r3, #1
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	3301      	adds	r3, #1
 8001bec:	490b      	ldr	r1, [pc, #44]	@ (8001c1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001bee:	5c8a      	ldrb	r2, [r1, r2]
 8001bf0:	701a      	strb	r2, [r3, #0]
	  __first[0] = __digits[__num];
 8001bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8001c1c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0xa8>)
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	4413      	add	r3, r2
 8001bf8:	781a      	ldrb	r2, [r3, #0]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	701a      	strb	r2, [r3, #0]
	}
      else
	__first[0] = '0' + __val;
    }
 8001bfe:	e005      	b.n	8001c0c <_ZNSt8__detail18__to_chars_10_implIjEEvPcjT_+0x98>
	__first[0] = '0' + __val;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	3330      	adds	r3, #48	@ 0x30
 8001c06:	b2da      	uxtb	r2, r3
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	701a      	strb	r2, [r3, #0]
    }
 8001c0c:	bf00      	nop
 8001c0e:	3724      	adds	r7, #36	@ 0x24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	51eb851f 	.word	0x51eb851f
 8001c1c:	0800da78 	.word	0x0800da78

08001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>:
      basic_string(const _CharT* __s, const _Alloc& __a = _Alloc())
 8001c20:	b5b0      	push	{r4, r5, r7, lr}
 8001c22:	b086      	sub	sp, #24
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	60f8      	str	r0, [r7, #12]
 8001c28:	60b9      	str	r1, [r7, #8]
 8001c2a:	607a      	str	r2, [r7, #4]
      : _M_dataplus(_M_local_data(), __a)
 8001c2c:	68fc      	ldr	r4, [r7, #12]
 8001c2e:	68f8      	ldr	r0, [r7, #12]
 8001c30:	f008 fcd7 	bl	800a5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001c34:	4603      	mov	r3, r0
 8001c36:	687a      	ldr	r2, [r7, #4]
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4620      	mov	r0, r4
 8001c3c:	f008 ff35 	bl	800aaaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>
	if (__s == 0)
 8001c40:	68bb      	ldr	r3, [r7, #8]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d102      	bne.n	8001c4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x2c>
	  std::__throw_logic_error(__N("basic_string: "
 8001c46:	480a      	ldr	r0, [pc, #40]	@ (8001c70 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_+0x50>)
 8001c48:	f008 fcb9 	bl	800a5be <_ZSt19__throw_logic_errorPKc>
	const _CharT* __end = __s + traits_type::length(__s);
 8001c4c:	68b8      	ldr	r0, [r7, #8]
 8001c4e:	f7ff fbdf 	bl	8001410 <_ZNSt11char_traitsIcE6lengthEPKc>
 8001c52:	4602      	mov	r2, r0
 8001c54:	68bb      	ldr	r3, [r7, #8]
 8001c56:	4413      	add	r3, r2
 8001c58:	617b      	str	r3, [r7, #20]
	_M_construct(__s, __end, forward_iterator_tag());
 8001c5a:	462b      	mov	r3, r5
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	68b9      	ldr	r1, [r7, #8]
 8001c60:	68f8      	ldr	r0, [r7, #12]
 8001c62:	f000 f83c 	bl	8001cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
      }
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	3718      	adds	r7, #24
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001c70:	0800d874 	.word	0x0800d874

08001c74 <_ZN9__gnu_cxx11char_traitsIcE2eqERKcS3_>:
      eq(const char_type& __c1, const char_type& __c2)
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
      { return __c1 == __c2; }
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	781a      	ldrb	r2, [r3, #0]
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	781b      	ldrb	r3, [r3, #0]
 8001c86:	429a      	cmp	r2, r3
 8001c88:	bf0c      	ite	eq
 8001c8a:	2301      	moveq	r3, #1
 8001c8c:	2300      	movne	r3, #0
 8001c8e:	b2db      	uxtb	r3, r3
 8001c90:	4618      	mov	r0, r3
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>:

	// Check for out_of_range and length_error exceptions.
	struct _Guard
	{
	  _GLIBCXX20_CONSTEXPR
	  explicit _Guard(basic_string* __s) : _M_guarded(__s) { }
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
 8001ca4:	6039      	str	r1, [r7, #0]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	683a      	ldr	r2, [r7, #0]
 8001caa:	601a      	str	r2, [r3, #0]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4618      	mov	r0, r3
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb8:	4770      	bx	lr

08001cba <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>:

	  _GLIBCXX20_CONSTEXPR
	  ~_Guard() { if (_M_guarded) _M_guarded->_M_dispose(); }
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b082      	sub	sp, #8
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d004      	beq.n	8001cd4 <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev+0x1a>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f008 fcb8 	bl	800a644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	3708      	adds	r7, #8
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}

08001cde <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
      basic_string<_CharT, _Traits, _Alloc>::
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	b088      	sub	sp, #32
 8001ce2:	af00      	add	r7, sp, #0
 8001ce4:	60f8      	str	r0, [r7, #12]
 8001ce6:	60b9      	str	r1, [r7, #8]
 8001ce8:	607a      	str	r2, [r7, #4]
 8001cea:	703b      	strb	r3, [r7, #0]
	size_type __dnew = static_cast<size_type>(std::distance(__beg, __end));
 8001cec:	6879      	ldr	r1, [r7, #4]
 8001cee:	68b8      	ldr	r0, [r7, #8]
 8001cf0:	f000 f83b 	bl	8001d6a <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	61bb      	str	r3, [r7, #24]
	if (__dnew > size_type(_S_local_capacity))
 8001cf8:	69bb      	ldr	r3, [r7, #24]
 8001cfa:	2b0f      	cmp	r3, #15
 8001cfc:	d911      	bls.n	8001d22 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>
	    _M_data(_M_create(__dnew, size_type(0)));
 8001cfe:	f107 0318 	add.w	r3, r7, #24
 8001d02:	2200      	movs	r2, #0
 8001d04:	4619      	mov	r1, r3
 8001d06:	68f8      	ldr	r0, [r7, #12]
 8001d08:	f008 fc7a 	bl	800a600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	4619      	mov	r1, r3
 8001d10:	68f8      	ldr	r0, [r7, #12]
 8001d12:	f008 fc62 	bl	800a5da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>
	    _M_capacity(__dnew);
 8001d16:	69bb      	ldr	r3, [r7, #24]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	68f8      	ldr	r0, [r7, #12]
 8001d1c:	f008 fc63 	bl	800a5e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>
 8001d20:	e005      	b.n	8001d2e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x50>
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	61fb      	str	r3, [r7, #28]
	return _M_local_data();
 8001d26:	69f8      	ldr	r0, [r7, #28]
 8001d28:	f008 fc5b 	bl	800a5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>
 8001d2c:	bf00      	nop

	  basic_string* _M_guarded;
	} __guard(this);
 8001d2e:	f107 0314 	add.w	r3, r7, #20
 8001d32:	68f9      	ldr	r1, [r7, #12]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f7ff ffb1 	bl	8001c9c <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardC1EPS4_>

	this->_S_copy_chars(_M_data(), __beg, __end);
 8001d3a:	68f8      	ldr	r0, [r7, #12]
 8001d3c:	f008 fc4f 	bl	800a5de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>
 8001d40:	4603      	mov	r3, r0
 8001d42:	687a      	ldr	r2, [r7, #4]
 8001d44:	68b9      	ldr	r1, [r7, #8]
 8001d46:	4618      	mov	r0, r3
 8001d48:	f008 fcf1 	bl	800a72e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>

	__guard._M_guarded = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	617b      	str	r3, [r7, #20]

	_M_set_length(__dnew);
 8001d50:	69bb      	ldr	r3, [r7, #24]
 8001d52:	4619      	mov	r1, r3
 8001d54:	68f8      	ldr	r0, [r7, #12]
 8001d56:	f008 fc48 	bl	800a5ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>
      }
 8001d5a:	f107 0314 	add.w	r3, r7, #20
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ffab 	bl	8001cba <_ZZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tagEN6_GuardD1Ev>
 8001d64:	3720      	adds	r7, #32
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_ZSt8distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_>:
  */
  template<typename _InputIterator>
    _GLIBCXX_NODISCARD
    inline _GLIBCXX17_CONSTEXPR
    typename iterator_traits<_InputIterator>::difference_type
    distance(_InputIterator __first, _InputIterator __last)
 8001d6a:	b5b0      	push	{r4, r5, r7, lr}
 8001d6c:	b082      	sub	sp, #8
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
 8001d72:	6039      	str	r1, [r7, #0]
    {
      // concept requirements -- taken care of in __distance
      return std::__distance(__first, __last,
 8001d74:	687c      	ldr	r4, [r7, #4]
			     std::__iterator_category(__first));
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f000 f80a 	bl	8001d92 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>
      return std::__distance(__first, __last,
 8001d7e:	462a      	mov	r2, r5
 8001d80:	6839      	ldr	r1, [r7, #0]
 8001d82:	4620      	mov	r0, r4
 8001d84:	f000 f80f 	bl	8001da6 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>
 8001d88:	4603      	mov	r3, r0
    }
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3708      	adds	r7, #8
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bdb0      	pop	{r4, r5, r7, pc}

08001d92 <_ZSt19__iterator_categoryIPKcENSt15iterator_traitsIT_E17iterator_categoryERKS3_>:
   *  sugar for internal library use only.
  */
  template<typename _Iter>
    inline _GLIBCXX_CONSTEXPR
    typename iterator_traits<_Iter>::iterator_category
    __iterator_category(const _Iter&)
 8001d92:	b480      	push	{r7}
 8001d94:	b083      	sub	sp, #12
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
    { return typename iterator_traits<_Iter>::iterator_category(); }
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <_ZSt10__distanceIPKcENSt15iterator_traitsIT_E15difference_typeES3_S3_St26random_access_iterator_tag>:
    __distance(_RandomAccessIterator __first, _RandomAccessIterator __last,
 8001da6:	b480      	push	{r7}
 8001da8:	b085      	sub	sp, #20
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	60f8      	str	r0, [r7, #12]
 8001dae:	60b9      	str	r1, [r7, #8]
 8001db0:	713a      	strb	r2, [r7, #4]
      return __last - __first;
 8001db2:	68ba      	ldr	r2, [r7, #8]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	1ad3      	subs	r3, r2, r3
    }
 8001db8:	4618      	mov	r0, r3
 8001dba:	3714      	adds	r7, #20
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <_ZN6BME280C1EP19__I2C_HandleTypeDeft>:
 *      Author: Mateusz Kowalczyk
 */

#include "bme280.hpp"

BME280::BME280(I2C_HandleTypeDef* _hi2c, uint16_t _timeout)
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	4613      	mov	r3, r2
 8001dd0:	80fb      	strh	r3, [r7, #6]
: i2c(_hi2c), timeout(_timeout), t_fine(0)
 8001dd2:	68fb      	ldr	r3, [r7, #12]
 8001dd4:	68ba      	ldr	r2, [r7, #8]
 8001dd6:	601a      	str	r2, [r3, #0]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	88fa      	ldrh	r2, [r7, #6]
 8001ddc:	809a      	strh	r2, [r3, #4]
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	2200      	movs	r2, #0
 8001de2:	609a      	str	r2, [r3, #8]
{}
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	4618      	mov	r0, r3
 8001de8:	3714      	adds	r7, #20
 8001dea:	46bd      	mov	sp, r7
 8001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df0:	4770      	bx	lr

08001df2 <_ZN6BME2804initEv>:
	} else {
	    return result = "ERROR";
	}
}

void BME280::init() {
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b08e      	sub	sp, #56	@ 0x38
 8001df6:	af04      	add	r7, sp, #16
 8001df8:	6078      	str	r0, [r7, #4]
	// Temperature and Pressure:
    uint8_t calib[24];
    HAL_I2C_Mem_Read(i2c, 0x76 << 1, 0x88, 1, calib, 24, timeout);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6818      	ldr	r0, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	889b      	ldrh	r3, [r3, #4]
 8001e02:	9302      	str	r3, [sp, #8]
 8001e04:	2318      	movs	r3, #24
 8001e06:	9301      	str	r3, [sp, #4]
 8001e08:	f107 0310 	add.w	r3, r7, #16
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2301      	movs	r3, #1
 8001e10:	2288      	movs	r2, #136	@ 0x88
 8001e12:	21ec      	movs	r1, #236	@ 0xec
 8001e14:	f003 ffca 	bl	8005dac <HAL_I2C_Mem_Read>

    // Parsing calibration data (temp, pressure):
    dig_T1 = static_cast<uint16_t>((calib[1] << 8) | calib[0]);
 8001e18:	7c7b      	ldrb	r3, [r7, #17]
 8001e1a:	021b      	lsls	r3, r3, #8
 8001e1c:	b21a      	sxth	r2, r3
 8001e1e:	7c3b      	ldrb	r3, [r7, #16]
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	b29a      	uxth	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	819a      	strh	r2, [r3, #12]
    dig_T2 = static_cast<int16_t>((calib[3] << 8) | calib[2]);
 8001e2c:	7cfb      	ldrb	r3, [r7, #19]
 8001e2e:	021b      	lsls	r3, r3, #8
 8001e30:	b21a      	sxth	r2, r3
 8001e32:	7cbb      	ldrb	r3, [r7, #18]
 8001e34:	b21b      	sxth	r3, r3
 8001e36:	4313      	orrs	r3, r2
 8001e38:	b21a      	sxth	r2, r3
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	81da      	strh	r2, [r3, #14]
    dig_T3 = static_cast<int16_t>((calib[5] << 8) | calib[4]);
 8001e3e:	7d7b      	ldrb	r3, [r7, #21]
 8001e40:	021b      	lsls	r3, r3, #8
 8001e42:	b21a      	sxth	r2, r3
 8001e44:	7d3b      	ldrb	r3, [r7, #20]
 8001e46:	b21b      	sxth	r3, r3
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	b21a      	sxth	r2, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	821a      	strh	r2, [r3, #16]

    dig_P1 = static_cast<uint16_t>((calib[7] << 8) | calib[6]);
 8001e50:	7dfb      	ldrb	r3, [r7, #23]
 8001e52:	021b      	lsls	r3, r3, #8
 8001e54:	b21a      	sxth	r2, r3
 8001e56:	7dbb      	ldrb	r3, [r7, #22]
 8001e58:	b21b      	sxth	r3, r3
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	b21b      	sxth	r3, r3
 8001e5e:	b29a      	uxth	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	83da      	strh	r2, [r3, #30]
    dig_P2 = static_cast<int16_t>((calib[9] << 8) | calib[8]);
 8001e64:	7e7b      	ldrb	r3, [r7, #25]
 8001e66:	021b      	lsls	r3, r3, #8
 8001e68:	b21a      	sxth	r2, r3
 8001e6a:	7e3b      	ldrb	r3, [r7, #24]
 8001e6c:	b21b      	sxth	r3, r3
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	b21a      	sxth	r2, r3
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	841a      	strh	r2, [r3, #32]
    dig_P3 = static_cast<int16_t>((calib[11] << 8) | calib[10]);
 8001e76:	7efb      	ldrb	r3, [r7, #27]
 8001e78:	021b      	lsls	r3, r3, #8
 8001e7a:	b21a      	sxth	r2, r3
 8001e7c:	7ebb      	ldrb	r3, [r7, #26]
 8001e7e:	b21b      	sxth	r3, r3
 8001e80:	4313      	orrs	r3, r2
 8001e82:	b21a      	sxth	r2, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	845a      	strh	r2, [r3, #34]	@ 0x22
    dig_P4 = static_cast<int16_t>((calib[13] << 8) | calib[12]);
 8001e88:	7f7b      	ldrb	r3, [r7, #29]
 8001e8a:	021b      	lsls	r3, r3, #8
 8001e8c:	b21a      	sxth	r2, r3
 8001e8e:	7f3b      	ldrb	r3, [r7, #28]
 8001e90:	b21b      	sxth	r3, r3
 8001e92:	4313      	orrs	r3, r2
 8001e94:	b21a      	sxth	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	849a      	strh	r2, [r3, #36]	@ 0x24
    dig_P5 = static_cast<int16_t>((calib[15] << 8) | calib[14]);
 8001e9a:	7ffb      	ldrb	r3, [r7, #31]
 8001e9c:	021b      	lsls	r3, r3, #8
 8001e9e:	b21a      	sxth	r2, r3
 8001ea0:	7fbb      	ldrb	r3, [r7, #30]
 8001ea2:	b21b      	sxth	r3, r3
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	b21a      	sxth	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	84da      	strh	r2, [r3, #38]	@ 0x26
    dig_P6 = static_cast<int16_t>((calib[17] << 8) | calib[16]);
 8001eac:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001eb0:	021b      	lsls	r3, r3, #8
 8001eb2:	b21a      	sxth	r2, r3
 8001eb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb8:	b21b      	sxth	r3, r3
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	b21a      	sxth	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
    dig_P7 = static_cast<int16_t>((calib[19] << 8) | calib[18]);
 8001ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001ec6:	021b      	lsls	r3, r3, #8
 8001ec8:	b21a      	sxth	r2, r3
 8001eca:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001ece:	b21b      	sxth	r3, r3
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	b21a      	sxth	r2, r3
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    dig_P8 = static_cast<int16_t>((calib[21] << 8) | calib[20]);
 8001ed8:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001ee4:	b21b      	sxth	r3, r3
 8001ee6:	4313      	orrs	r3, r2
 8001ee8:	b21a      	sxth	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	859a      	strh	r2, [r3, #44]	@ 0x2c
    dig_P9 = static_cast<int16_t>((calib[23] << 8) | calib[22]);
 8001eee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ef2:	021b      	lsls	r3, r3, #8
 8001ef4:	b21a      	sxth	r2, r3
 8001ef6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001efa:	b21b      	sxth	r3, r3
 8001efc:	4313      	orrs	r3, r2
 8001efe:	b21a      	sxth	r2, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	85da      	strh	r2, [r3, #46]	@ 0x2e

    // Humidity:
    uint8_t calib_h[7];
    HAL_I2C_Mem_Read(i2c, 0x76 << 1, 0xA1, 1, &calib_h[0], 1, timeout);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	6818      	ldr	r0, [r3, #0]
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	889b      	ldrh	r3, [r3, #4]
 8001f0c:	9302      	str	r3, [sp, #8]
 8001f0e:	2301      	movs	r3, #1
 8001f10:	9301      	str	r3, [sp, #4]
 8001f12:	f107 0308 	add.w	r3, r7, #8
 8001f16:	9300      	str	r3, [sp, #0]
 8001f18:	2301      	movs	r3, #1
 8001f1a:	22a1      	movs	r2, #161	@ 0xa1
 8001f1c:	21ec      	movs	r1, #236	@ 0xec
 8001f1e:	f003 ff45 	bl	8005dac <HAL_I2C_Mem_Read>
    HAL_I2C_Mem_Read(i2c, 0x76 << 1, 0xE1, 1, &calib_h[1], 7, timeout);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6818      	ldr	r0, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	889b      	ldrh	r3, [r3, #4]
 8001f2a:	9302      	str	r3, [sp, #8]
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	9301      	str	r3, [sp, #4]
 8001f30:	f107 0308 	add.w	r3, r7, #8
 8001f34:	3301      	adds	r3, #1
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	2301      	movs	r3, #1
 8001f3a:	22e1      	movs	r2, #225	@ 0xe1
 8001f3c:	21ec      	movs	r1, #236	@ 0xec
 8001f3e:	f003 ff35 	bl	8005dac <HAL_I2C_Mem_Read>

    dig_H1 = static_cast<int8_t>(calib_h[0]); // sdcs
 8001f42:	7a3b      	ldrb	r3, [r7, #8]
 8001f44:	b25a      	sxtb	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	749a      	strb	r2, [r3, #18]
    dig_H2 = static_cast<int16_t>((calib_h[2] << 8) | calib_h[1]);
 8001f4a:	7abb      	ldrb	r3, [r7, #10]
 8001f4c:	021b      	lsls	r3, r3, #8
 8001f4e:	b21a      	sxth	r2, r3
 8001f50:	7a7b      	ldrb	r3, [r7, #9]
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	4313      	orrs	r3, r2
 8001f56:	b21a      	sxth	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	829a      	strh	r2, [r3, #20]
    dig_H3 = static_cast<int8_t>(calib_h[3]);// dcs
 8001f5c:	7afb      	ldrb	r3, [r7, #11]
 8001f5e:	b25a      	sxtb	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	759a      	strb	r2, [r3, #22]
    dig_H4 = static_cast<int16_t>((calib_h[4] << 4) | (calib_h[5] & 0x0F));
 8001f64:	7b3b      	ldrb	r3, [r7, #12]
 8001f66:	011b      	lsls	r3, r3, #4
 8001f68:	b21a      	sxth	r2, r3
 8001f6a:	7b7b      	ldrb	r3, [r7, #13]
 8001f6c:	b21b      	sxth	r3, r3
 8001f6e:	f003 030f 	and.w	r3, r3, #15
 8001f72:	b21b      	sxth	r3, r3
 8001f74:	4313      	orrs	r3, r2
 8001f76:	b21a      	sxth	r2, r3
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	831a      	strh	r2, [r3, #24]
    dig_H5 = static_cast<int16_t>((calib_h[6] << 4) | (calib_h[5] >> 4));
 8001f7c:	7bbb      	ldrb	r3, [r7, #14]
 8001f7e:	011b      	lsls	r3, r3, #4
 8001f80:	b21a      	sxth	r2, r3
 8001f82:	7b7b      	ldrb	r3, [r7, #13]
 8001f84:	091b      	lsrs	r3, r3, #4
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	b21b      	sxth	r3, r3
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	b21a      	sxth	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	835a      	strh	r2, [r3, #26]
    dig_H6 = static_cast<int8_t>(calib_h[7]);
 8001f92:	7bfb      	ldrb	r3, [r7, #15]
 8001f94:	b25a      	sxtb	r2, r3
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	771a      	strb	r2, [r3, #28]
}
 8001f9a:	bf00      	nop
 8001f9c:	3728      	adds	r7, #40	@ 0x28
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}

08001fa2 <_ZN6BME28013setNormalModeEv>:
    	result = "error";;
    }
    return result;
}

void BME280::setNormalMode(){
 8001fa2:	b580      	push	{r7, lr}
 8001fa4:	b088      	sub	sp, #32
 8001fa6:	af04      	add	r7, sp, #16
 8001fa8:	6078      	str	r0, [r7, #4]
    uint8_t ctrl_meas_reg = (1 << 5) | (1 << 2) | 3;
 8001faa:	2327      	movs	r3, #39	@ 0x27
 8001fac:	73fb      	strb	r3, [r7, #15]
    uint8_t config_reg = (5 << 5); // t_standby = 1000 ms, IIR filter off
 8001fae:	23a0      	movs	r3, #160	@ 0xa0
 8001fb0:	73bb      	strb	r3, [r7, #14]

    HAL_I2C_Mem_Write(i2c, 0x76 << 1, 0xF4, 1, &ctrl_meas_reg, 1, timeout);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6818      	ldr	r0, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	889b      	ldrh	r3, [r3, #4]
 8001fba:	9302      	str	r3, [sp, #8]
 8001fbc:	2301      	movs	r3, #1
 8001fbe:	9301      	str	r3, [sp, #4]
 8001fc0:	f107 030f 	add.w	r3, r7, #15
 8001fc4:	9300      	str	r3, [sp, #0]
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	22f4      	movs	r2, #244	@ 0xf4
 8001fca:	21ec      	movs	r1, #236	@ 0xec
 8001fcc:	f003 fdda 	bl	8005b84 <HAL_I2C_Mem_Write>
    HAL_I2C_Mem_Write(i2c, 0x76 << 1, 0xF5, 1, &config_reg, 1, timeout);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	889b      	ldrh	r3, [r3, #4]
 8001fd8:	9302      	str	r3, [sp, #8]
 8001fda:	2301      	movs	r3, #1
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	f107 030e 	add.w	r3, r7, #14
 8001fe2:	9300      	str	r3, [sp, #0]
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	22f5      	movs	r2, #245	@ 0xf5
 8001fe8:	21ec      	movs	r1, #236	@ 0xec
 8001fea:	f003 fdcb 	bl	8005b84 <HAL_I2C_Mem_Write>
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <_ZN6BME2807getTempEv>:
	uint8_t ctrl_meas_reg;
	ctrl_meas_reg = (1 << 5) | (1 <<2) | (1);
	HAL_I2C_Mem_Write(i2c, 0x76 << 1, 0xF4, 1, &ctrl_meas_reg, 1, timeout);
}

double BME280::getTemp(){
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08e      	sub	sp, #56	@ 0x38
 8001ffc:	af04      	add	r7, sp, #16
 8001ffe:	6078      	str	r0, [r7, #4]
    int32_t adc_T;
    int32_t var1, var2;
    int32_t temp;
//    int32_t t_fine;

    HAL_I2C_Mem_Read(i2c, 0x76 << 1, 0xFA, 1, static_cast<uint8_t*>(buffer), 3, timeout);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	889b      	ldrh	r3, [r3, #4]
 8002008:	9302      	str	r3, [sp, #8]
 800200a:	2303      	movs	r3, #3
 800200c:	9301      	str	r3, [sp, #4]
 800200e:	f107 030c 	add.w	r3, r7, #12
 8002012:	9300      	str	r3, [sp, #0]
 8002014:	2301      	movs	r3, #1
 8002016:	22fa      	movs	r2, #250	@ 0xfa
 8002018:	21ec      	movs	r1, #236	@ 0xec
 800201a:	f003 fec7 	bl	8005dac <HAL_I2C_Mem_Read>

    // Change result to 12-bit value:
    adc_T = static_cast<int32_t>(
    		(static_cast<uint32_t>(buffer[0]) << 12) |
 800201e:	7b3b      	ldrb	r3, [r7, #12]
 8002020:	031a      	lsls	r2, r3, #12
			(static_cast<uint32_t>(buffer[1]) << 4) |
 8002022:	7b7b      	ldrb	r3, [r7, #13]
 8002024:	011b      	lsls	r3, r3, #4
    		(static_cast<uint32_t>(buffer[0]) << 12) |
 8002026:	4313      	orrs	r3, r2
			(static_cast<uint32_t>(buffer[2]) >> 4));
 8002028:	7bba      	ldrb	r2, [r7, #14]
 800202a:	0912      	lsrs	r2, r2, #4
 800202c:	b2d2      	uxtb	r2, r2
			(static_cast<uint32_t>(buffer[1]) << 4) |
 800202e:	4313      	orrs	r3, r2
    adc_T = static_cast<int32_t>(
 8002030:	627b      	str	r3, [r7, #36]	@ 0x24

    // Calculating temperature:
    var1 = static_cast<int32_t>((adc_T >> 3) - (static_cast<int32_t>(dig_T1) << 1));
 8002032:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002034:	10da      	asrs	r2, r3, #3
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	899b      	ldrh	r3, [r3, #12]
 800203a:	005b      	lsls	r3, r3, #1
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	623b      	str	r3, [r7, #32]
    var1 = (var1 * static_cast<int32_t>(dig_T2)) >> 11;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002046:	461a      	mov	r2, r3
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	fb02 f303 	mul.w	r3, r2, r3
 800204e:	12db      	asrs	r3, r3, #11
 8002050:	623b      	str	r3, [r7, #32]

    var2 = static_cast<int32_t>(((adc_T >> 4) - static_cast<int32_t>(dig_T1)) *
 8002052:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002054:	111b      	asrs	r3, r3, #4
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	8992      	ldrh	r2, [r2, #12]
 800205a:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - static_cast<int32_t>(dig_T1)) >> 12);
 800205c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800205e:	1112      	asrs	r2, r2, #4
 8002060:	6879      	ldr	r1, [r7, #4]
 8002062:	8989      	ldrh	r1, [r1, #12]
 8002064:	1a52      	subs	r2, r2, r1
    var2 = static_cast<int32_t>(((adc_T >> 4) - static_cast<int32_t>(dig_T1)) *
 8002066:	fb02 f303 	mul.w	r3, r2, r3
 800206a:	131b      	asrs	r3, r3, #12
 800206c:	61fb      	str	r3, [r7, #28]
    var2 = (var2 * static_cast<int32_t>(dig_T3)) >> 14;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002074:	461a      	mov	r2, r3
 8002076:	69fb      	ldr	r3, [r7, #28]
 8002078:	fb02 f303 	mul.w	r3, r2, r3
 800207c:	139b      	asrs	r3, r3, #14
 800207e:	61fb      	str	r3, [r7, #28]

    // Converting into celsius degrees:
    t_fine = var1 + var2;
 8002080:	6a3a      	ldr	r2, [r7, #32]
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	441a      	add	r2, r3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	609a      	str	r2, [r3, #8]
    temp = (t_fine * 5 + 128) >> 8;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	689a      	ldr	r2, [r3, #8]
 800208e:	4613      	mov	r3, r2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	4413      	add	r3, r2
 8002094:	3380      	adds	r3, #128	@ 0x80
 8002096:	121b      	asrs	r3, r3, #8
 8002098:	61bb      	str	r3, [r7, #24]
    double temperature = temp / 100.0;
 800209a:	69b8      	ldr	r0, [r7, #24]
 800209c:	f7fe fa42 	bl	8000524 <__aeabi_i2d>
 80020a0:	f04f 0200 	mov.w	r2, #0
 80020a4:	4b0b      	ldr	r3, [pc, #44]	@ (80020d4 <_ZN6BME2807getTempEv+0xdc>)
 80020a6:	f7fe fbd1 	bl	800084c <__aeabi_ddiv>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	e9c7 2304 	strd	r2, r3, [r7, #16]

    return roundDouble(temperature);
 80020b2:	ed97 0b04 	vldr	d0, [r7, #16]
 80020b6:	6878      	ldr	r0, [r7, #4]
 80020b8:	f000 fb00 	bl	80026bc <_ZN6BME28011roundDoubleEd>
 80020bc:	eeb0 7a40 	vmov.f32	s14, s0
 80020c0:	eef0 7a60 	vmov.f32	s15, s1
}
 80020c4:	eeb0 0a47 	vmov.f32	s0, s14
 80020c8:	eef0 0a67 	vmov.f32	s1, s15
 80020cc:	3728      	adds	r7, #40	@ 0x28
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}
 80020d2:	bf00      	nop
 80020d4:	40590000 	.word	0x40590000

080020d8 <_ZN6BME28014getAtmPressureEv>:
    double humidity = (v_x1_u32r >> 12) / 1024.0;

    return roundDouble(humidity);
}

double BME280::getAtmPressure() {
 80020d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80020dc:	b0d4      	sub	sp, #336	@ 0x150
 80020de:	af04      	add	r7, sp, #16
 80020e0:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
	getTemp();
 80020e4:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 80020e8:	f7ff ff86 	bl	8001ff8 <_ZN6BME2807getTempEv>
    uint8_t buffer[3];
    int32_t adc_P;

    HAL_I2C_Mem_Read(i2c, 0x76 << 1, 0xF7, 1, buffer, 3, timeout);
 80020ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80020f6:	889b      	ldrh	r3, [r3, #4]
 80020f8:	9302      	str	r3, [sp, #8]
 80020fa:	2303      	movs	r3, #3
 80020fc:	9301      	str	r3, [sp, #4]
 80020fe:	f507 738a 	add.w	r3, r7, #276	@ 0x114
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	2301      	movs	r3, #1
 8002106:	22f7      	movs	r2, #247	@ 0xf7
 8002108:	21ec      	movs	r1, #236	@ 0xec
 800210a:	f003 fe4f 	bl	8005dac <HAL_I2C_Mem_Read>

    // Compilation of pressure data:
    adc_P = (static_cast<int32_t>(buffer[0]) << 12) | (static_cast<int32_t>(buffer[1]) << 4) | (buffer[2] >> 4);
 800210e:	f897 3114 	ldrb.w	r3, [r7, #276]	@ 0x114
 8002112:	031a      	lsls	r2, r3, #12
 8002114:	f897 3115 	ldrb.w	r3, [r7, #277]	@ 0x115
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	431a      	orrs	r2, r3
 800211c:	f897 3116 	ldrb.w	r3, [r7, #278]	@ 0x116
 8002120:	091b      	lsrs	r3, r3, #4
 8002122:	b2db      	uxtb	r3, r3
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c

    // Pressure conversion using calibration data:
    int64_t var1, var2, p;
    var1 = ((int64_t)t_fine) - 128000;
 800212a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800212e:	689b      	ldr	r3, [r3, #8]
 8002130:	17da      	asrs	r2, r3, #31
 8002132:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002136:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800213a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800213e:	460b      	mov	r3, r1
 8002140:	f5b3 33fa 	subs.w	r3, r3, #128000	@ 0x1f400
 8002144:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002146:	4613      	mov	r3, r2
 8002148:	f143 33ff 	adc.w	r3, r3, #4294967295
 800214c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800214e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002152:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    var2 = var1 * var1 * (int64_t)dig_P6;
 8002156:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800215a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800215e:	fb03 f102 	mul.w	r1, r3, r2
 8002162:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002166:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800216a:	fb02 f303 	mul.w	r3, r2, r3
 800216e:	18ca      	adds	r2, r1, r3
 8002170:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002174:	fba3 4503 	umull	r4, r5, r3, r3
 8002178:	1953      	adds	r3, r2, r5
 800217a:	461d      	mov	r5, r3
 800217c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002180:	f9b3 3028 	ldrsh.w	r3, [r3, #40]	@ 0x28
 8002184:	b21b      	sxth	r3, r3
 8002186:	17da      	asrs	r2, r3, #31
 8002188:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800218c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002190:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	@ 0xc0
 8002194:	4603      	mov	r3, r0
 8002196:	fb03 f205 	mul.w	r2, r3, r5
 800219a:	460b      	mov	r3, r1
 800219c:	fb04 f303 	mul.w	r3, r4, r3
 80021a0:	4413      	add	r3, r2
 80021a2:	4602      	mov	r2, r0
 80021a4:	fba4 8902 	umull	r8, r9, r4, r2
 80021a8:	444b      	add	r3, r9
 80021aa:	4699      	mov	r9, r3
 80021ac:	e9c7 894a 	strd	r8, r9, [r7, #296]	@ 0x128
 80021b0:	e9c7 894a 	strd	r8, r9, [r7, #296]	@ 0x128
    var2 = var2 + ((var1 * (int64_t)dig_P5) << 17);
 80021b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80021b8:	f9b3 3026 	ldrsh.w	r3, [r3, #38]	@ 0x26
 80021bc:	b21b      	sxth	r3, r3
 80021be:	17da      	asrs	r2, r3, #31
 80021c0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80021c4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80021c8:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021cc:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 80021d0:	462a      	mov	r2, r5
 80021d2:	fb02 f203 	mul.w	r2, r2, r3
 80021d6:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 80021da:	4621      	mov	r1, r4
 80021dc:	fb01 f303 	mul.w	r3, r1, r3
 80021e0:	441a      	add	r2, r3
 80021e2:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 80021e6:	4621      	mov	r1, r4
 80021e8:	fba3 ab01 	umull	sl, fp, r3, r1
 80021ec:	eb02 030b 	add.w	r3, r2, fp
 80021f0:	469b      	mov	fp, r3
 80021f2:	f04f 0000 	mov.w	r0, #0
 80021f6:	f04f 0100 	mov.w	r1, #0
 80021fa:	ea4f 414b 	mov.w	r1, fp, lsl #17
 80021fe:	ea41 31da 	orr.w	r1, r1, sl, lsr #15
 8002202:	ea4f 404a 	mov.w	r0, sl, lsl #17
 8002206:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 800220a:	1814      	adds	r4, r2, r0
 800220c:	643c      	str	r4, [r7, #64]	@ 0x40
 800220e:	414b      	adcs	r3, r1
 8002210:	647b      	str	r3, [r7, #68]	@ 0x44
 8002212:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8002216:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    var2 = var2 + (((int64_t)dig_P4) << 35);
 800221a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800221e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8002222:	b21b      	sxth	r3, r3
 8002224:	17da      	asrs	r2, r3, #31
 8002226:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800222a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800222e:	f04f 0000 	mov.w	r0, #0
 8002232:	f04f 0100 	mov.w	r1, #0
 8002236:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800223a:	00d9      	lsls	r1, r3, #3
 800223c:	2000      	movs	r0, #0
 800223e:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002242:	1814      	adds	r4, r2, r0
 8002244:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002246:	414b      	adcs	r3, r1
 8002248:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800224a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 800224e:	e9c7 344a 	strd	r3, r4, [r7, #296]	@ 0x128
    var1 = ((var1 * var1 * (int64_t)dig_P3) >> 8) + ((var1 * (int64_t)dig_P2) << 12);
 8002252:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002256:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800225a:	fb03 f102 	mul.w	r1, r3, r2
 800225e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8002262:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002266:	fb02 f303 	mul.w	r3, r2, r3
 800226a:	18ca      	adds	r2, r1, r3
 800226c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002270:	fba3 1303 	umull	r1, r3, r3, r3
 8002274:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002278:	460b      	mov	r3, r1
 800227a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800227e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002282:	18d3      	adds	r3, r2, r3
 8002284:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8002288:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800228c:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8002290:	b21b      	sxth	r3, r3
 8002292:	17da      	asrs	r2, r3, #31
 8002294:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002298:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800229c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80022a0:	462b      	mov	r3, r5
 80022a2:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	@ 0xa8
 80022a6:	4642      	mov	r2, r8
 80022a8:	fb02 f203 	mul.w	r2, r2, r3
 80022ac:	464b      	mov	r3, r9
 80022ae:	4621      	mov	r1, r4
 80022b0:	fb01 f303 	mul.w	r3, r1, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	4622      	mov	r2, r4
 80022b8:	4641      	mov	r1, r8
 80022ba:	fba2 1201 	umull	r1, r2, r2, r1
 80022be:	f8c7 20fc 	str.w	r2, [r7, #252]	@ 0xfc
 80022c2:	460a      	mov	r2, r1
 80022c4:	f8c7 20f8 	str.w	r2, [r7, #248]	@ 0xf8
 80022c8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	@ 0xfc
 80022cc:	4413      	add	r3, r2
 80022ce:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80022d2:	f04f 0000 	mov.w	r0, #0
 80022d6:	f04f 0100 	mov.w	r1, #0
 80022da:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80022de:	4623      	mov	r3, r4
 80022e0:	0a18      	lsrs	r0, r3, #8
 80022e2:	462b      	mov	r3, r5
 80022e4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80022e8:	462b      	mov	r3, r5
 80022ea:	1219      	asrs	r1, r3, #8
 80022ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80022f0:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 80022f4:	b21b      	sxth	r3, r3
 80022f6:	17da      	asrs	r2, r3, #31
 80022f8:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80022fc:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002300:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8002304:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002308:	464a      	mov	r2, r9
 800230a:	fb02 f203 	mul.w	r2, r2, r3
 800230e:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002312:	4644      	mov	r4, r8
 8002314:	fb04 f303 	mul.w	r3, r4, r3
 8002318:	441a      	add	r2, r3
 800231a:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800231e:	4644      	mov	r4, r8
 8002320:	fba3 4304 	umull	r4, r3, r3, r4
 8002324:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002328:	4623      	mov	r3, r4
 800232a:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800232e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002332:	18d3      	adds	r3, r2, r3
 8002334:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	e9d7 893c 	ldrd	r8, r9, [r7, #240]	@ 0xf0
 8002344:	464c      	mov	r4, r9
 8002346:	0323      	lsls	r3, r4, #12
 8002348:	4644      	mov	r4, r8
 800234a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 800234e:	4644      	mov	r4, r8
 8002350:	0322      	lsls	r2, r4, #12
 8002352:	1884      	adds	r4, r0, r2
 8002354:	633c      	str	r4, [r7, #48]	@ 0x30
 8002356:	eb41 0303 	adc.w	r3, r1, r3
 800235a:	637b      	str	r3, [r7, #52]	@ 0x34
 800235c:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002360:	e9c7 344c 	strd	r3, r4, [r7, #304]	@ 0x130
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)dig_P1) >> 33;
 8002364:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 8002368:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 800236c:	f8c7 109c 	str.w	r1, [r7, #156]	@ 0x9c
 8002370:	f8c7 2098 	str.w	r2, [r7, #152]	@ 0x98
 8002374:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002378:	8bdb      	ldrh	r3, [r3, #30]
 800237a:	b29b      	uxth	r3, r3
 800237c:	2200      	movs	r2, #0
 800237e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002382:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002386:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	@ 0x98
 800238a:	462b      	mov	r3, r5
 800238c:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002390:	4642      	mov	r2, r8
 8002392:	fb02 f203 	mul.w	r2, r2, r3
 8002396:	464b      	mov	r3, r9
 8002398:	4621      	mov	r1, r4
 800239a:	fb01 f303 	mul.w	r3, r1, r3
 800239e:	4413      	add	r3, r2
 80023a0:	4622      	mov	r2, r4
 80023a2:	4641      	mov	r1, r8
 80023a4:	fba2 1201 	umull	r1, r2, r2, r1
 80023a8:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80023ac:	460a      	mov	r2, r1
 80023ae:	f8c7 20e8 	str.w	r2, [r7, #232]	@ 0xe8
 80023b2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 80023b6:	4413      	add	r3, r2
 80023b8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80023bc:	f04f 0200 	mov.w	r2, #0
 80023c0:	f04f 0300 	mov.w	r3, #0
 80023c4:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80023c8:	4629      	mov	r1, r5
 80023ca:	104a      	asrs	r2, r1, #1
 80023cc:	4629      	mov	r1, r5
 80023ce:	17cb      	asrs	r3, r1, #31
 80023d0:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130

//    if (var1 == 0) {
//        return 0;
//    }
    p = 1048576 - adc_P;
 80023d4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80023d8:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 80023dc:	17da      	asrs	r2, r3, #31
 80023de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80023e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80023e2:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 80023e6:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    p = (((p << 31) - var2) * 3125) / var1;
 80023ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023ee:	105b      	asrs	r3, r3, #1
 80023f0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80023f4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80023f8:	07db      	lsls	r3, r3, #31
 80023fa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80023fe:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 8002402:	e9d7 4522 	ldrd	r4, r5, [r7, #136]	@ 0x88
 8002406:	4621      	mov	r1, r4
 8002408:	1a89      	subs	r1, r1, r2
 800240a:	f8c7 1080 	str.w	r1, [r7, #128]	@ 0x80
 800240e:	4629      	mov	r1, r5
 8002410:	eb61 0303 	sbc.w	r3, r1, r3
 8002414:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002418:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800241c:	4622      	mov	r2, r4
 800241e:	462b      	mov	r3, r5
 8002420:	1891      	adds	r1, r2, r2
 8002422:	6239      	str	r1, [r7, #32]
 8002424:	415b      	adcs	r3, r3
 8002426:	627b      	str	r3, [r7, #36]	@ 0x24
 8002428:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800242c:	4621      	mov	r1, r4
 800242e:	1851      	adds	r1, r2, r1
 8002430:	61b9      	str	r1, [r7, #24]
 8002432:	4629      	mov	r1, r5
 8002434:	414b      	adcs	r3, r1
 8002436:	61fb      	str	r3, [r7, #28]
 8002438:	f04f 0200 	mov.w	r2, #0
 800243c:	f04f 0300 	mov.w	r3, #0
 8002440:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002444:	4649      	mov	r1, r9
 8002446:	018b      	lsls	r3, r1, #6
 8002448:	4641      	mov	r1, r8
 800244a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800244e:	4641      	mov	r1, r8
 8002450:	018a      	lsls	r2, r1, #6
 8002452:	4641      	mov	r1, r8
 8002454:	1889      	adds	r1, r1, r2
 8002456:	6139      	str	r1, [r7, #16]
 8002458:	4649      	mov	r1, r9
 800245a:	eb43 0101 	adc.w	r1, r3, r1
 800245e:	6179      	str	r1, [r7, #20]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800246c:	4649      	mov	r1, r9
 800246e:	008b      	lsls	r3, r1, #2
 8002470:	4641      	mov	r1, r8
 8002472:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002476:	4641      	mov	r1, r8
 8002478:	008a      	lsls	r2, r1, #2
 800247a:	4610      	mov	r0, r2
 800247c:	4619      	mov	r1, r3
 800247e:	4603      	mov	r3, r0
 8002480:	4622      	mov	r2, r4
 8002482:	189b      	adds	r3, r3, r2
 8002484:	60bb      	str	r3, [r7, #8]
 8002486:	460b      	mov	r3, r1
 8002488:	462a      	mov	r2, r5
 800248a:	eb42 0303 	adc.w	r3, r2, r3
 800248e:	60fb      	str	r3, [r7, #12]
 8002490:	f04f 0200 	mov.w	r2, #0
 8002494:	f04f 0300 	mov.w	r3, #0
 8002498:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800249c:	4649      	mov	r1, r9
 800249e:	008b      	lsls	r3, r1, #2
 80024a0:	4641      	mov	r1, r8
 80024a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80024a6:	4641      	mov	r1, r8
 80024a8:	008a      	lsls	r2, r1, #2
 80024aa:	4610      	mov	r0, r2
 80024ac:	4619      	mov	r1, r3
 80024ae:	4603      	mov	r3, r0
 80024b0:	4622      	mov	r2, r4
 80024b2:	189b      	adds	r3, r3, r2
 80024b4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80024b6:	462b      	mov	r3, r5
 80024b8:	460a      	mov	r2, r1
 80024ba:	eb42 0303 	adc.w	r3, r2, r3
 80024be:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80024c0:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80024c4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 80024c8:	f7fe fb8e 	bl	8000be8 <__aeabi_ldivmod>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var1 = (((int64_t)dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 80024d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80024d8:	f9b3 302e 	ldrsh.w	r3, [r3, #46]	@ 0x2e
 80024dc:	b21b      	sxth	r3, r3
 80024de:	17da      	asrs	r2, r3, #31
 80024e0:	673b      	str	r3, [r7, #112]	@ 0x70
 80024e2:	677a      	str	r2, [r7, #116]	@ 0x74
 80024e4:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80024e8:	f04f 0000 	mov.w	r0, #0
 80024ec:	f04f 0100 	mov.w	r1, #0
 80024f0:	0b50      	lsrs	r0, r2, #13
 80024f2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80024f6:	1359      	asrs	r1, r3, #13
 80024f8:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 80024fc:	462b      	mov	r3, r5
 80024fe:	fb00 f203 	mul.w	r2, r0, r3
 8002502:	4623      	mov	r3, r4
 8002504:	fb03 f301 	mul.w	r3, r3, r1
 8002508:	4413      	add	r3, r2
 800250a:	4622      	mov	r2, r4
 800250c:	fba2 1200 	umull	r1, r2, r2, r0
 8002510:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002514:	460a      	mov	r2, r1
 8002516:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800251a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800251e:	4413      	add	r3, r2
 8002520:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002524:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8002528:	f04f 0000 	mov.w	r0, #0
 800252c:	f04f 0100 	mov.w	r1, #0
 8002530:	0b50      	lsrs	r0, r2, #13
 8002532:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002536:	1359      	asrs	r1, r3, #13
 8002538:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 800253c:	462b      	mov	r3, r5
 800253e:	fb00 f203 	mul.w	r2, r0, r3
 8002542:	4623      	mov	r3, r4
 8002544:	fb03 f301 	mul.w	r3, r3, r1
 8002548:	4413      	add	r3, r2
 800254a:	4622      	mov	r2, r4
 800254c:	fba2 1200 	umull	r1, r2, r2, r0
 8002550:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002554:	460a      	mov	r2, r1
 8002556:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800255a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 800255e:	4413      	add	r3, r2
 8002560:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002564:	f04f 0200 	mov.w	r2, #0
 8002568:	f04f 0300 	mov.w	r3, #0
 800256c:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8002570:	4621      	mov	r1, r4
 8002572:	0e4a      	lsrs	r2, r1, #25
 8002574:	4629      	mov	r1, r5
 8002576:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800257a:	4629      	mov	r1, r5
 800257c:	164b      	asrs	r3, r1, #25
 800257e:	e9c7 234c 	strd	r2, r3, [r7, #304]	@ 0x130
    var2 = (((int64_t)dig_P8) * p) >> 19;
 8002582:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002586:	f9b3 302c 	ldrsh.w	r3, [r3, #44]	@ 0x2c
 800258a:	b21b      	sxth	r3, r3
 800258c:	17da      	asrs	r2, r3, #31
 800258e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002590:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002592:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8002596:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800259a:	462a      	mov	r2, r5
 800259c:	fb02 f203 	mul.w	r2, r2, r3
 80025a0:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80025a4:	4621      	mov	r1, r4
 80025a6:	fb01 f303 	mul.w	r3, r1, r3
 80025aa:	4413      	add	r3, r2
 80025ac:	f8d7 2120 	ldr.w	r2, [r7, #288]	@ 0x120
 80025b0:	4621      	mov	r1, r4
 80025b2:	fba2 1201 	umull	r1, r2, r2, r1
 80025b6:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80025ba:	460a      	mov	r2, r1
 80025bc:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80025c0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80025c4:	4413      	add	r3, r2
 80025c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80025d6:	4621      	mov	r1, r4
 80025d8:	0cca      	lsrs	r2, r1, #19
 80025da:	4629      	mov	r1, r5
 80025dc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 80025e0:	4629      	mov	r1, r5
 80025e2:	14cb      	asrs	r3, r1, #19
 80025e4:	e9c7 234a 	strd	r2, r3, [r7, #296]	@ 0x128
    p = ((p + var1 + var2) >> 8) + (((int64_t)dig_P7) << 4);
 80025e8:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 80025ec:	e9d7 234c 	ldrd	r2, r3, [r7, #304]	@ 0x130
 80025f0:	1884      	adds	r4, r0, r2
 80025f2:	663c      	str	r4, [r7, #96]	@ 0x60
 80025f4:	eb41 0303 	adc.w	r3, r1, r3
 80025f8:	667b      	str	r3, [r7, #100]	@ 0x64
 80025fa:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	@ 0x128
 80025fe:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002602:	4621      	mov	r1, r4
 8002604:	1889      	adds	r1, r1, r2
 8002606:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002608:	4629      	mov	r1, r5
 800260a:	eb43 0101 	adc.w	r1, r3, r1
 800260e:	65f9      	str	r1, [r7, #92]	@ 0x5c
 8002610:	f04f 0000 	mov.w	r0, #0
 8002614:	f04f 0100 	mov.w	r1, #0
 8002618:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 800261c:	4623      	mov	r3, r4
 800261e:	0a18      	lsrs	r0, r3, #8
 8002620:	462b      	mov	r3, r5
 8002622:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002626:	462b      	mov	r3, r5
 8002628:	1219      	asrs	r1, r3, #8
 800262a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800262e:	f9b3 302a 	ldrsh.w	r3, [r3, #42]	@ 0x2a
 8002632:	b21b      	sxth	r3, r3
 8002634:	17da      	asrs	r2, r3, #31
 8002636:	653b      	str	r3, [r7, #80]	@ 0x50
 8002638:	657a      	str	r2, [r7, #84]	@ 0x54
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	f04f 0300 	mov.w	r3, #0
 8002642:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002646:	464c      	mov	r4, r9
 8002648:	0123      	lsls	r3, r4, #4
 800264a:	4644      	mov	r4, r8
 800264c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8002650:	4644      	mov	r4, r8
 8002652:	0122      	lsls	r2, r4, #4
 8002654:	1884      	adds	r4, r0, r2
 8002656:	603c      	str	r4, [r7, #0]
 8002658:	eb41 0303 	adc.w	r3, r1, r3
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002662:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120

//    double pressure = static_cast<double>(p) / 256.0;

//    return roundDouble(pressure);
    double correct_p = (p/256.0) * pow(1 - (seaLevel/44330.0), -5.255);
 8002666:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	@ 0x120
 800266a:	f7fd ff97 	bl	800059c <__aeabi_l2d>
 800266e:	f04f 0200 	mov.w	r2, #0
 8002672:	4b11      	ldr	r3, [pc, #68]	@ (80026b8 <_ZN6BME28014getAtmPressureEv+0x5e0>)
 8002674:	f7fe f8ea 	bl	800084c <__aeabi_ddiv>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4610      	mov	r0, r2
 800267e:	4619      	mov	r1, r3
 8002680:	a30b      	add	r3, pc, #44	@ (adr r3, 80026b0 <_ZN6BME28014getAtmPressureEv+0x5d8>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f7fd ffb7 	bl	80005f8 <__aeabi_dmul>
 800268a:	4602      	mov	r2, r0
 800268c:	460b      	mov	r3, r1
 800268e:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    return correct_p;
 8002692:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8002696:	ec43 2b17 	vmov	d7, r2, r3
}
 800269a:	eeb0 0a47 	vmov.f32	s0, s14
 800269e:	eef0 0a67 	vmov.f32	s1, s15
 80026a2:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 80026a6:	46bd      	mov	sp, r7
 80026a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80026ac:	f3af 8000 	nop.w
 80026b0:	3ddb7737 	.word	0x3ddb7737
 80026b4:	3ff03ac3 	.word	0x3ff03ac3
 80026b8:	40700000 	.word	0x40700000

080026bc <_ZN6BME28011roundDoubleEd>:



double BME280::roundDouble(double number){
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	60f8      	str	r0, [r7, #12]
 80026c4:	ed87 0b00 	vstr	d0, [r7]
	return std::round(number * 100.0) / 100.0;
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	4b10      	ldr	r3, [pc, #64]	@ (8002710 <_ZN6BME28011roundDoubleEd+0x54>)
 80026ce:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026d2:	f7fd ff91 	bl	80005f8 <__aeabi_dmul>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	ec43 2b17 	vmov	d7, r2, r3
 80026de:	eeb0 0a47 	vmov.f32	s0, s14
 80026e2:	eef0 0a67 	vmov.f32	s1, s15
 80026e6:	f008 f9fd 	bl	800aae4 <round>
 80026ea:	ec51 0b10 	vmov	r0, r1, d0
 80026ee:	f04f 0200 	mov.w	r2, #0
 80026f2:	4b07      	ldr	r3, [pc, #28]	@ (8002710 <_ZN6BME28011roundDoubleEd+0x54>)
 80026f4:	f7fe f8aa 	bl	800084c <__aeabi_ddiv>
 80026f8:	4602      	mov	r2, r0
 80026fa:	460b      	mov	r3, r1
 80026fc:	ec43 2b17 	vmov	d7, r2, r3
}
 8002700:	eeb0 0a47 	vmov.f32	s0, s14
 8002704:	eef0 0a67 	vmov.f32	s1, s15
 8002708:	3710      	adds	r7, #16
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	40590000 	.word	0x40590000

08002714 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800271a:	4b0c      	ldr	r3, [pc, #48]	@ (800274c <MX_DMA_Init+0x38>)
 800271c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800271e:	4a0b      	ldr	r2, [pc, #44]	@ (800274c <MX_DMA_Init+0x38>)
 8002720:	f043 0301 	orr.w	r3, r3, #1
 8002724:	6493      	str	r3, [r2, #72]	@ 0x48
 8002726:	4b09      	ldr	r3, [pc, #36]	@ (800274c <MX_DMA_Init+0x38>)
 8002728:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800272a:	f003 0301 	and.w	r3, r3, #1
 800272e:	607b      	str	r3, [r7, #4]
 8002730:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 8002732:	2200      	movs	r2, #0
 8002734:	2100      	movs	r1, #0
 8002736:	200f      	movs	r0, #15
 8002738:	f002 fbbb 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 800273c:	200f      	movs	r0, #15
 800273e:	f002 fbd4 	bl	8004eea <HAL_NVIC_EnableIRQ>

}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b08a      	sub	sp, #40	@ 0x28
 8002754:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002756:	f107 0314 	add.w	r3, r7, #20
 800275a:	2200      	movs	r2, #0
 800275c:	601a      	str	r2, [r3, #0]
 800275e:	605a      	str	r2, [r3, #4]
 8002760:	609a      	str	r2, [r3, #8]
 8002762:	60da      	str	r2, [r3, #12]
 8002764:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002766:	4b42      	ldr	r3, [pc, #264]	@ (8002870 <MX_GPIO_Init+0x120>)
 8002768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800276a:	4a41      	ldr	r2, [pc, #260]	@ (8002870 <MX_GPIO_Init+0x120>)
 800276c:	f043 0304 	orr.w	r3, r3, #4
 8002770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002772:	4b3f      	ldr	r3, [pc, #252]	@ (8002870 <MX_GPIO_Init+0x120>)
 8002774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	613b      	str	r3, [r7, #16]
 800277c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800277e:	4b3c      	ldr	r3, [pc, #240]	@ (8002870 <MX_GPIO_Init+0x120>)
 8002780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002782:	4a3b      	ldr	r2, [pc, #236]	@ (8002870 <MX_GPIO_Init+0x120>)
 8002784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800278a:	4b39      	ldr	r3, [pc, #228]	@ (8002870 <MX_GPIO_Init+0x120>)
 800278c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800278e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002792:	60fb      	str	r3, [r7, #12]
 8002794:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002796:	4b36      	ldr	r3, [pc, #216]	@ (8002870 <MX_GPIO_Init+0x120>)
 8002798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800279a:	4a35      	ldr	r2, [pc, #212]	@ (8002870 <MX_GPIO_Init+0x120>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027a2:	4b33      	ldr	r3, [pc, #204]	@ (8002870 <MX_GPIO_Init+0x120>)
 80027a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80027ae:	4b30      	ldr	r3, [pc, #192]	@ (8002870 <MX_GPIO_Init+0x120>)
 80027b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027b2:	4a2f      	ldr	r2, [pc, #188]	@ (8002870 <MX_GPIO_Init+0x120>)
 80027b4:	f043 0302 	orr.w	r3, r3, #2
 80027b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80027ba:	4b2d      	ldr	r3, [pc, #180]	@ (8002870 <MX_GPIO_Init+0x120>)
 80027bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80027be:	f003 0302 	and.w	r3, r3, #2
 80027c2:	607b      	str	r3, [r7, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|TRIGPIN_Pin, GPIO_PIN_RESET);
 80027c6:	2200      	movs	r2, #0
 80027c8:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80027d0:	f002 fefe 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, CS_OLED_Pin|RES_OLED_Pin|DC_OLED_Pin, GPIO_PIN_RESET);
 80027d4:	2200      	movs	r2, #0
 80027d6:	f24c 0102 	movw	r1, #49154	@ 0xc002
 80027da:	4826      	ldr	r0, [pc, #152]	@ (8002874 <MX_GPIO_Init+0x124>)
 80027dc:	f002 fef8 	bl	80055d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80027e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80027e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80027e6:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80027ea:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ec:	2300      	movs	r3, #0
 80027ee:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80027f0:	f107 0314 	add.w	r3, r7, #20
 80027f4:	4619      	mov	r1, r3
 80027f6:	4820      	ldr	r0, [pc, #128]	@ (8002878 <MX_GPIO_Init+0x128>)
 80027f8:	f002 fd40 	bl	800527c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|TRIGPIN_Pin;
 80027fc:	f44f 7308 	mov.w	r3, #544	@ 0x220
 8002800:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002802:	2301      	movs	r3, #1
 8002804:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002806:	2300      	movs	r3, #0
 8002808:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800280a:	2300      	movs	r3, #0
 800280c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800280e:	f107 0314 	add.w	r3, r7, #20
 8002812:	4619      	mov	r1, r3
 8002814:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002818:	f002 fd30 	bl	800527c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = BTN4_Pin|BTN3_Pin|BTN2_Pin|BTN1_Pin;
 800281c:	f44f 7358 	mov.w	r3, #864	@ 0x360
 8002820:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002822:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8002826:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002828:	2301      	movs	r3, #1
 800282a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	4619      	mov	r1, r3
 8002832:	4811      	ldr	r0, [pc, #68]	@ (8002878 <MX_GPIO_Init+0x128>)
 8002834:	f002 fd22 	bl	800527c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = CS_OLED_Pin|RES_OLED_Pin|DC_OLED_Pin;
 8002838:	f24c 0302 	movw	r3, #49154	@ 0xc002
 800283c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800283e:	2301      	movs	r3, #1
 8002840:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002842:	2300      	movs	r3, #0
 8002844:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800284a:	f107 0314 	add.w	r3, r7, #20
 800284e:	4619      	mov	r1, r3
 8002850:	4808      	ldr	r0, [pc, #32]	@ (8002874 <MX_GPIO_Init+0x124>)
 8002852:	f002 fd13 	bl	800527c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8002856:	2200      	movs	r2, #0
 8002858:	2100      	movs	r1, #0
 800285a:	2017      	movs	r0, #23
 800285c:	f002 fb29 	bl	8004eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002860:	2017      	movs	r0, #23
 8002862:	f002 fb42 	bl	8004eea <HAL_NVIC_EnableIRQ>

}
 8002866:	bf00      	nop
 8002868:	3728      	adds	r7, #40	@ 0x28
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	40021000 	.word	0x40021000
 8002874:	48000400 	.word	0x48000400
 8002878:	48000800 	.word	0x48000800

0800287c <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c2;
I2C_HandleTypeDef hi2c3;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002880:	4b1b      	ldr	r3, [pc, #108]	@ (80028f0 <MX_I2C1_Init+0x74>)
 8002882:	4a1c      	ldr	r2, [pc, #112]	@ (80028f4 <MX_I2C1_Init+0x78>)
 8002884:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 8002886:	4b1a      	ldr	r3, [pc, #104]	@ (80028f0 <MX_I2C1_Init+0x74>)
 8002888:	4a1b      	ldr	r2, [pc, #108]	@ (80028f8 <MX_I2C1_Init+0x7c>)
 800288a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800288c:	4b18      	ldr	r3, [pc, #96]	@ (80028f0 <MX_I2C1_Init+0x74>)
 800288e:	2200      	movs	r2, #0
 8002890:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002892:	4b17      	ldr	r3, [pc, #92]	@ (80028f0 <MX_I2C1_Init+0x74>)
 8002894:	2201      	movs	r2, #1
 8002896:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002898:	4b15      	ldr	r3, [pc, #84]	@ (80028f0 <MX_I2C1_Init+0x74>)
 800289a:	2200      	movs	r2, #0
 800289c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800289e:	4b14      	ldr	r3, [pc, #80]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80028a4:	4b12      	ldr	r3, [pc, #72]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80028aa:	4b11      	ldr	r3, [pc, #68]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80028b0:	4b0f      	ldr	r3, [pc, #60]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80028b6:	480e      	ldr	r0, [pc, #56]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028b8:	f002 feba 	bl	8005630 <HAL_I2C_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80028c2:	f001 fa4f 	bl	8003d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80028c6:	2100      	movs	r1, #0
 80028c8:	4809      	ldr	r0, [pc, #36]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028ca:	f003 fed7 	bl	800667c <HAL_I2CEx_ConfigAnalogFilter>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d001      	beq.n	80028d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80028d4:	f001 fa46 	bl	8003d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80028d8:	2100      	movs	r1, #0
 80028da:	4805      	ldr	r0, [pc, #20]	@ (80028f0 <MX_I2C1_Init+0x74>)
 80028dc:	f003 ff19 	bl	8006712 <HAL_I2CEx_ConfigDigitalFilter>
 80028e0:	4603      	mov	r3, r0
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d001      	beq.n	80028ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80028e6:	f001 fa3d 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80028ea:	bf00      	nop
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000204 	.word	0x20000204
 80028f4:	40005400 	.word	0x40005400
 80028f8:	10d19ce4 	.word	0x10d19ce4

080028fc <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002900:	4b1b      	ldr	r3, [pc, #108]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002902:	4a1c      	ldr	r2, [pc, #112]	@ (8002974 <MX_I2C2_Init+0x78>)
 8002904:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x10D19CE4;
 8002906:	4b1a      	ldr	r3, [pc, #104]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002908:	4a1b      	ldr	r2, [pc, #108]	@ (8002978 <MX_I2C2_Init+0x7c>)
 800290a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 800290c:	4b18      	ldr	r3, [pc, #96]	@ (8002970 <MX_I2C2_Init+0x74>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002912:	4b17      	ldr	r3, [pc, #92]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002914:	2201      	movs	r2, #1
 8002916:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002918:	4b15      	ldr	r3, [pc, #84]	@ (8002970 <MX_I2C2_Init+0x74>)
 800291a:	2200      	movs	r2, #0
 800291c:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002920:	2200      	movs	r2, #0
 8002922:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002924:	4b12      	ldr	r3, [pc, #72]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002926:	2200      	movs	r2, #0
 8002928:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800292a:	4b11      	ldr	r3, [pc, #68]	@ (8002970 <MX_I2C2_Init+0x74>)
 800292c:	2200      	movs	r2, #0
 800292e:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002930:	4b0f      	ldr	r3, [pc, #60]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002932:	2200      	movs	r2, #0
 8002934:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002936:	480e      	ldr	r0, [pc, #56]	@ (8002970 <MX_I2C2_Init+0x74>)
 8002938:	f002 fe7a 	bl	8005630 <HAL_I2C_Init>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8002942:	f001 fa0f 	bl	8003d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002946:	2100      	movs	r1, #0
 8002948:	4809      	ldr	r0, [pc, #36]	@ (8002970 <MX_I2C2_Init+0x74>)
 800294a:	f003 fe97 	bl	800667c <HAL_I2CEx_ConfigAnalogFilter>
 800294e:	4603      	mov	r3, r0
 8002950:	2b00      	cmp	r3, #0
 8002952:	d001      	beq.n	8002958 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8002954:	f001 fa06 	bl	8003d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8002958:	2100      	movs	r1, #0
 800295a:	4805      	ldr	r0, [pc, #20]	@ (8002970 <MX_I2C2_Init+0x74>)
 800295c:	f003 fed9 	bl	8006712 <HAL_I2CEx_ConfigDigitalFilter>
 8002960:	4603      	mov	r3, r0
 8002962:	2b00      	cmp	r3, #0
 8002964:	d001      	beq.n	800296a <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8002966:	f001 f9fd 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 800296a:	bf00      	nop
 800296c:	bd80      	pop	{r7, pc}
 800296e:	bf00      	nop
 8002970:	20000258 	.word	0x20000258
 8002974:	40005800 	.word	0x40005800
 8002978:	10d19ce4 	.word	0x10d19ce4

0800297c <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002980:	4b1b      	ldr	r3, [pc, #108]	@ (80029f0 <MX_I2C3_Init+0x74>)
 8002982:	4a1c      	ldr	r2, [pc, #112]	@ (80029f4 <MX_I2C3_Init+0x78>)
 8002984:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00F12981;
 8002986:	4b1a      	ldr	r3, [pc, #104]	@ (80029f0 <MX_I2C3_Init+0x74>)
 8002988:	4a1b      	ldr	r2, [pc, #108]	@ (80029f8 <MX_I2C3_Init+0x7c>)
 800298a:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 800298c:	4b18      	ldr	r3, [pc, #96]	@ (80029f0 <MX_I2C3_Init+0x74>)
 800298e:	2200      	movs	r2, #0
 8002990:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002992:	4b17      	ldr	r3, [pc, #92]	@ (80029f0 <MX_I2C3_Init+0x74>)
 8002994:	2201      	movs	r2, #1
 8002996:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002998:	4b15      	ldr	r3, [pc, #84]	@ (80029f0 <MX_I2C3_Init+0x74>)
 800299a:	2200      	movs	r2, #0
 800299c:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800299e:	4b14      	ldr	r3, [pc, #80]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029a0:	2200      	movs	r2, #0
 80029a2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80029a4:	4b12      	ldr	r3, [pc, #72]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029a6:	2200      	movs	r2, #0
 80029a8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80029aa:	4b11      	ldr	r3, [pc, #68]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029ac:	2200      	movs	r2, #0
 80029ae:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80029b0:	4b0f      	ldr	r3, [pc, #60]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80029b6:	480e      	ldr	r0, [pc, #56]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029b8:	f002 fe3a 	bl	8005630 <HAL_I2C_Init>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 80029c2:	f001 f9cf 	bl	8003d64 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80029c6:	2100      	movs	r1, #0
 80029c8:	4809      	ldr	r0, [pc, #36]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029ca:	f003 fe57 	bl	800667c <HAL_I2CEx_ConfigAnalogFilter>
 80029ce:	4603      	mov	r3, r0
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d001      	beq.n	80029d8 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 80029d4:	f001 f9c6 	bl	8003d64 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 80029d8:	2100      	movs	r1, #0
 80029da:	4805      	ldr	r0, [pc, #20]	@ (80029f0 <MX_I2C3_Init+0x74>)
 80029dc:	f003 fe99 	bl	8006712 <HAL_I2CEx_ConfigDigitalFilter>
 80029e0:	4603      	mov	r3, r0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d001      	beq.n	80029ea <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 80029e6:	f001 f9bd 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80029ea:	bf00      	nop
 80029ec:	bd80      	pop	{r7, pc}
 80029ee:	bf00      	nop
 80029f0:	200002ac 	.word	0x200002ac
 80029f4:	40005c00 	.word	0x40005c00
 80029f8:	00f12981 	.word	0x00f12981

080029fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b0b0      	sub	sp, #192	@ 0xc0
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a04:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a08:	2200      	movs	r2, #0
 8002a0a:	601a      	str	r2, [r3, #0]
 8002a0c:	605a      	str	r2, [r3, #4]
 8002a0e:	609a      	str	r2, [r3, #8]
 8002a10:	60da      	str	r2, [r3, #12]
 8002a12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a18:	2288      	movs	r2, #136	@ 0x88
 8002a1a:	2100      	movs	r1, #0
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f008 ff04 	bl	800b82a <memset>
  if(i2cHandle->Instance==I2C1)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4a63      	ldr	r2, [pc, #396]	@ (8002bb4 <HAL_I2C_MspInit+0x1b8>)
 8002a28:	4293      	cmp	r3, r2
 8002a2a:	d13b      	bne.n	8002aa4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002a2c:	2340      	movs	r3, #64	@ 0x40
 8002a2e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8002a30:	2300      	movs	r3, #0
 8002a32:	677b      	str	r3, [r7, #116]	@ 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002a34:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f004 fd1b 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d001      	beq.n	8002a48 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8002a44:	f001 f98e 	bl	8003d64 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a48:	4b5b      	ldr	r3, [pc, #364]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002a4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a4c:	4a5a      	ldr	r2, [pc, #360]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002a4e:	f043 0302 	orr.w	r3, r3, #2
 8002a52:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a54:	4b58      	ldr	r3, [pc, #352]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002a56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a58:	f003 0302 	and.w	r3, r3, #2
 8002a5c:	623b      	str	r3, [r7, #32]
 8002a5e:	6a3b      	ldr	r3, [r7, #32]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a60:	23c0      	movs	r3, #192	@ 0xc0
 8002a62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a66:	2312      	movs	r3, #18
 8002a68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a72:	2303      	movs	r3, #3
 8002a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002a78:	2304      	movs	r3, #4
 8002a7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a7e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002a82:	4619      	mov	r1, r3
 8002a84:	484d      	ldr	r0, [pc, #308]	@ (8002bbc <HAL_I2C_MspInit+0x1c0>)
 8002a86:	f002 fbf9 	bl	800527c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a8a:	4b4b      	ldr	r3, [pc, #300]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002a8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a8e:	4a4a      	ldr	r2, [pc, #296]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002a90:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002a94:	6593      	str	r3, [r2, #88]	@ 0x58
 8002a96:	4b48      	ldr	r3, [pc, #288]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a9a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_I2C3_CLK_ENABLE();
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }
}
 8002aa2:	e082      	b.n	8002baa <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C2)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	4a45      	ldr	r2, [pc, #276]	@ (8002bc0 <HAL_I2C_MspInit+0x1c4>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d13c      	bne.n	8002b28 <HAL_I2C_MspInit+0x12c>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8002aae:	2380      	movs	r3, #128	@ 0x80
 8002ab0:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	67bb      	str	r3, [r7, #120]	@ 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002ab6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002aba:	4618      	mov	r0, r3
 8002abc:	f004 fcda 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <HAL_I2C_MspInit+0xce>
      Error_Handler();
 8002ac6:	f001 f94d 	bl	8003d64 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002aca:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002acc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ace:	4a3a      	ldr	r2, [pc, #232]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ad6:	4b38      	ldr	r3, [pc, #224]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002ad8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	61bb      	str	r3, [r7, #24]
 8002ae0:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ae2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8002ae6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002aea:	2312      	movs	r3, #18
 8002aec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af0:	2300      	movs	r3, #0
 8002af2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002af6:	2303      	movs	r3, #3
 8002af8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002afc:	2304      	movs	r3, #4
 8002afe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002b02:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b06:	4619      	mov	r1, r3
 8002b08:	482c      	ldr	r0, [pc, #176]	@ (8002bbc <HAL_I2C_MspInit+0x1c0>)
 8002b0a:	f002 fbb7 	bl	800527c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b10:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b12:	4a29      	ldr	r2, [pc, #164]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b14:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002b18:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b1a:	4b27      	ldr	r3, [pc, #156]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b22:	617b      	str	r3, [r7, #20]
 8002b24:	697b      	ldr	r3, [r7, #20]
}
 8002b26:	e040      	b.n	8002baa <HAL_I2C_MspInit+0x1ae>
  else if(i2cHandle->Instance==I2C3)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a25      	ldr	r2, [pc, #148]	@ (8002bc4 <HAL_I2C_MspInit+0x1c8>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d13b      	bne.n	8002baa <HAL_I2C_MspInit+0x1ae>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 8002b32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002b36:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002b3c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fc97 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8002b4c:	f001 f90a 	bl	8003d64 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b50:	4b19      	ldr	r3, [pc, #100]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b54:	4a18      	ldr	r2, [pc, #96]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b56:	f043 0304 	orr.w	r3, r3, #4
 8002b5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002b5c:	4b16      	ldr	r3, [pc, #88]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b60:	f003 0304 	and.w	r3, r3, #4
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002b68:	2303      	movs	r3, #3
 8002b6a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002b6e:	2312      	movs	r3, #18
 8002b70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b74:	2300      	movs	r3, #0
 8002b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002b80:	2304      	movs	r3, #4
 8002b82:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b86:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8002b8a:	4619      	mov	r1, r3
 8002b8c:	480e      	ldr	r0, [pc, #56]	@ (8002bc8 <HAL_I2C_MspInit+0x1cc>)
 8002b8e:	f002 fb75 	bl	800527c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002b92:	4b09      	ldr	r3, [pc, #36]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b96:	4a08      	ldr	r2, [pc, #32]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002b98:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002b9c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b9e:	4b06      	ldr	r3, [pc, #24]	@ (8002bb8 <HAL_I2C_MspInit+0x1bc>)
 8002ba0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002ba6:	60fb      	str	r3, [r7, #12]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
}
 8002baa:	bf00      	nop
 8002bac:	37c0      	adds	r7, #192	@ 0xc0
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	40005400 	.word	0x40005400
 8002bb8:	40021000 	.word	0x40021000
 8002bbc:	48000400 	.word	0x48000400
 8002bc0:	40005800 	.word	0x40005800
 8002bc4:	40005c00 	.word	0x40005c00
 8002bc8:	48000800 	.word	0x48000800

08002bcc <HAL_TIM_PWM_PulseFinishedCallback>:
uint8_t LED_Mod[MAX_LED][4]; // for brightness

int flag_data_send = 0;

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
	HAL_TIMEx_PWMN_Stop_DMA(&htim2, TIM_CHANNEL_1);
 8002bd4:	2100      	movs	r1, #0
 8002bd6:	4805      	ldr	r0, [pc, #20]	@ (8002bec <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8002bd8:	f006 fe5d 	bl	8009896 <HAL_TIMEx_PWMN_Stop_DMA>
	flag_data_send = 1;
 8002bdc:	4b04      	ldr	r3, [pc, #16]	@ (8002bf0 <HAL_TIM_PWM_PulseFinishedCallback+0x24>)
 8002bde:	2201      	movs	r2, #1
 8002be0:	601a      	str	r2, [r3, #0]
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	200007cc 	.word	0x200007cc
 8002bf0:	20000300 	.word	0x20000300

08002bf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b083      	sub	sp, #12
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	6039      	str	r1, [r7, #0]
 8002bfe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c00:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	db0a      	blt.n	8002c1e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	b2da      	uxtb	r2, r3
 8002c0c:	490c      	ldr	r1, [pc, #48]	@ (8002c40 <__NVIC_SetPriority+0x4c>)
 8002c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c12:	0112      	lsls	r2, r2, #4
 8002c14:	b2d2      	uxtb	r2, r2
 8002c16:	440b      	add	r3, r1
 8002c18:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c1c:	e00a      	b.n	8002c34 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	b2da      	uxtb	r2, r3
 8002c22:	4908      	ldr	r1, [pc, #32]	@ (8002c44 <__NVIC_SetPriority+0x50>)
 8002c24:	79fb      	ldrb	r3, [r7, #7]
 8002c26:	f003 030f 	and.w	r3, r3, #15
 8002c2a:	3b04      	subs	r3, #4
 8002c2c:	0112      	lsls	r2, r2, #4
 8002c2e:	b2d2      	uxtb	r2, r2
 8002c30:	440b      	add	r3, r1
 8002c32:	761a      	strb	r2, [r3, #24]
}
 8002c34:	bf00      	nop
 8002c36:	370c      	adds	r7, #12
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr
 8002c40:	e000e100 	.word	0xe000e100
 8002c44:	e000ed00 	.word	0xe000ed00

08002c48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b082      	sub	sp, #8
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	3b01      	subs	r3, #1
 8002c54:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002c58:	d301      	bcc.n	8002c5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c5a:	2301      	movs	r3, #1
 8002c5c:	e00f      	b.n	8002c7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c5e:	4a0a      	ldr	r2, [pc, #40]	@ (8002c88 <SysTick_Config+0x40>)
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3b01      	subs	r3, #1
 8002c64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c66:	210f      	movs	r1, #15
 8002c68:	f04f 30ff 	mov.w	r0, #4294967295
 8002c6c:	f7ff ffc2 	bl	8002bf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c70:	4b05      	ldr	r3, [pc, #20]	@ (8002c88 <SysTick_Config+0x40>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c76:	4b04      	ldr	r3, [pc, #16]	@ (8002c88 <SysTick_Config+0x40>)
 8002c78:	2207      	movs	r2, #7
 8002c7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c7c:	2300      	movs	r3, #0
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3708      	adds	r7, #8
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000e010 	.word	0xe000e010

08002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>:

volatile uint64_t systick = 0;

// Funkcje pomocnicze do osbsługi ciągów znakowych za pomoca biblioteki do kontrolera OLED ssd1306:

char* stringToCharArray(const std::string& text) {
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b084      	sub	sp, #16
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
    char* charArray = new char[text.size() + 1];
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f007 fdb0 	bl	800a7fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	f007 fc85 	bl	800a5ae <_Znaj>
 8002ca4:	4603      	mov	r3, r0
 8002ca6:	60fb      	str	r3, [r7, #12]
    std::strcpy(charArray, text.c_str());
 8002ca8:	6878      	ldr	r0, [r7, #4]
 8002caa:	f007 fefb 	bl	800aaa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	68f8      	ldr	r0, [r7, #12]
 8002cb4:	f008 fe8d 	bl	800b9d2 <strcpy>
    return charArray;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3710      	adds	r7, #16
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
	...

08002cc4 <_Z14doubleToStringB5cxx11d>:


std::string doubleToString(double value) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	b08e      	sub	sp, #56	@ 0x38
 8002cc8:	af00      	add	r7, sp, #0
 8002cca:	60f8      	str	r0, [r7, #12]
 8002ccc:	ed87 0b00 	vstr	d0, [r7]
    char buffer[32];
    sprintf(buffer, "%.2f", value);
 8002cd0:	f107 0014 	add.w	r0, r7, #20
 8002cd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002cd8:	490c      	ldr	r1, [pc, #48]	@ (8002d0c <_Z14doubleToStringB5cxx11d+0x48>)
 8002cda:	f008 fd29 	bl	800b730 <siprintf>
    return std::string(buffer);
 8002cde:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	f007 fc65 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8002ce8:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 8002cec:	f107 0314 	add.w	r3, r7, #20
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	68f8      	ldr	r0, [r7, #12]
 8002cf4:	f7fe ff94 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8002cf8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f007 fc5a 	bl	800a5b6 <_ZNSaIcED1Ev>
}
 8002d02:	68f8      	ldr	r0, [r7, #12]
 8002d04:	3738      	adds	r7, #56	@ 0x38
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}
 8002d0a:	bf00      	nop
 8002d0c:	0800d8a8 	.word	0x0800d8a8

08002d10 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002d10:	b580      	push	{r7, lr}
 8002d12:	f5ad 6db5 	sub.w	sp, sp, #1448	@ 0x5a8
 8002d16:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002d18:	f001 ff50 	bl	8004bbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002d1c:	f000 ff4c 	bl	8003bb8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002d20:	f7ff fd16 	bl	8002750 <MX_GPIO_Init>
  MX_DMA_Init();
 8002d24:	f7ff fcf6 	bl	8002714 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002d28:	f001 fe92 	bl	8004a50 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8002d2c:	f7ff fda6 	bl	800287c <MX_I2C1_Init>
  MX_I2C2_Init();
 8002d30:	f7ff fde4 	bl	80028fc <MX_I2C2_Init>
  MX_I2C3_Init();
 8002d34:	f7ff fe22 	bl	800297c <MX_I2C3_Init>
  MX_SPI2_Init();
 8002d38:	f001 f8b0 	bl	8003e9c <MX_SPI2_Init>
  MX_TIM1_Init();
 8002d3c:	f001 fd0c 	bl	8004758 <MX_TIM1_Init>
  MX_TIM2_Init();
 8002d40:	f001 fd64 	bl	800480c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // OLED:
  ssd1306_Init();
 8002d44:	f001 f9b2 	bl	80040ac <ssd1306_Init>
  ssd1306_Fill(Black);
 8002d48:	2000      	movs	r0, #0
 8002d4a:	f001 fa19 	bl	8004180 <ssd1306_Fill>
  ssd1306_UpdateScreen();
 8002d4e:	f001 fa2f 	bl	80041b0 <ssd1306_UpdateScreen>

  // Włączenie systicka:
  SysTick_Config(SystemCoreClock / 1000);
 8002d52:	4b67      	ldr	r3, [pc, #412]	@ (8002ef0 <main+0x1e0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	4a67      	ldr	r2, [pc, #412]	@ (8002ef4 <main+0x1e4>)
 8002d58:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5c:	099b      	lsrs	r3, r3, #6
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7ff ff72 	bl	8002c48 <SysTick_Config>

  // AS7331:
  AS7331 as7331(&hi2c3, 100);
 8002d64:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d68:	2264      	movs	r2, #100	@ 0x64
 8002d6a:	4963      	ldr	r1, [pc, #396]	@ (8002ef8 <main+0x1e8>)
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	f7fe f903 	bl	8000f78 <_ZN6AS7331C1EP19__I2C_HandleTypeDeft>
  as7331.init();
 8002d72:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8002d76:	4618      	mov	r0, r3
 8002d78:	f7fe f915 	bl	8000fa6 <_ZN6AS73314initEv>

  // BME280:
  BME280 bme280(&hi2c2, 100);
 8002d7c:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002d80:	2264      	movs	r2, #100	@ 0x64
 8002d82:	495e      	ldr	r1, [pc, #376]	@ (8002efc <main+0x1ec>)
 8002d84:	4618      	mov	r0, r3
 8002d86:	f7ff f81d 	bl	8001dc4 <_ZN6BME280C1EP19__I2C_HandleTypeDeft>
  bme280.setNormalMode();
 8002d8a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7ff f907 	bl	8001fa2 <_ZN6BME28013setNormalModeEv>
  bme280.init();
 8002d94:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f7ff f82a 	bl	8001df2 <_ZN6BME2804initEv>

  // SEN55
  SEN55 sen55(&hi2c1, 1000);
 8002d9e:	463b      	mov	r3, r7
 8002da0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002da4:	4956      	ldr	r1, [pc, #344]	@ (8002f00 <main+0x1f0>)
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7fe fbb2 	bl	8001510 <_ZN5SEN55C1EP19__I2C_HandleTypeDeft>
//  sen55.getDeviceName();
  sen55.startMeasurement();
 8002dac:	463b      	mov	r3, r7
 8002dae:	4618      	mov	r0, r3
 8002db0:	f7fe fbca 	bl	8001548 <_ZN5SEN5516startMeasurementEv>
  HAL_Delay(1000);
 8002db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002db8:	f001 ff7c 	bl	8004cb4 <HAL_Delay>

  // HC-SR04 timer:
  HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	4851      	ldr	r0, [pc, #324]	@ (8002f04 <main+0x1f4>)
 8002dc0:	f005 fc40 	bl	8008644 <HAL_TIM_IC_Start_IT>
//	  WS2812_Send();
//	  HAL_Delay(100);
//  }

  // Ustaw domyślne ustawenia maszyny stanów:
  currentState = State_IDLE;
 8002dc4:	4b50      	ldr	r3, [pc, #320]	@ (8002f08 <main+0x1f8>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	701a      	strb	r2, [r3, #0]
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Maszyna stanów stacji pogodowej:
	  switch(currentState)
 8002dca:	4b4f      	ldr	r3, [pc, #316]	@ (8002f08 <main+0x1f8>)
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	2b05      	cmp	r3, #5
 8002dd0:	d8fb      	bhi.n	8002dca <main+0xba>
 8002dd2:	a201      	add	r2, pc, #4	@ (adr r2, 8002dd8 <main+0xc8>)
 8002dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dd8:	08002df1 	.word	0x08002df1
 8002ddc:	08002ec7 	.word	0x08002ec7
 8002de0:	08003143 	.word	0x08003143
 8002de4:	08003567 	.word	0x08003567
 8002de8:	08003911 	.word	0x08003911
 8002dec:	0800380d 	.word	0x0800380d
	  {
	  case State_IDLE:
		  HCSR04_Read();
 8002df0:	f7fe fa44 	bl	800127c <HCSR04_Read>
		  if (systick % 100 == 0 || systick < 100){
 8002df4:	4b45      	ldr	r3, [pc, #276]	@ (8002f0c <main+0x1fc>)
 8002df6:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002dfa:	f04f 0264 	mov.w	r2, #100	@ 0x64
 8002dfe:	f04f 0300 	mov.w	r3, #0
 8002e02:	f7fd ff41 	bl	8000c88 <__aeabi_uldivmod>
 8002e06:	4313      	orrs	r3, r2
 8002e08:	d006      	beq.n	8002e18 <main+0x108>
 8002e0a:	4b40      	ldr	r3, [pc, #256]	@ (8002f0c <main+0x1fc>)
 8002e0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e10:	2a64      	cmp	r2, #100	@ 0x64
 8002e12:	f173 0300 	sbcs.w	r3, r3, #0
 8002e16:	d201      	bcs.n	8002e1c <main+0x10c>
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e000      	b.n	8002e1e <main+0x10e>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	f000 86a6 	beq.w	8003b70 <main+0xe60>
			  ssd1306_Fill(Black);
 8002e24:	2000      	movs	r0, #0
 8002e26:	f001 f9ab 	bl	8004180 <ssd1306_Fill>
			  ssd1306_SetCursor(19,28);
 8002e2a:	211c      	movs	r1, #28
 8002e2c:	2013      	movs	r0, #19
 8002e2e:	f001 faf7 	bl	8004420 <ssd1306_SetCursor>
			  char* text1 = stringToCharArray("STACJA POGODOWA");
 8002e32:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e36:	4618      	mov	r0, r3
 8002e38:	f007 fbbb 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8002e3c:	f507 72a0 	add.w	r2, r7, #320	@ 0x140
 8002e40:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e44:	4932      	ldr	r1, [pc, #200]	@ (8002f10 <main+0x200>)
 8002e46:	4618      	mov	r0, r3
 8002e48:	f7fe feea 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8002e4c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7ff ff1b 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002e56:	f8c7 0538 	str.w	r0, [r7, #1336]	@ 0x538
 8002e5a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f007 fc97 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002e64:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f007 fba4 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text1, Font_6x8, White);
 8002e6e:	4b29      	ldr	r3, [pc, #164]	@ (8002f14 <main+0x204>)
 8002e70:	2201      	movs	r2, #1
 8002e72:	9200      	str	r2, [sp, #0]
 8002e74:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e76:	f8d7 0538 	ldr.w	r0, [r7, #1336]	@ 0x538
 8002e7a:	f001 faa5 	bl	80043c8 <ssd1306_WriteString>
			  ssd1306_UpdateScreen();
 8002e7e:	f001 f997 	bl	80041b0 <ssd1306_UpdateScreen>
			  delete[] text1; // Zwolnienie pamięci po użyciu
 8002e82:	f8d7 3538 	ldr.w	r3, [r7, #1336]	@ 0x538
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <main+0x182>
 8002e8a:	f8d7 0538 	ldr.w	r0, [r7, #1336]	@ 0x538
 8002e8e:	f007 fb8c 	bl	800a5aa <_ZdaPv>
//		  }


			if (Distance <= startStateDistanceCmMax && Distance >= startStateDistanceCmMin){
 8002e92:	4b21      	ldr	r3, [pc, #132]	@ (8002f18 <main+0x208>)
 8002e94:	781a      	ldrb	r2, [r3, #0]
 8002e96:	4b21      	ldr	r3, [pc, #132]	@ (8002f1c <main+0x20c>)
 8002e98:	781b      	ldrb	r3, [r3, #0]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f200 8668 	bhi.w	8003b70 <main+0xe60>
 8002ea0:	4b1d      	ldr	r3, [pc, #116]	@ (8002f18 <main+0x208>)
 8002ea2:	781a      	ldrb	r2, [r3, #0]
 8002ea4:	4b1e      	ldr	r3, [pc, #120]	@ (8002f20 <main+0x210>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	f0c0 8661 	bcc.w	8003b70 <main+0xe60>
			  currentState = State_Start;
 8002eae:	4b16      	ldr	r3, [pc, #88]	@ (8002f08 <main+0x1f8>)
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
			  systick = 0;
 8002eb4:	4915      	ldr	r1, [pc, #84]	@ (8002f0c <main+0x1fc>)
 8002eb6:	f04f 0200 	mov.w	r2, #0
 8002eba:	f04f 0300 	mov.w	r3, #0
 8002ebe:	e9c1 2300 	strd	r2, r3, [r1]
			}}
		  break;
 8002ec2:	f000 be55 	b.w	8003b70 <main+0xe60>
	  case State_Start:
		  if (systick % 1000 == 0 || systick < 100){
 8002ec6:	4b11      	ldr	r3, [pc, #68]	@ (8002f0c <main+0x1fc>)
 8002ec8:	e9d3 0100 	ldrd	r0, r1, [r3]
 8002ecc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002ed0:	f04f 0300 	mov.w	r3, #0
 8002ed4:	f7fd fed8 	bl	8000c88 <__aeabi_uldivmod>
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	d006      	beq.n	8002eea <main+0x1da>
 8002edc:	4b0b      	ldr	r3, [pc, #44]	@ (8002f0c <main+0x1fc>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	2a64      	cmp	r2, #100	@ 0x64
 8002ee4:	f173 0300 	sbcs.w	r3, r3, #0
 8002ee8:	d21c      	bcs.n	8002f24 <main+0x214>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e01b      	b.n	8002f26 <main+0x216>
 8002eee:	bf00      	nop
 8002ef0:	20000004 	.word	0x20000004
 8002ef4:	10624dd3 	.word	0x10624dd3
 8002ef8:	200002ac 	.word	0x200002ac
 8002efc:	20000258 	.word	0x20000258
 8002f00:	20000204 	.word	0x20000204
 8002f04:	20000780 	.word	0x20000780
 8002f08:	20000304 	.word	0x20000304
 8002f0c:	20000308 	.word	0x20000308
 8002f10:	0800d8b0 	.word	0x0800d8b0
 8002f14:	0800e134 	.word	0x0800e134
 8002f18:	20000201 	.word	0x20000201
 8002f1c:	20000000 	.word	0x20000000
 8002f20:	20000001 	.word	0x20000001
 8002f24:	2300      	movs	r3, #0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	f000 8625 	beq.w	8003b76 <main+0xe66>
			  ssd1306_Fill(Black);
 8002f2c:	2000      	movs	r0, #0
 8002f2e:	f001 f927 	bl	8004180 <ssd1306_Fill>
			  ssd1306_SetCursor(16, 0);
 8002f32:	2100      	movs	r1, #0
 8002f34:	2010      	movs	r0, #16
 8002f36:	f001 fa73 	bl	8004420 <ssd1306_SetCursor>
			  char* text2 = stringToCharArray("ODCZYTAJ PARAMETR:");
 8002f3a:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f007 fb37 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8002f44:	f507 72ae 	add.w	r2, r7, #348	@ 0x15c
 8002f48:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f4c:	4987      	ldr	r1, [pc, #540]	@ (800316c <main+0x45c>)
 8002f4e:	4618      	mov	r0, r3
 8002f50:	f7fe fe66 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8002f54:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fe97 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002f5e:	f8c7 054c 	str.w	r0, [r7, #1356]	@ 0x54c
 8002f62:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8002f66:	4618      	mov	r0, r3
 8002f68:	f007 fc13 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002f6c:	f507 73ae 	add.w	r3, r7, #348	@ 0x15c
 8002f70:	4618      	mov	r0, r3
 8002f72:	f007 fb20 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text2, Font_6x8, White);
 8002f76:	4b7e      	ldr	r3, [pc, #504]	@ (8003170 <main+0x460>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	9200      	str	r2, [sp, #0]
 8002f7c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002f7e:	f8d7 054c 	ldr.w	r0, [r7, #1356]	@ 0x54c
 8002f82:	f001 fa21 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text2;
 8002f86:	f8d7 354c 	ldr.w	r3, [r7, #1356]	@ 0x54c
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d003      	beq.n	8002f96 <main+0x286>
 8002f8e:	f8d7 054c 	ldr.w	r0, [r7, #1356]	@ 0x54c
 8002f92:	f007 fb0a 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(0, 10);
 8002f96:	210a      	movs	r1, #10
 8002f98:	2000      	movs	r0, #0
 8002f9a:	f001 fa41 	bl	8004420 <ssd1306_SetCursor>
			  char* text3 = stringToCharArray("1. PODST. PARAMETRY");
 8002f9e:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f007 fb05 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8002fa8:	f507 72bc 	add.w	r2, r7, #376	@ 0x178
 8002fac:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002fb0:	4970      	ldr	r1, [pc, #448]	@ (8003174 <main+0x464>)
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fe fe34 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8002fb8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f7ff fe65 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8002fc2:	f8c7 0548 	str.w	r0, [r7, #1352]	@ 0x548
 8002fc6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f007 fbe1 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8002fd0:	f507 73bc 	add.w	r3, r7, #376	@ 0x178
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f007 faee 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text3, Font_6x8, White);
 8002fda:	4b65      	ldr	r3, [pc, #404]	@ (8003170 <main+0x460>)
 8002fdc:	2201      	movs	r2, #1
 8002fde:	9200      	str	r2, [sp, #0]
 8002fe0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002fe2:	f8d7 0548 	ldr.w	r0, [r7, #1352]	@ 0x548
 8002fe6:	f001 f9ef 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text3;
 8002fea:	f8d7 3548 	ldr.w	r3, [r7, #1352]	@ 0x548
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d003      	beq.n	8002ffa <main+0x2ea>
 8002ff2:	f8d7 0548 	ldr.w	r0, [r7, #1352]	@ 0x548
 8002ff6:	f007 fad8 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(0, 20);
 8002ffa:	2114      	movs	r1, #20
 8002ffc:	2000      	movs	r0, #0
 8002ffe:	f001 fa0f 	bl	8004420 <ssd1306_SetCursor>
			  char* text4 = stringToCharArray("2. JAKOSC POWIETRZA");
 8003002:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8003006:	4618      	mov	r0, r3
 8003008:	f007 fad3 	bl	800a5b2 <_ZNSaIcEC1Ev>
 800300c:	f507 72ca 	add.w	r2, r7, #404	@ 0x194
 8003010:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003014:	4958      	ldr	r1, [pc, #352]	@ (8003178 <main+0x468>)
 8003016:	4618      	mov	r0, r3
 8003018:	f7fe fe02 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 800301c:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff fe33 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003026:	f8c7 0544 	str.w	r0, [r7, #1348]	@ 0x544
 800302a:	f507 73be 	add.w	r3, r7, #380	@ 0x17c
 800302e:	4618      	mov	r0, r3
 8003030:	f007 fbaf 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003034:	f507 73ca 	add.w	r3, r7, #404	@ 0x194
 8003038:	4618      	mov	r0, r3
 800303a:	f007 fabc 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text4, Font_6x8, White);
 800303e:	4b4c      	ldr	r3, [pc, #304]	@ (8003170 <main+0x460>)
 8003040:	2201      	movs	r2, #1
 8003042:	9200      	str	r2, [sp, #0]
 8003044:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003046:	f8d7 0544 	ldr.w	r0, [r7, #1348]	@ 0x544
 800304a:	f001 f9bd 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text4;
 800304e:	f8d7 3544 	ldr.w	r3, [r7, #1348]	@ 0x544
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <main+0x34e>
 8003056:	f8d7 0544 	ldr.w	r0, [r7, #1348]	@ 0x544
 800305a:	f007 faa6 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(0, 30);
 800305e:	211e      	movs	r1, #30
 8003060:	2000      	movs	r0, #0
 8003062:	f001 f9dd 	bl	8004420 <ssd1306_SetCursor>
			  char* text5 = stringToCharArray("3. PROMIENIOWANIE UV");
 8003066:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800306a:	4618      	mov	r0, r3
 800306c:	f007 faa1 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8003070:	f507 72d8 	add.w	r2, r7, #432	@ 0x1b0
 8003074:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003078:	4940      	ldr	r1, [pc, #256]	@ (800317c <main+0x46c>)
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fdd0 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8003080:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003084:	4618      	mov	r0, r3
 8003086:	f7ff fe01 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800308a:	f8c7 0540 	str.w	r0, [r7, #1344]	@ 0x540
 800308e:	f507 73cc 	add.w	r3, r7, #408	@ 0x198
 8003092:	4618      	mov	r0, r3
 8003094:	f007 fb7d 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003098:	f507 73d8 	add.w	r3, r7, #432	@ 0x1b0
 800309c:	4618      	mov	r0, r3
 800309e:	f007 fa8a 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text5, Font_6x8, White);
 80030a2:	4b33      	ldr	r3, [pc, #204]	@ (8003170 <main+0x460>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	9200      	str	r2, [sp, #0]
 80030a8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030aa:	f8d7 0540 	ldr.w	r0, [r7, #1344]	@ 0x540
 80030ae:	f001 f98b 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text5;
 80030b2:	f8d7 3540 	ldr.w	r3, [r7, #1344]	@ 0x540
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <main+0x3b2>
 80030ba:	f8d7 0540 	ldr.w	r0, [r7, #1344]	@ 0x540
 80030be:	f007 fa74 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(0, 40);
 80030c2:	2128      	movs	r1, #40	@ 0x28
 80030c4:	2000      	movs	r0, #0
 80030c6:	f001 f9ab 	bl	8004420 <ssd1306_SetCursor>
			  char* text6 = stringToCharArray("4. KIERUNEK WIATRU");
 80030ca:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 80030ce:	4618      	mov	r0, r3
 80030d0:	f007 fa6f 	bl	800a5b2 <_ZNSaIcEC1Ev>
 80030d4:	f507 72e6 	add.w	r2, r7, #460	@ 0x1cc
 80030d8:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80030dc:	4928      	ldr	r1, [pc, #160]	@ (8003180 <main+0x470>)
 80030de:	4618      	mov	r0, r3
 80030e0:	f7fe fd9e 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80030e4:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80030e8:	4618      	mov	r0, r3
 80030ea:	f7ff fdcf 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80030ee:	f8c7 053c 	str.w	r0, [r7, #1340]	@ 0x53c
 80030f2:	f507 73da 	add.w	r3, r7, #436	@ 0x1b4
 80030f6:	4618      	mov	r0, r3
 80030f8:	f007 fb4b 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80030fc:	f507 73e6 	add.w	r3, r7, #460	@ 0x1cc
 8003100:	4618      	mov	r0, r3
 8003102:	f007 fa58 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text6, Font_6x8, White);
 8003106:	4b1a      	ldr	r3, [pc, #104]	@ (8003170 <main+0x460>)
 8003108:	2201      	movs	r2, #1
 800310a:	9200      	str	r2, [sp, #0]
 800310c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800310e:	f8d7 053c 	ldr.w	r0, [r7, #1340]	@ 0x53c
 8003112:	f001 f959 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text6;
 8003116:	f8d7 353c 	ldr.w	r3, [r7, #1340]	@ 0x53c
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <main+0x416>
 800311e:	f8d7 053c 	ldr.w	r0, [r7, #1340]	@ 0x53c
 8003122:	f007 fa42 	bl	800a5aa <_ZdaPv>

			  ssd1306_UpdateScreen();
 8003126:	f001 f843 	bl	80041b0 <ssd1306_UpdateScreen>

			  bme280.init();
 800312a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800312e:	4618      	mov	r0, r3
 8003130:	f7fe fe5f 	bl	8001df2 <_ZN6BME2804initEv>
			  bme280.setNormalMode();
 8003134:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 8003138:	4618      	mov	r0, r3
 800313a:	f7fe ff32 	bl	8001fa2 <_ZN6BME28013setNormalModeEv>
		  }
		  break;
 800313e:	f000 bd1a 	b.w	8003b76 <main+0xe66>
	  case State_SEN55:
		  if (systick % 1000 == 0 || systick < 100){
 8003142:	4b10      	ldr	r3, [pc, #64]	@ (8003184 <main+0x474>)
 8003144:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003148:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800314c:	f04f 0300 	mov.w	r3, #0
 8003150:	f7fd fd9a 	bl	8000c88 <__aeabi_uldivmod>
 8003154:	4313      	orrs	r3, r2
 8003156:	d006      	beq.n	8003166 <main+0x456>
 8003158:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <main+0x474>)
 800315a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315e:	2a64      	cmp	r2, #100	@ 0x64
 8003160:	f173 0300 	sbcs.w	r3, r3, #0
 8003164:	d210      	bcs.n	8003188 <main+0x478>
 8003166:	2301      	movs	r3, #1
 8003168:	e00f      	b.n	800318a <main+0x47a>
 800316a:	bf00      	nop
 800316c:	0800d8c0 	.word	0x0800d8c0
 8003170:	0800e134 	.word	0x0800e134
 8003174:	0800d8d4 	.word	0x0800d8d4
 8003178:	0800d8e8 	.word	0x0800d8e8
 800317c:	0800d8fc 	.word	0x0800d8fc
 8003180:	0800d914 	.word	0x0800d914
 8003184:	20000308 	.word	0x20000308
 8003188:	2300      	movs	r3, #0
 800318a:	2b00      	cmp	r3, #0
 800318c:	f000 84f6 	beq.w	8003b7c <main+0xe6c>
			  if (systick < 5000)
 8003190:	4b7c      	ldr	r3, [pc, #496]	@ (8003384 <main+0x674>)
 8003192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003196:	f241 3188 	movw	r1, #5000	@ 0x1388
 800319a:	428a      	cmp	r2, r1
 800319c:	f173 0300 	sbcs.w	r3, r3, #0
 80031a0:	bf34      	ite	cc
 80031a2:	2301      	movcc	r3, #1
 80031a4:	2300      	movcs	r3, #0
 80031a6:	b2db      	uxtb	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	f000 80f9 	beq.w	80033a0 <main+0x690>
			  {
				  ssd1306_Fill(Black);
 80031ae:	2000      	movs	r0, #0
 80031b0:	f000 ffe6 	bl	8004180 <ssd1306_Fill>
				  sen55.readMeasuremendValues();
 80031b4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80031b8:	f5a3 7374 	sub.w	r3, r3, #976	@ 0x3d0
 80031bc:	463a      	mov	r2, r7
 80031be:	4611      	mov	r1, r2
 80031c0:	4618      	mov	r0, r3
 80031c2:	f7fe f9e7 	bl	8001594 <_ZN5SEN5521readMeasuremendValuesEv>

				  ssd1306_SetCursor(5,5);
 80031c6:	2105      	movs	r1, #5
 80031c8:	2005      	movs	r0, #5
 80031ca:	f001 f929 	bl	8004420 <ssd1306_SetCursor>
				  char* text1 = stringToCharArray("JAKOSC POWIETRZA 1/2:");
 80031ce:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 80031d2:	4618      	mov	r0, r3
 80031d4:	f007 f9ed 	bl	800a5b2 <_ZNSaIcEC1Ev>
 80031d8:	f507 72fc 	add.w	r2, r7, #504	@ 0x1f8
 80031dc:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80031e0:	4969      	ldr	r1, [pc, #420]	@ (8003388 <main+0x678>)
 80031e2:	4618      	mov	r0, r3
 80031e4:	f7fe fd1c 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80031e8:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7ff fd4d 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80031f2:	f8c7 055c 	str.w	r0, [r7, #1372]	@ 0x55c
 80031f6:	f507 73f0 	add.w	r3, r7, #480	@ 0x1e0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f007 fac9 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003200:	f507 73fc 	add.w	r3, r7, #504	@ 0x1f8
 8003204:	4618      	mov	r0, r3
 8003206:	f007 f9d6 	bl	800a5b6 <_ZNSaIcED1Ev>
				  ssd1306_WriteString(text1, Font_6x8, White);
 800320a:	4b60      	ldr	r3, [pc, #384]	@ (800338c <main+0x67c>)
 800320c:	2201      	movs	r2, #1
 800320e:	9200      	str	r2, [sp, #0]
 8003210:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003212:	f8d7 055c 	ldr.w	r0, [r7, #1372]	@ 0x55c
 8003216:	f001 f8d7 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text1;
 800321a:	f8d7 355c 	ldr.w	r3, [r7, #1372]	@ 0x55c
 800321e:	2b00      	cmp	r3, #0
 8003220:	d003      	beq.n	800322a <main+0x51a>
 8003222:	f8d7 055c 	ldr.w	r0, [r7, #1372]	@ 0x55c
 8003226:	f007 f9c0 	bl	800a5aa <_ZdaPv>

				  ssd1306_SetCursor(5,20);
 800322a:	2114      	movs	r1, #20
 800322c:	2005      	movs	r0, #5
 800322e:	f001 f8f7 	bl	8004420 <ssd1306_SetCursor>
				  char* text2 = stringToCharArray("PM 1.0: " + sen55.sensor_string_data.pm1_0 + " ug/m3");
 8003232:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003236:	f5a3 7363 	sub.w	r3, r3, #908	@ 0x38c
 800323a:	463a      	mov	r2, r7
 800323c:	4954      	ldr	r1, [pc, #336]	@ (8003390 <main+0x680>)
 800323e:	4618      	mov	r0, r3
 8003240:	f000 fdae 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003244:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003248:	f5a3 7369 	sub.w	r3, r3, #932	@ 0x3a4
 800324c:	f507 7105 	add.w	r1, r7, #532	@ 0x214
 8003250:	4a50      	ldr	r2, [pc, #320]	@ (8003394 <main+0x684>)
 8003252:	4618      	mov	r0, r3
 8003254:	f000 fde4 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003258:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 800325c:	4618      	mov	r0, r3
 800325e:	f7ff fd15 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003262:	f8c7 0558 	str.w	r0, [r7, #1368]	@ 0x558
 8003266:	f507 73fe 	add.w	r3, r7, #508	@ 0x1fc
 800326a:	4618      	mov	r0, r3
 800326c:	f007 fa91 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003270:	f507 7305 	add.w	r3, r7, #532	@ 0x214
 8003274:	4618      	mov	r0, r3
 8003276:	f007 fa8c 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  ssd1306_WriteString(text2, Font_6x8, White);
 800327a:	4b44      	ldr	r3, [pc, #272]	@ (800338c <main+0x67c>)
 800327c:	2201      	movs	r2, #1
 800327e:	9200      	str	r2, [sp, #0]
 8003280:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003282:	f8d7 0558 	ldr.w	r0, [r7, #1368]	@ 0x558
 8003286:	f001 f89f 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text2;
 800328a:	f8d7 3558 	ldr.w	r3, [r7, #1368]	@ 0x558
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <main+0x58a>
 8003292:	f8d7 0558 	ldr.w	r0, [r7, #1368]	@ 0x558
 8003296:	f007 f988 	bl	800a5aa <_ZdaPv>

				  ssd1306_SetCursor(5,35);
 800329a:	2123      	movs	r1, #35	@ 0x23
 800329c:	2005      	movs	r0, #5
 800329e:	f001 f8bf 	bl	8004420 <ssd1306_SetCursor>
				  char* text3 = stringToCharArray("PM 2.5: " + sen55.sensor_string_data.pm2_5 + " ug/m3");
 80032a2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80032a6:	f5a3 7057 	sub.w	r0, r3, #860	@ 0x35c
 80032aa:	463b      	mov	r3, r7
 80032ac:	3318      	adds	r3, #24
 80032ae:	461a      	mov	r2, r3
 80032b0:	4939      	ldr	r1, [pc, #228]	@ (8003398 <main+0x688>)
 80032b2:	f000 fd75 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 80032b6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80032ba:	f5a3 735d 	sub.w	r3, r3, #884	@ 0x374
 80032be:	f507 7111 	add.w	r1, r7, #580	@ 0x244
 80032c2:	4a34      	ldr	r2, [pc, #208]	@ (8003394 <main+0x684>)
 80032c4:	4618      	mov	r0, r3
 80032c6:	f000 fdab 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80032ca:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7ff fcdc 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80032d4:	f8c7 0554 	str.w	r0, [r7, #1364]	@ 0x554
 80032d8:	f507 730b 	add.w	r3, r7, #556	@ 0x22c
 80032dc:	4618      	mov	r0, r3
 80032de:	f007 fa58 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80032e2:	f507 7311 	add.w	r3, r7, #580	@ 0x244
 80032e6:	4618      	mov	r0, r3
 80032e8:	f007 fa53 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  ssd1306_WriteString(text3, Font_6x8, White);
 80032ec:	4b27      	ldr	r3, [pc, #156]	@ (800338c <main+0x67c>)
 80032ee:	2201      	movs	r2, #1
 80032f0:	9200      	str	r2, [sp, #0]
 80032f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80032f4:	f8d7 0554 	ldr.w	r0, [r7, #1364]	@ 0x554
 80032f8:	f001 f866 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text3;
 80032fc:	f8d7 3554 	ldr.w	r3, [r7, #1364]	@ 0x554
 8003300:	2b00      	cmp	r3, #0
 8003302:	d003      	beq.n	800330c <main+0x5fc>
 8003304:	f8d7 0554 	ldr.w	r0, [r7, #1364]	@ 0x554
 8003308:	f007 f94f 	bl	800a5aa <_ZdaPv>

				  ssd1306_SetCursor(5, 50);
 800330c:	2132      	movs	r1, #50	@ 0x32
 800330e:	2005      	movs	r0, #5
 8003310:	f001 f886 	bl	8004420 <ssd1306_SetCursor>
				  char* text4 = stringToCharArray("PM 4.0: " + sen55.sensor_string_data.pm4_0 + " ug/m3");
 8003314:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003318:	f5a3 704b 	sub.w	r0, r3, #812	@ 0x32c
 800331c:	463b      	mov	r3, r7
 800331e:	3330      	adds	r3, #48	@ 0x30
 8003320:	461a      	mov	r2, r3
 8003322:	491e      	ldr	r1, [pc, #120]	@ (800339c <main+0x68c>)
 8003324:	f000 fd3c 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003328:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800332c:	f5a3 7351 	sub.w	r3, r3, #836	@ 0x344
 8003330:	f507 711d 	add.w	r1, r7, #628	@ 0x274
 8003334:	4a17      	ldr	r2, [pc, #92]	@ (8003394 <main+0x684>)
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fd72 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800333c:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 8003340:	4618      	mov	r0, r3
 8003342:	f7ff fca3 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003346:	f8c7 0550 	str.w	r0, [r7, #1360]	@ 0x550
 800334a:	f507 7317 	add.w	r3, r7, #604	@ 0x25c
 800334e:	4618      	mov	r0, r3
 8003350:	f007 fa1f 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003354:	f507 731d 	add.w	r3, r7, #628	@ 0x274
 8003358:	4618      	mov	r0, r3
 800335a:	f007 fa1a 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  ssd1306_WriteString(text4, Font_6x8, White);
 800335e:	4b0b      	ldr	r3, [pc, #44]	@ (800338c <main+0x67c>)
 8003360:	2201      	movs	r2, #1
 8003362:	9200      	str	r2, [sp, #0]
 8003364:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003366:	f8d7 0550 	ldr.w	r0, [r7, #1360]	@ 0x550
 800336a:	f001 f82d 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text4;
 800336e:	f8d7 3550 	ldr.w	r3, [r7, #1360]	@ 0x550
 8003372:	2b00      	cmp	r3, #0
 8003374:	d003      	beq.n	800337e <main+0x66e>
 8003376:	f8d7 0550 	ldr.w	r0, [r7, #1360]	@ 0x550
 800337a:	f007 f916 	bl	800a5aa <_ZdaPv>
				  ssd1306_UpdateScreen();
 800337e:	f000 ff17 	bl	80041b0 <ssd1306_UpdateScreen>

				  ssd1306_UpdateScreen();
			  }
		  }

		  break;
 8003382:	e3fb      	b.n	8003b7c <main+0xe6c>
 8003384:	20000308 	.word	0x20000308
 8003388:	0800d928 	.word	0x0800d928
 800338c:	0800e134 	.word	0x0800e134
 8003390:	0800d940 	.word	0x0800d940
 8003394:	0800d94c 	.word	0x0800d94c
 8003398:	0800d954 	.word	0x0800d954
 800339c:	0800d960 	.word	0x0800d960
				  ssd1306_Fill(Black);
 80033a0:	2000      	movs	r0, #0
 80033a2:	f000 feed 	bl	8004180 <ssd1306_Fill>
				  ssd1306_SetCursor(5,5);
 80033a6:	2105      	movs	r1, #5
 80033a8:	2005      	movs	r0, #5
 80033aa:	f001 f839 	bl	8004420 <ssd1306_SetCursor>
				  char* text5 = stringToCharArray("JAKOSC POWIETRZA 2/2:");
 80033ae:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80033b2:	4618      	mov	r0, r3
 80033b4:	f007 f8fd 	bl	800a5b2 <_ZNSaIcEC1Ev>
 80033b8:	f507 7229 	add.w	r2, r7, #676	@ 0x2a4
 80033bc:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80033c0:	4973      	ldr	r1, [pc, #460]	@ (8003590 <main+0x880>)
 80033c2:	4618      	mov	r0, r3
 80033c4:	f7fe fc2c 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80033c8:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff fc5d 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80033d2:	f8c7 056c 	str.w	r0, [r7, #1388]	@ 0x56c
 80033d6:	f507 7323 	add.w	r3, r7, #652	@ 0x28c
 80033da:	4618      	mov	r0, r3
 80033dc:	f007 f9d9 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80033e0:	f507 7329 	add.w	r3, r7, #676	@ 0x2a4
 80033e4:	4618      	mov	r0, r3
 80033e6:	f007 f8e6 	bl	800a5b6 <_ZNSaIcED1Ev>
				  ssd1306_WriteString(text5, Font_6x8, White);
 80033ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003594 <main+0x884>)
 80033ec:	2201      	movs	r2, #1
 80033ee:	9200      	str	r2, [sp, #0]
 80033f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80033f2:	f8d7 056c 	ldr.w	r0, [r7, #1388]	@ 0x56c
 80033f6:	f000 ffe7 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text5;
 80033fa:	f8d7 356c 	ldr.w	r3, [r7, #1388]	@ 0x56c
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d003      	beq.n	800340a <main+0x6fa>
 8003402:	f8d7 056c 	ldr.w	r0, [r7, #1388]	@ 0x56c
 8003406:	f007 f8d0 	bl	800a5aa <_ZdaPv>
				  ssd1306_SetCursor(5,20);
 800340a:	2114      	movs	r1, #20
 800340c:	2005      	movs	r0, #5
 800340e:	f001 f807 	bl	8004420 <ssd1306_SetCursor>
				  char* text6 = stringToCharArray("PM 10: " + sen55.sensor_string_data.pm10 + " ug/m3");
 8003412:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003416:	f5a3 7038 	sub.w	r0, r3, #736	@ 0x2e0
 800341a:	463b      	mov	r3, r7
 800341c:	3348      	adds	r3, #72	@ 0x48
 800341e:	461a      	mov	r2, r3
 8003420:	495d      	ldr	r1, [pc, #372]	@ (8003598 <main+0x888>)
 8003422:	f000 fcbd 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003426:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800342a:	f5a3 733e 	sub.w	r3, r3, #760	@ 0x2f8
 800342e:	f507 7130 	add.w	r1, r7, #704	@ 0x2c0
 8003432:	4a5a      	ldr	r2, [pc, #360]	@ (800359c <main+0x88c>)
 8003434:	4618      	mov	r0, r3
 8003436:	f000 fcf3 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800343a:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800343e:	4618      	mov	r0, r3
 8003440:	f7ff fc24 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003444:	f8c7 0568 	str.w	r0, [r7, #1384]	@ 0x568
 8003448:	f507 732a 	add.w	r3, r7, #680	@ 0x2a8
 800344c:	4618      	mov	r0, r3
 800344e:	f007 f9a0 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003452:	f507 7330 	add.w	r3, r7, #704	@ 0x2c0
 8003456:	4618      	mov	r0, r3
 8003458:	f007 f99b 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  ssd1306_WriteString(text6, Font_6x8, White);
 800345c:	4b4d      	ldr	r3, [pc, #308]	@ (8003594 <main+0x884>)
 800345e:	2201      	movs	r2, #1
 8003460:	9200      	str	r2, [sp, #0]
 8003462:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003464:	f8d7 0568 	ldr.w	r0, [r7, #1384]	@ 0x568
 8003468:	f000 ffae 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text6;
 800346c:	f8d7 3568 	ldr.w	r3, [r7, #1384]	@ 0x568
 8003470:	2b00      	cmp	r3, #0
 8003472:	d003      	beq.n	800347c <main+0x76c>
 8003474:	f8d7 0568 	ldr.w	r0, [r7, #1384]	@ 0x568
 8003478:	f007 f897 	bl	800a5aa <_ZdaPv>
				  ssd1306_SetCursor(5,35);
 800347c:	2123      	movs	r1, #35	@ 0x23
 800347e:	2005      	movs	r0, #5
 8003480:	f000 ffce 	bl	8004420 <ssd1306_SetCursor>
				  char* text7 = stringToCharArray("VOC:   " + sen55.sensor_string_data.vocIndex + " [0-500]");
 8003484:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003488:	f5a3 702c 	sub.w	r0, r3, #688	@ 0x2b0
 800348c:	463b      	mov	r3, r7
 800348e:	3390      	adds	r3, #144	@ 0x90
 8003490:	461a      	mov	r2, r3
 8003492:	4943      	ldr	r1, [pc, #268]	@ (80035a0 <main+0x890>)
 8003494:	f000 fc84 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003498:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800349c:	f5a3 7332 	sub.w	r3, r3, #712	@ 0x2c8
 80034a0:	f507 713c 	add.w	r1, r7, #752	@ 0x2f0
 80034a4:	4a3f      	ldr	r2, [pc, #252]	@ (80035a4 <main+0x894>)
 80034a6:	4618      	mov	r0, r3
 80034a8:	f000 fcba 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80034ac:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 80034b0:	4618      	mov	r0, r3
 80034b2:	f7ff fbeb 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80034b6:	f8c7 0564 	str.w	r0, [r7, #1380]	@ 0x564
 80034ba:	f507 7336 	add.w	r3, r7, #728	@ 0x2d8
 80034be:	4618      	mov	r0, r3
 80034c0:	f007 f967 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80034c4:	f507 733c 	add.w	r3, r7, #752	@ 0x2f0
 80034c8:	4618      	mov	r0, r3
 80034ca:	f007 f962 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  ssd1306_WriteString(text7, Font_6x8, White);
 80034ce:	4b31      	ldr	r3, [pc, #196]	@ (8003594 <main+0x884>)
 80034d0:	2201      	movs	r2, #1
 80034d2:	9200      	str	r2, [sp, #0]
 80034d4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80034d6:	f8d7 0564 	ldr.w	r0, [r7, #1380]	@ 0x564
 80034da:	f000 ff75 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text7;
 80034de:	f8d7 3564 	ldr.w	r3, [r7, #1380]	@ 0x564
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d003      	beq.n	80034ee <main+0x7de>
 80034e6:	f8d7 0564 	ldr.w	r0, [r7, #1380]	@ 0x564
 80034ea:	f007 f85e 	bl	800a5aa <_ZdaPv>
				  ssd1306_SetCursor(5, 50);
 80034ee:	2132      	movs	r1, #50	@ 0x32
 80034f0:	2005      	movs	r0, #5
 80034f2:	f000 ff95 	bl	8004420 <ssd1306_SetCursor>
				  char* text8 = stringToCharArray("NOX:   " + sen55.sensor_string_data.noxIndex + " [0-500]");
 80034f6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80034fa:	f5a3 7020 	sub.w	r0, r3, #640	@ 0x280
 80034fe:	463b      	mov	r3, r7
 8003500:	33a8      	adds	r3, #168	@ 0xa8
 8003502:	461a      	mov	r2, r3
 8003504:	4928      	ldr	r1, [pc, #160]	@ (80035a8 <main+0x898>)
 8003506:	f000 fc4b 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 800350a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800350e:	f5a3 7326 	sub.w	r3, r3, #664	@ 0x298
 8003512:	f507 7148 	add.w	r1, r7, #800	@ 0x320
 8003516:	4a23      	ldr	r2, [pc, #140]	@ (80035a4 <main+0x894>)
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fc81 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800351e:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8003522:	4618      	mov	r0, r3
 8003524:	f7ff fbb2 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003528:	f8c7 0560 	str.w	r0, [r7, #1376]	@ 0x560
 800352c:	f507 7342 	add.w	r3, r7, #776	@ 0x308
 8003530:	4618      	mov	r0, r3
 8003532:	f007 f92e 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003536:	f507 7348 	add.w	r3, r7, #800	@ 0x320
 800353a:	4618      	mov	r0, r3
 800353c:	f007 f929 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
				  ssd1306_WriteString(text8, Font_6x8, White);
 8003540:	4b14      	ldr	r3, [pc, #80]	@ (8003594 <main+0x884>)
 8003542:	2201      	movs	r2, #1
 8003544:	9200      	str	r2, [sp, #0]
 8003546:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003548:	f8d7 0560 	ldr.w	r0, [r7, #1376]	@ 0x560
 800354c:	f000 ff3c 	bl	80043c8 <ssd1306_WriteString>
				  delete[] text8;
 8003550:	f8d7 3560 	ldr.w	r3, [r7, #1376]	@ 0x560
 8003554:	2b00      	cmp	r3, #0
 8003556:	d003      	beq.n	8003560 <main+0x850>
 8003558:	f8d7 0560 	ldr.w	r0, [r7, #1376]	@ 0x560
 800355c:	f007 f825 	bl	800a5aa <_ZdaPv>
				  ssd1306_UpdateScreen();
 8003560:	f000 fe26 	bl	80041b0 <ssd1306_UpdateScreen>
		  break;
 8003564:	e30a      	b.n	8003b7c <main+0xe6c>
	  case State_AS7331:
		  if (systick % 1000 == 0 || systick < 100){
 8003566:	4b11      	ldr	r3, [pc, #68]	@ (80035ac <main+0x89c>)
 8003568:	e9d3 0100 	ldrd	r0, r1, [r3]
 800356c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	f7fd fb88 	bl	8000c88 <__aeabi_uldivmod>
 8003578:	4313      	orrs	r3, r2
 800357a:	d006      	beq.n	800358a <main+0x87a>
 800357c:	4b0b      	ldr	r3, [pc, #44]	@ (80035ac <main+0x89c>)
 800357e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003582:	2a64      	cmp	r2, #100	@ 0x64
 8003584:	f173 0300 	sbcs.w	r3, r3, #0
 8003588:	d212      	bcs.n	80035b0 <main+0x8a0>
 800358a:	2301      	movs	r3, #1
 800358c:	e011      	b.n	80035b2 <main+0x8a2>
 800358e:	bf00      	nop
 8003590:	0800d96c 	.word	0x0800d96c
 8003594:	0800e134 	.word	0x0800e134
 8003598:	0800d984 	.word	0x0800d984
 800359c:	0800d94c 	.word	0x0800d94c
 80035a0:	0800d98c 	.word	0x0800d98c
 80035a4:	0800d994 	.word	0x0800d994
 80035a8:	0800d9a0 	.word	0x0800d9a0
 80035ac:	20000308 	.word	0x20000308
 80035b0:	2300      	movs	r3, #0
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	f000 82e5 	beq.w	8003b82 <main+0xe72>
			  ssd1306_Fill(Black);
 80035b8:	2000      	movs	r0, #0
 80035ba:	f000 fde1 	bl	8004180 <ssd1306_Fill>
			  as7331.readMeasurements();
 80035be:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7fd fd88 	bl	80010d8 <_ZN6AS733116readMeasurementsEv>

			  ssd1306_SetCursor(5,5);
 80035c8:	2105      	movs	r1, #5
 80035ca:	2005      	movs	r0, #5
 80035cc:	f000 ff28 	bl	8004420 <ssd1306_SetCursor>
			  char* text1 = stringToCharArray("Promieniowanie UV:");
 80035d0:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 80035d4:	4618      	mov	r0, r3
 80035d6:	f006 ffec 	bl	800a5b2 <_ZNSaIcEC1Ev>
 80035da:	f507 7254 	add.w	r2, r7, #848	@ 0x350
 80035de:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80035e2:	49d5      	ldr	r1, [pc, #852]	@ (8003938 <main+0xc28>)
 80035e4:	4618      	mov	r0, r3
 80035e6:	f7fe fb1b 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80035ea:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80035ee:	4618      	mov	r0, r3
 80035f0:	f7ff fb4c 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80035f4:	f8c7 057c 	str.w	r0, [r7, #1404]	@ 0x57c
 80035f8:	f507 734e 	add.w	r3, r7, #824	@ 0x338
 80035fc:	4618      	mov	r0, r3
 80035fe:	f007 f8c8 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003602:	f507 7354 	add.w	r3, r7, #848	@ 0x350
 8003606:	4618      	mov	r0, r3
 8003608:	f006 ffd5 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text1, Font_6x8, White);
 800360c:	4bcb      	ldr	r3, [pc, #812]	@ (800393c <main+0xc2c>)
 800360e:	2201      	movs	r2, #1
 8003610:	9200      	str	r2, [sp, #0]
 8003612:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003614:	f8d7 057c 	ldr.w	r0, [r7, #1404]	@ 0x57c
 8003618:	f000 fed6 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text1;
 800361c:	f8d7 357c 	ldr.w	r3, [r7, #1404]	@ 0x57c
 8003620:	2b00      	cmp	r3, #0
 8003622:	d003      	beq.n	800362c <main+0x91c>
 8003624:	f8d7 057c 	ldr.w	r0, [r7, #1404]	@ 0x57c
 8003628:	f006 ffbf 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5,20);
 800362c:	2114      	movs	r1, #20
 800362e:	2005      	movs	r0, #5
 8003630:	f000 fef6 	bl	8004420 <ssd1306_SetCursor>
			  char* text2 = stringToCharArray("UVA: " + doubleToString(as7331.uv_data.uva) + " uW/cm2");
 8003634:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003638:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 800363c:	ed93 7b00 	vldr	d7, [r3]
 8003640:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003644:	f5a3 7307 	sub.w	r3, r3, #540	@ 0x21c
 8003648:	eeb0 0a47 	vmov.f32	s0, s14
 800364c:	eef0 0a67 	vmov.f32	s1, s15
 8003650:	4618      	mov	r0, r3
 8003652:	f7ff fb37 	bl	8002cc4 <_Z14doubleToStringB5cxx11d>
 8003656:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800365a:	f5a3 730d 	sub.w	r3, r3, #564	@ 0x234
 800365e:	f507 7261 	add.w	r2, r7, #900	@ 0x384
 8003662:	49b7      	ldr	r1, [pc, #732]	@ (8003940 <main+0xc30>)
 8003664:	4618      	mov	r0, r3
 8003666:	f000 fb83 	bl	8003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 800366a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800366e:	f5a3 7313 	sub.w	r3, r3, #588	@ 0x24c
 8003672:	f507 715b 	add.w	r1, r7, #876	@ 0x36c
 8003676:	4ab3      	ldr	r2, [pc, #716]	@ (8003944 <main+0xc34>)
 8003678:	4618      	mov	r0, r3
 800367a:	f000 fbd1 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800367e:	f507 7355 	add.w	r3, r7, #852	@ 0x354
 8003682:	4618      	mov	r0, r3
 8003684:	f7ff fb02 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003688:	f8c7 0578 	str.w	r0, [r7, #1400]	@ 0x578
 800368c:	f507 7355 	add.w	r3, r7, #852	@ 0x354
 8003690:	4618      	mov	r0, r3
 8003692:	f007 f87e 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003696:	f507 735b 	add.w	r3, r7, #876	@ 0x36c
 800369a:	4618      	mov	r0, r3
 800369c:	f007 f879 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80036a0:	f507 7361 	add.w	r3, r7, #900	@ 0x384
 80036a4:	4618      	mov	r0, r3
 80036a6:	f007 f874 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  ssd1306_WriteString(text2, Font_6x8, White);
 80036aa:	4ba4      	ldr	r3, [pc, #656]	@ (800393c <main+0xc2c>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	9200      	str	r2, [sp, #0]
 80036b0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80036b2:	f8d7 0578 	ldr.w	r0, [r7, #1400]	@ 0x578
 80036b6:	f000 fe87 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text2;
 80036ba:	f8d7 3578 	ldr.w	r3, [r7, #1400]	@ 0x578
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d003      	beq.n	80036ca <main+0x9ba>
 80036c2:	f8d7 0578 	ldr.w	r0, [r7, #1400]	@ 0x578
 80036c6:	f006 ff70 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5,35);
 80036ca:	2123      	movs	r1, #35	@ 0x23
 80036cc:	2005      	movs	r0, #5
 80036ce:	f000 fea7 	bl	8004420 <ssd1306_SetCursor>
			  char* text3 = stringToCharArray("UVB: " + doubleToString(as7331.uv_data.uvb) + " uW/cm2");
 80036d2:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80036d6:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 80036da:	ed93 7b02 	vldr	d7, [r3, #8]
 80036de:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80036e2:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80036e6:	eeb0 0a47 	vmov.f32	s0, s14
 80036ea:	eef0 0a67 	vmov.f32	s1, s15
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7ff fae8 	bl	8002cc4 <_Z14doubleToStringB5cxx11d>
 80036f4:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80036f8:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 80036fc:	f507 7273 	add.w	r2, r7, #972	@ 0x3cc
 8003700:	4991      	ldr	r1, [pc, #580]	@ (8003948 <main+0xc38>)
 8003702:	4618      	mov	r0, r3
 8003704:	f000 fb34 	bl	8003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003708:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 800370c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003710:	f507 716d 	add.w	r1, r7, #948	@ 0x3b4
 8003714:	4a8b      	ldr	r2, [pc, #556]	@ (8003944 <main+0xc34>)
 8003716:	4618      	mov	r0, r3
 8003718:	f000 fb82 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 800371c:	f507 7367 	add.w	r3, r7, #924	@ 0x39c
 8003720:	4618      	mov	r0, r3
 8003722:	f7ff fab3 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003726:	f8c7 0574 	str.w	r0, [r7, #1396]	@ 0x574
 800372a:	f507 7367 	add.w	r3, r7, #924	@ 0x39c
 800372e:	4618      	mov	r0, r3
 8003730:	f007 f82f 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003734:	f507 736d 	add.w	r3, r7, #948	@ 0x3b4
 8003738:	4618      	mov	r0, r3
 800373a:	f007 f82a 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800373e:	f507 7373 	add.w	r3, r7, #972	@ 0x3cc
 8003742:	4618      	mov	r0, r3
 8003744:	f007 f825 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  ssd1306_WriteString(text3, Font_6x8, White);
 8003748:	4b7c      	ldr	r3, [pc, #496]	@ (800393c <main+0xc2c>)
 800374a:	2201      	movs	r2, #1
 800374c:	9200      	str	r2, [sp, #0]
 800374e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003750:	f8d7 0574 	ldr.w	r0, [r7, #1396]	@ 0x574
 8003754:	f000 fe38 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text3;
 8003758:	f8d7 3574 	ldr.w	r3, [r7, #1396]	@ 0x574
 800375c:	2b00      	cmp	r3, #0
 800375e:	d003      	beq.n	8003768 <main+0xa58>
 8003760:	f8d7 0574 	ldr.w	r0, [r7, #1396]	@ 0x574
 8003764:	f006 ff21 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5, 50);
 8003768:	2132      	movs	r1, #50	@ 0x32
 800376a:	2005      	movs	r0, #5
 800376c:	f000 fe58 	bl	8004420 <ssd1306_SetCursor>
			  char* text4 = stringToCharArray("UVC: " + doubleToString(as7331.uv_data.uvc) + " uW/cm2");
 8003770:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003774:	f5a3 6393 	sub.w	r3, r3, #1176	@ 0x498
 8003778:	ed93 7b04 	vldr	d7, [r3, #16]
 800377c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003780:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003784:	eeb0 0a47 	vmov.f32	s0, s14
 8003788:	eef0 0a67 	vmov.f32	s1, s15
 800378c:	4618      	mov	r0, r3
 800378e:	f7ff fa99 	bl	8002cc4 <_Z14doubleToStringB5cxx11d>
 8003792:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003796:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 800379a:	f207 4214 	addw	r2, r7, #1044	@ 0x414
 800379e:	496b      	ldr	r1, [pc, #428]	@ (800394c <main+0xc3c>)
 80037a0:	4618      	mov	r0, r3
 80037a2:	f000 fae5 	bl	8003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 80037a6:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 80037aa:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80037ae:	f507 717f 	add.w	r1, r7, #1020	@ 0x3fc
 80037b2:	4a64      	ldr	r2, [pc, #400]	@ (8003944 <main+0xc34>)
 80037b4:	4618      	mov	r0, r3
 80037b6:	f000 fb33 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 80037ba:	f507 7379 	add.w	r3, r7, #996	@ 0x3e4
 80037be:	4618      	mov	r0, r3
 80037c0:	f7ff fa64 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80037c4:	f8c7 0570 	str.w	r0, [r7, #1392]	@ 0x570
 80037c8:	f507 7379 	add.w	r3, r7, #996	@ 0x3e4
 80037cc:	4618      	mov	r0, r3
 80037ce:	f006 ffe0 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037d2:	f507 737f 	add.w	r3, r7, #1020	@ 0x3fc
 80037d6:	4618      	mov	r0, r3
 80037d8:	f006 ffdb 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80037dc:	f207 4314 	addw	r3, r7, #1044	@ 0x414
 80037e0:	4618      	mov	r0, r3
 80037e2:	f006 ffd6 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  ssd1306_WriteString(text4, Font_6x8, White);
 80037e6:	4b55      	ldr	r3, [pc, #340]	@ (800393c <main+0xc2c>)
 80037e8:	2201      	movs	r2, #1
 80037ea:	9200      	str	r2, [sp, #0]
 80037ec:	cb0e      	ldmia	r3, {r1, r2, r3}
 80037ee:	f8d7 0570 	ldr.w	r0, [r7, #1392]	@ 0x570
 80037f2:	f000 fde9 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text4;
 80037f6:	f8d7 3570 	ldr.w	r3, [r7, #1392]	@ 0x570
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d003      	beq.n	8003806 <main+0xaf6>
 80037fe:	f8d7 0570 	ldr.w	r0, [r7, #1392]	@ 0x570
 8003802:	f006 fed2 	bl	800a5aa <_ZdaPv>

			  ssd1306_UpdateScreen();
 8003806:	f000 fcd3 	bl	80041b0 <ssd1306_UpdateScreen>
		  }
		  break;
 800380a:	e1ba      	b.n	8003b82 <main+0xe72>
	  case State_AS5600:
		  if (systick % 1000 == 0 || systick < 100){
 800380c:	4b50      	ldr	r3, [pc, #320]	@ (8003950 <main+0xc40>)
 800380e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003812:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003816:	f04f 0300 	mov.w	r3, #0
 800381a:	f7fd fa35 	bl	8000c88 <__aeabi_uldivmod>
 800381e:	4313      	orrs	r3, r2
 8003820:	d006      	beq.n	8003830 <main+0xb20>
 8003822:	4b4b      	ldr	r3, [pc, #300]	@ (8003950 <main+0xc40>)
 8003824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003828:	2a64      	cmp	r2, #100	@ 0x64
 800382a:	f173 0300 	sbcs.w	r3, r3, #0
 800382e:	d201      	bcs.n	8003834 <main+0xb24>
 8003830:	2301      	movs	r3, #1
 8003832:	e000      	b.n	8003836 <main+0xb26>
 8003834:	2300      	movs	r3, #0
 8003836:	2b00      	cmp	r3, #0
 8003838:	f000 81a6 	beq.w	8003b88 <main+0xe78>
			  ssd1306_Fill(Black);
 800383c:	2000      	movs	r0, #0
 800383e:	f000 fc9f 	bl	8004180 <ssd1306_Fill>

			  ssd1306_SetCursor(5,5);
 8003842:	2105      	movs	r1, #5
 8003844:	2005      	movs	r0, #5
 8003846:	f000 fdeb 	bl	8004420 <ssd1306_SetCursor>
			  char* text1 = stringToCharArray("Kierunek wiatru:");
 800384a:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 800384e:	4618      	mov	r0, r3
 8003850:	f006 feaf 	bl	800a5b2 <_ZNSaIcEC1Ev>
 8003854:	f207 4244 	addw	r2, r7, #1092	@ 0x444
 8003858:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 800385c:	493d      	ldr	r1, [pc, #244]	@ (8003954 <main+0xc44>)
 800385e:	4618      	mov	r0, r3
 8003860:	f7fe f9de 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 8003864:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 8003868:	4618      	mov	r0, r3
 800386a:	f7ff fa0f 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 800386e:	f8c7 059c 	str.w	r0, [r7, #1436]	@ 0x59c
 8003872:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 8003876:	4618      	mov	r0, r3
 8003878:	f006 ff8b 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 800387c:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8003880:	4618      	mov	r0, r3
 8003882:	f006 fe98 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text1, Font_6x8, White);
 8003886:	4b2d      	ldr	r3, [pc, #180]	@ (800393c <main+0xc2c>)
 8003888:	2201      	movs	r2, #1
 800388a:	9200      	str	r2, [sp, #0]
 800388c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800388e:	f8d7 059c 	ldr.w	r0, [r7, #1436]	@ 0x59c
 8003892:	f000 fd99 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text1;
 8003896:	f8d7 359c 	ldr.w	r3, [r7, #1436]	@ 0x59c
 800389a:	2b00      	cmp	r3, #0
 800389c:	d003      	beq.n	80038a6 <main+0xb96>
 800389e:	f8d7 059c 	ldr.w	r0, [r7, #1436]	@ 0x59c
 80038a2:	f006 fe82 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5,35);
 80038a6:	2123      	movs	r1, #35	@ 0x23
 80038a8:	2005      	movs	r0, #5
 80038aa:	f000 fdb9 	bl	8004420 <ssd1306_SetCursor>
			  char* text3 = stringToCharArray("brak odczytu...");
 80038ae:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80038b2:	4618      	mov	r0, r3
 80038b4:	f006 fe7d 	bl	800a5b2 <_ZNSaIcEC1Ev>
 80038b8:	f507 628c 	add.w	r2, r7, #1120	@ 0x460
 80038bc:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80038c0:	4925      	ldr	r1, [pc, #148]	@ (8003958 <main+0xc48>)
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe f9ac 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80038c8:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7ff f9dd 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80038d2:	f8c7 0598 	str.w	r0, [r7, #1432]	@ 0x598
 80038d6:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 80038da:	4618      	mov	r0, r3
 80038dc:	f006 ff59 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80038e0:	f507 638c 	add.w	r3, r7, #1120	@ 0x460
 80038e4:	4618      	mov	r0, r3
 80038e6:	f006 fe66 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text3, Font_6x8, White);
 80038ea:	4b14      	ldr	r3, [pc, #80]	@ (800393c <main+0xc2c>)
 80038ec:	2201      	movs	r2, #1
 80038ee:	9200      	str	r2, [sp, #0]
 80038f0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80038f2:	f8d7 0598 	ldr.w	r0, [r7, #1432]	@ 0x598
 80038f6:	f000 fd67 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text3;
 80038fa:	f8d7 3598 	ldr.w	r3, [r7, #1432]	@ 0x598
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <main+0xbfa>
 8003902:	f8d7 0598 	ldr.w	r0, [r7, #1432]	@ 0x598
 8003906:	f006 fe50 	bl	800a5aa <_ZdaPv>

			  ssd1306_UpdateScreen();
 800390a:	f000 fc51 	bl	80041b0 <ssd1306_UpdateScreen>
		  }
		  break;
 800390e:	e13b      	b.n	8003b88 <main+0xe78>
	  case State_BME280:
		  if (systick % 1000 == 0 || systick < 100){
 8003910:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <main+0xc40>)
 8003912:	e9d3 0100 	ldrd	r0, r1, [r3]
 8003916:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f7fd f9b3 	bl	8000c88 <__aeabi_uldivmod>
 8003922:	4313      	orrs	r3, r2
 8003924:	d006      	beq.n	8003934 <main+0xc24>
 8003926:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <main+0xc40>)
 8003928:	e9d3 2300 	ldrd	r2, r3, [r3]
 800392c:	2a64      	cmp	r2, #100	@ 0x64
 800392e:	f173 0300 	sbcs.w	r3, r3, #0
 8003932:	d213      	bcs.n	800395c <main+0xc4c>
 8003934:	2301      	movs	r3, #1
 8003936:	e012      	b.n	800395e <main+0xc4e>
 8003938:	0800d9a8 	.word	0x0800d9a8
 800393c:	0800e134 	.word	0x0800e134
 8003940:	0800d9bc 	.word	0x0800d9bc
 8003944:	0800d9c4 	.word	0x0800d9c4
 8003948:	0800d9cc 	.word	0x0800d9cc
 800394c:	0800d9d4 	.word	0x0800d9d4
 8003950:	20000308 	.word	0x20000308
 8003954:	0800d9dc 	.word	0x0800d9dc
 8003958:	0800d9f0 	.word	0x0800d9f0
 800395c:	2300      	movs	r3, #0
 800395e:	2b00      	cmp	r3, #0
 8003960:	f000 8115 	beq.w	8003b8e <main+0xe7e>
			  ssd1306_Fill(Black);
 8003964:	2000      	movs	r0, #0
 8003966:	f000 fc0b 	bl	8004180 <ssd1306_Fill>
//			  double temperature = bme280.getTemp();
//			  double humidity = bme280.getHumidity();
			  double pressure = bme280.getAtmPressure();
 800396a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800396e:	4618      	mov	r0, r3
 8003970:	f7fe fbb2 	bl	80020d8 <_ZN6BME28014getAtmPressureEv>
 8003974:	f507 63b2 	add.w	r3, r7, #1424	@ 0x590
 8003978:	ed83 0b00 	vstr	d0, [r3]
			  sen55.readMeasuremendValues();
 800397c:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003980:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003984:	463a      	mov	r2, r7
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7fd fe03 	bl	8001594 <_ZN5SEN5521readMeasuremendValuesEv>

			  ssd1306_SetCursor(5,5);
 800398e:	2105      	movs	r1, #5
 8003990:	2005      	movs	r0, #5
 8003992:	f000 fd45 	bl	8004420 <ssd1306_SetCursor>
			  char* text1 = stringToCharArray("Podstawowe Parametry:");
 8003996:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 800399a:	4618      	mov	r0, r3
 800399c:	f006 fe09 	bl	800a5b2 <_ZNSaIcEC1Ev>
 80039a0:	f207 428c 	addw	r2, r7, #1164	@ 0x48c
 80039a4:	f207 4374 	addw	r3, r7, #1140	@ 0x474
 80039a8:	497a      	ldr	r1, [pc, #488]	@ (8003b94 <main+0xe84>)
 80039aa:	4618      	mov	r0, r3
 80039ac:	f7fe f938 	bl	8001c20 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1IS3_EEPKcRKS3_>
 80039b0:	f207 4374 	addw	r3, r7, #1140	@ 0x474
 80039b4:	4618      	mov	r0, r3
 80039b6:	f7ff f969 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 80039ba:	f8c7 058c 	str.w	r0, [r7, #1420]	@ 0x58c
 80039be:	f207 4374 	addw	r3, r7, #1140	@ 0x474
 80039c2:	4618      	mov	r0, r3
 80039c4:	f006 fee5 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80039c8:	f207 438c 	addw	r3, r7, #1164	@ 0x48c
 80039cc:	4618      	mov	r0, r3
 80039ce:	f006 fdf2 	bl	800a5b6 <_ZNSaIcED1Ev>
			  ssd1306_WriteString(text1, Font_6x8, White);
 80039d2:	4b71      	ldr	r3, [pc, #452]	@ (8003b98 <main+0xe88>)
 80039d4:	2201      	movs	r2, #1
 80039d6:	9200      	str	r2, [sp, #0]
 80039d8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80039da:	f8d7 058c 	ldr.w	r0, [r7, #1420]	@ 0x58c
 80039de:	f000 fcf3 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text1;
 80039e2:	f8d7 358c 	ldr.w	r3, [r7, #1420]	@ 0x58c
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d003      	beq.n	80039f2 <main+0xce2>
 80039ea:	f8d7 058c 	ldr.w	r0, [r7, #1420]	@ 0x58c
 80039ee:	f006 fddc 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5,20);
 80039f2:	2114      	movs	r1, #20
 80039f4:	2005      	movs	r0, #5
 80039f6:	f000 fd13 	bl	8004420 <ssd1306_SetCursor>
			  char* text2 = stringToCharArray("Temp:  " + sen55.sensor_string_data.temperature + " C deg");
 80039fa:	f507 6095 	add.w	r0, r7, #1192	@ 0x4a8
 80039fe:	463b      	mov	r3, r7
 8003a00:	3378      	adds	r3, #120	@ 0x78
 8003a02:	461a      	mov	r2, r3
 8003a04:	4965      	ldr	r1, [pc, #404]	@ (8003b9c <main+0xe8c>)
 8003a06:	f000 f9cb 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003a0a:	f507 63b4 	add.w	r3, r7, #1440	@ 0x5a0
 8003a0e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003a12:	f507 6195 	add.w	r1, r7, #1192	@ 0x4a8
 8003a16:	4a62      	ldr	r2, [pc, #392]	@ (8003ba0 <main+0xe90>)
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f000 fa01 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003a1e:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8003a22:	4618      	mov	r0, r3
 8003a24:	f7ff f932 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003a28:	f8c7 0588 	str.w	r0, [r7, #1416]	@ 0x588
 8003a2c:	f507 6392 	add.w	r3, r7, #1168	@ 0x490
 8003a30:	4618      	mov	r0, r3
 8003a32:	f006 feae 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003a36:	f507 6395 	add.w	r3, r7, #1192	@ 0x4a8
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	f006 fea9 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  ssd1306_WriteString(text2, Font_6x8, White);
 8003a40:	4b55      	ldr	r3, [pc, #340]	@ (8003b98 <main+0xe88>)
 8003a42:	2201      	movs	r2, #1
 8003a44:	9200      	str	r2, [sp, #0]
 8003a46:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003a48:	f8d7 0588 	ldr.w	r0, [r7, #1416]	@ 0x588
 8003a4c:	f000 fcbc 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text2;
 8003a50:	f8d7 3588 	ldr.w	r3, [r7, #1416]	@ 0x588
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d003      	beq.n	8003a60 <main+0xd50>
 8003a58:	f8d7 0588 	ldr.w	r0, [r7, #1416]	@ 0x588
 8003a5c:	f006 fda5 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5,35);
 8003a60:	2123      	movs	r1, #35	@ 0x23
 8003a62:	2005      	movs	r0, #5
 8003a64:	f000 fcdc 	bl	8004420 <ssd1306_SetCursor>
			  char* text3 = stringToCharArray("Hum:   " + sen55.sensor_string_data.humidity + " %");
 8003a68:	f507 609b 	add.w	r0, r7, #1240	@ 0x4d8
 8003a6c:	463b      	mov	r3, r7
 8003a6e:	3360      	adds	r3, #96	@ 0x60
 8003a70:	461a      	mov	r2, r3
 8003a72:	494c      	ldr	r1, [pc, #304]	@ (8003ba4 <main+0xe94>)
 8003a74:	f000 f994 	bl	8003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>
 8003a78:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8003a7c:	f507 619b 	add.w	r1, r7, #1240	@ 0x4d8
 8003a80:	4a49      	ldr	r2, [pc, #292]	@ (8003ba8 <main+0xe98>)
 8003a82:	4618      	mov	r0, r3
 8003a84:	f000 f9cc 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003a88:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f7ff f8fd 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003a92:	f8c7 0584 	str.w	r0, [r7, #1412]	@ 0x584
 8003a96:	f507 6398 	add.w	r3, r7, #1216	@ 0x4c0
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f006 fe79 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003aa0:	f507 639b 	add.w	r3, r7, #1240	@ 0x4d8
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	f006 fe74 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  ssd1306_WriteString(text3, Font_6x8, White);
 8003aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8003b98 <main+0xe88>)
 8003aac:	2201      	movs	r2, #1
 8003aae:	9200      	str	r2, [sp, #0]
 8003ab0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ab2:	f8d7 0584 	ldr.w	r0, [r7, #1412]	@ 0x584
 8003ab6:	f000 fc87 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text3;
 8003aba:	f8d7 3584 	ldr.w	r3, [r7, #1412]	@ 0x584
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d003      	beq.n	8003aca <main+0xdba>
 8003ac2:	f8d7 0584 	ldr.w	r0, [r7, #1412]	@ 0x584
 8003ac6:	f006 fd70 	bl	800a5aa <_ZdaPv>

			  ssd1306_SetCursor(5, 50);
 8003aca:	2132      	movs	r1, #50	@ 0x32
 8003acc:	2005      	movs	r0, #5
 8003ace:	f000 fca7 	bl	8004420 <ssd1306_SetCursor>
			  char* text4 = stringToCharArray("Press: " + doubleToString(static_cast<double>(pressure/100.0)) + " hPa");
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	4b35      	ldr	r3, [pc, #212]	@ (8003bac <main+0xe9c>)
 8003ad8:	f507 61b2 	add.w	r1, r7, #1424	@ 0x590
 8003adc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ae0:	f7fc feb4 	bl	800084c <__aeabi_ddiv>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	ec43 2b17 	vmov	d7, r2, r3
 8003aec:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003af0:	eeb0 0a47 	vmov.f32	s0, s14
 8003af4:	eef0 0a67 	vmov.f32	s1, s15
 8003af8:	4618      	mov	r0, r3
 8003afa:	f7ff f8e3 	bl	8002cc4 <_Z14doubleToStringB5cxx11d>
 8003afe:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8003b02:	f507 62a4 	add.w	r2, r7, #1312	@ 0x520
 8003b06:	492a      	ldr	r1, [pc, #168]	@ (8003bb0 <main+0xea0>)
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f000 f931 	bl	8003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>
 8003b0e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8003b12:	f507 61a1 	add.w	r1, r7, #1288	@ 0x508
 8003b16:	4a27      	ldr	r2, [pc, #156]	@ (8003bb4 <main+0xea4>)
 8003b18:	4618      	mov	r0, r3
 8003b1a:	f000 f981 	bl	8003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>
 8003b1e:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8003b22:	4618      	mov	r0, r3
 8003b24:	f7ff f8b2 	bl	8002c8c <_Z17stringToCharArrayRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEE>
 8003b28:	f8c7 0580 	str.w	r0, [r7, #1408]	@ 0x580
 8003b2c:	f507 639e 	add.w	r3, r7, #1264	@ 0x4f0
 8003b30:	4618      	mov	r0, r3
 8003b32:	f006 fe2e 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b36:	f507 63a1 	add.w	r3, r7, #1288	@ 0x508
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f006 fe29 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 8003b40:	f507 63a4 	add.w	r3, r7, #1312	@ 0x520
 8003b44:	4618      	mov	r0, r3
 8003b46:	f006 fe24 	bl	800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
			  ssd1306_WriteString(text4, Font_6x8, White);
 8003b4a:	4b13      	ldr	r3, [pc, #76]	@ (8003b98 <main+0xe88>)
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	9200      	str	r2, [sp, #0]
 8003b50:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003b52:	f8d7 0580 	ldr.w	r0, [r7, #1408]	@ 0x580
 8003b56:	f000 fc37 	bl	80043c8 <ssd1306_WriteString>
			  delete[] text4;
 8003b5a:	f8d7 3580 	ldr.w	r3, [r7, #1408]	@ 0x580
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d003      	beq.n	8003b6a <main+0xe5a>
 8003b62:	f8d7 0580 	ldr.w	r0, [r7, #1408]	@ 0x580
 8003b66:	f006 fd20 	bl	800a5aa <_ZdaPv>

			  ssd1306_UpdateScreen();
 8003b6a:	f000 fb21 	bl	80041b0 <ssd1306_UpdateScreen>
		  }
		  break;
 8003b6e:	e00e      	b.n	8003b8e <main+0xe7e>
		  break;
 8003b70:	bf00      	nop
 8003b72:	f7ff b92a 	b.w	8002dca <main+0xba>
		  break;
 8003b76:	bf00      	nop
 8003b78:	f7ff b927 	b.w	8002dca <main+0xba>
		  break;
 8003b7c:	bf00      	nop
 8003b7e:	f7ff b924 	b.w	8002dca <main+0xba>
		  break;
 8003b82:	bf00      	nop
 8003b84:	f7ff b921 	b.w	8002dca <main+0xba>
		  break;
 8003b88:	bf00      	nop
 8003b8a:	f7ff b91e 	b.w	8002dca <main+0xba>
		  break;
 8003b8e:	bf00      	nop
 8003b90:	f7ff b91b 	b.w	8002dca <main+0xba>
 8003b94:	0800da00 	.word	0x0800da00
 8003b98:	0800e134 	.word	0x0800e134
 8003b9c:	0800da18 	.word	0x0800da18
 8003ba0:	0800da20 	.word	0x0800da20
 8003ba4:	0800da28 	.word	0x0800da28
 8003ba8:	0800da30 	.word	0x0800da30
 8003bac:	40590000 	.word	0x40590000
 8003bb0:	0800da34 	.word	0x0800da34
 8003bb4:	0800da3c 	.word	0x0800da3c

08003bb8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b096      	sub	sp, #88	@ 0x58
 8003bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003bbe:	f107 0314 	add.w	r3, r7, #20
 8003bc2:	2244      	movs	r2, #68	@ 0x44
 8003bc4:	2100      	movs	r1, #0
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	f007 fe2f 	bl	800b82a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003bcc:	463b      	mov	r3, r7
 8003bce:	2200      	movs	r2, #0
 8003bd0:	601a      	str	r2, [r3, #0]
 8003bd2:	605a      	str	r2, [r3, #4]
 8003bd4:	609a      	str	r2, [r3, #8]
 8003bd6:	60da      	str	r2, [r3, #12]
 8003bd8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003bda:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8003bde:	f002 fdf3 	bl	80067c8 <HAL_PWREx_ControlVoltageScaling>
 8003be2:	4603      	mov	r3, r0
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	bf14      	ite	ne
 8003be8:	2301      	movne	r3, #1
 8003bea:	2300      	moveq	r3, #0
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d001      	beq.n	8003bf6 <_Z18SystemClock_Configv+0x3e>
  {
    Error_Handler();
 8003bf2:	f000 f8b7 	bl	8003d64 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003bf6:	2302      	movs	r3, #2
 8003bf8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003bfa:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003bfe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003c00:	2310      	movs	r3, #16
 8003c02:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003c04:	2302      	movs	r3, #2
 8003c06:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003c08:	2302      	movs	r3, #2
 8003c0a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003c10:	230a      	movs	r3, #10
 8003c12:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003c14:	2307      	movs	r3, #7
 8003c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003c18:	2302      	movs	r3, #2
 8003c1a:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003c1c:	2302      	movs	r3, #2
 8003c1e:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003c20:	f107 0314 	add.w	r3, r7, #20
 8003c24:	4618      	mov	r0, r3
 8003c26:	f002 fe25 	bl	8006874 <HAL_RCC_OscConfig>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	bf14      	ite	ne
 8003c30:	2301      	movne	r3, #1
 8003c32:	2300      	moveq	r3, #0
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <_Z18SystemClock_Configv+0x86>
  {
    Error_Handler();
 8003c3a:	f000 f893 	bl	8003d64 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003c3e:	230f      	movs	r3, #15
 8003c40:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003c42:	2303      	movs	r3, #3
 8003c44:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003c46:	2300      	movs	r3, #0
 8003c48:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003c52:	463b      	mov	r3, r7
 8003c54:	2104      	movs	r1, #4
 8003c56:	4618      	mov	r0, r3
 8003c58:	f003 f9e8 	bl	800702c <HAL_RCC_ClockConfig>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	bf14      	ite	ne
 8003c62:	2301      	movne	r3, #1
 8003c64:	2300      	moveq	r3, #0
 8003c66:	b2db      	uxtb	r3, r3
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d001      	beq.n	8003c70 <_Z18SystemClock_Configv+0xb8>
  {
    Error_Handler();
 8003c6c:	f000 f87a 	bl	8003d64 <Error_Handler>
  }
}
 8003c70:	bf00      	nop
 8003c72:	3758      	adds	r7, #88	@ 0x58
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_SYSTICK_Callback>:

/* USER CODE BEGIN 4 */

// Przerwanie co 1 ms systick:
void HAL_SYSTICK_Callback(void)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	af00      	add	r7, sp, #0
//	if (currentState != State_IDLE) ++systick;
	++systick;
 8003c7c:	4b1d      	ldr	r3, [pc, #116]	@ (8003cf4 <HAL_SYSTICK_Callback+0x7c>)
 8003c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c82:	1c50      	adds	r0, r2, #1
 8003c84:	f143 0100 	adc.w	r1, r3, #0
 8003c88:	4b1a      	ldr	r3, [pc, #104]	@ (8003cf4 <HAL_SYSTICK_Callback+0x7c>)
 8003c8a:	e9c3 0100 	strd	r0, r1, [r3]

	if (systick >= 60000) systick = 0; // Jeżeli dłużej niż jedna minuta
 8003c8e:	4b19      	ldr	r3, [pc, #100]	@ (8003cf4 <HAL_SYSTICK_Callback+0x7c>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f64e 2160 	movw	r1, #60000	@ 0xea60
 8003c98:	428a      	cmp	r2, r1
 8003c9a:	f173 0300 	sbcs.w	r3, r3, #0
 8003c9e:	bf2c      	ite	cs
 8003ca0:	2301      	movcs	r3, #1
 8003ca2:	2300      	movcc	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d006      	beq.n	8003cb8 <HAL_SYSTICK_Callback+0x40>
 8003caa:	4912      	ldr	r1, [pc, #72]	@ (8003cf4 <HAL_SYSTICK_Callback+0x7c>)
 8003cac:	f04f 0200 	mov.w	r2, #0
 8003cb0:	f04f 0300 	mov.w	r3, #0
 8003cb4:	e9c1 2300 	strd	r2, r3, [r1]

	if (systick > 10000){
 8003cb8:	4b0e      	ldr	r3, [pc, #56]	@ (8003cf4 <HAL_SYSTICK_Callback+0x7c>)
 8003cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cbe:	f242 7111 	movw	r1, #10001	@ 0x2711
 8003cc2:	428a      	cmp	r2, r1
 8003cc4:	f173 0300 	sbcs.w	r3, r3, #0
 8003cc8:	bf2c      	ite	cs
 8003cca:	2301      	movcs	r3, #1
 8003ccc:	2300      	movcc	r3, #0
 8003cce:	b2db      	uxtb	r3, r3
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d009      	beq.n	8003ce8 <HAL_SYSTICK_Callback+0x70>
		currentState = State_IDLE; // Jeżeli dłużej niż 10 sekund
 8003cd4:	4b08      	ldr	r3, [pc, #32]	@ (8003cf8 <HAL_SYSTICK_Callback+0x80>)
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	701a      	strb	r2, [r3, #0]
		systick = 0;
 8003cda:	4906      	ldr	r1, [pc, #24]	@ (8003cf4 <HAL_SYSTICK_Callback+0x7c>)
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9c1 2300 	strd	r2, r3, [r1]
	}
}
 8003ce8:	bf00      	nop
 8003cea:	46bd      	mov	sp, r7
 8003cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf0:	4770      	bx	lr
 8003cf2:	bf00      	nop
 8003cf4:	20000308 	.word	0x20000308
 8003cf8:	20000304 	.word	0x20000304

08003cfc <HAL_GPIO_EXTI_Callback>:

// Przerwania od przycisków:
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	4603      	mov	r3, r0
 8003d04:	80fb      	strh	r3, [r7, #6]
	systick = 0;
 8003d06:	4915      	ldr	r1, [pc, #84]	@ (8003d5c <HAL_GPIO_EXTI_Callback+0x60>)
 8003d08:	f04f 0200 	mov.w	r2, #0
 8003d0c:	f04f 0300 	mov.w	r3, #0
 8003d10:	e9c1 2300 	strd	r2, r3, [r1]
    if (GPIO_Pin == BTN1_Pin) {
 8003d14:	88fb      	ldrh	r3, [r7, #6]
 8003d16:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003d1a:	d103      	bne.n	8003d24 <HAL_GPIO_EXTI_Callback+0x28>
        // Obsługa dla przycisku 1 - podstawowe parametry:
        currentState = State_BME280;
 8003d1c:	4b10      	ldr	r3, [pc, #64]	@ (8003d60 <HAL_GPIO_EXTI_Callback+0x64>)
 8003d1e:	2204      	movs	r2, #4
 8003d20:	701a      	strb	r2, [r3, #0]
    }
    else if (GPIO_Pin == BTN4_Pin) {
        // Obsługa dla przycisku 4 - kierunek wiatru:
        currentState = State_AS5600;
    }
}
 8003d22:	e014      	b.n	8003d4e <HAL_GPIO_EXTI_Callback+0x52>
    else if (GPIO_Pin == BTN2_Pin) {
 8003d24:	88fb      	ldrh	r3, [r7, #6]
 8003d26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003d2a:	d103      	bne.n	8003d34 <HAL_GPIO_EXTI_Callback+0x38>
        currentState = State_SEN55;
 8003d2c:	4b0c      	ldr	r3, [pc, #48]	@ (8003d60 <HAL_GPIO_EXTI_Callback+0x64>)
 8003d2e:	2202      	movs	r2, #2
 8003d30:	701a      	strb	r2, [r3, #0]
}
 8003d32:	e00c      	b.n	8003d4e <HAL_GPIO_EXTI_Callback+0x52>
    else if (GPIO_Pin == BTN3_Pin) {
 8003d34:	88fb      	ldrh	r3, [r7, #6]
 8003d36:	2b40      	cmp	r3, #64	@ 0x40
 8003d38:	d103      	bne.n	8003d42 <HAL_GPIO_EXTI_Callback+0x46>
        currentState = State_AS7331;
 8003d3a:	4b09      	ldr	r3, [pc, #36]	@ (8003d60 <HAL_GPIO_EXTI_Callback+0x64>)
 8003d3c:	2203      	movs	r2, #3
 8003d3e:	701a      	strb	r2, [r3, #0]
}
 8003d40:	e005      	b.n	8003d4e <HAL_GPIO_EXTI_Callback+0x52>
    else if (GPIO_Pin == BTN4_Pin) {
 8003d42:	88fb      	ldrh	r3, [r7, #6]
 8003d44:	2b20      	cmp	r3, #32
 8003d46:	d102      	bne.n	8003d4e <HAL_GPIO_EXTI_Callback+0x52>
        currentState = State_AS5600;
 8003d48:	4b05      	ldr	r3, [pc, #20]	@ (8003d60 <HAL_GPIO_EXTI_Callback+0x64>)
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	701a      	strb	r2, [r3, #0]
}
 8003d4e:	bf00      	nop
 8003d50:	370c      	adds	r7, #12
 8003d52:	46bd      	mov	sp, r7
 8003d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d58:	4770      	bx	lr
 8003d5a:	bf00      	nop
 8003d5c:	20000308 	.word	0x20000308
 8003d60:	20000304 	.word	0x20000304

08003d64 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003d64:	b480      	push	{r7}
 8003d66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003d68:	b672      	cpsid	i
}
 8003d6a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003d6c:	bf00      	nop
 8003d6e:	e7fd      	b.n	8003d6c <Error_Handler+0x8>

08003d70 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_OS8_>:
    operator+(const _CharT* __lhs,
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b084      	sub	sp, #16
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
    { return std::move(__rhs.insert(0, __lhs)); }
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	2100      	movs	r1, #0
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f006 fe2f 	bl	800a9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>
 8003d86:	4603      	mov	r3, r0
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f860 	bl	8003e4e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4619      	mov	r1, r3
 8003d92:	68f8      	ldr	r0, [r7, #12]
 8003d94:	f006 fcde 	bl	800a754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	3710      	adds	r7, #16
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_RKS8_>:
#endif

  template<typename _CharT, typename _Traits, typename _Alloc>
    _GLIBCXX20_CONSTEXPR
    basic_string<_CharT, _Traits, _Alloc>
    operator+(const _CharT* __lhs,
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b088      	sub	sp, #32
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	60f8      	str	r0, [r7, #12]
 8003da8:	60b9      	str	r1, [r7, #8]
 8003daa:	607a      	str	r2, [r7, #4]
      typedef basic_string<_CharT, _Traits, _Alloc> __string_type;
      typedef typename __string_type::size_type	  __size_type;
      typedef typename __gnu_cxx::__alloc_traits<_Alloc>::template
	rebind<_CharT>::other _Char_alloc_type;
      typedef __gnu_cxx::__alloc_traits<_Char_alloc_type> _Alloc_traits;
      const __size_type __len = _Traits::length(__lhs);
 8003dac:	68b8      	ldr	r0, [r7, #8]
 8003dae:	f7fd fb2f 	bl	8001410 <_ZNSt11char_traitsIcE6lengthEPKc>
 8003db2:	61f8      	str	r0, [r7, #28]
      __string_type __str(_Alloc_traits::_S_select_on_copy(
 8003db4:	f107 0318 	add.w	r3, r7, #24
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f006 fe74 	bl	800aaa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	f107 0218 	add.w	r2, r7, #24
 8003dc8:	4611      	mov	r1, r2
 8003dca:	4618      	mov	r0, r3
 8003dcc:	f000 f84a 	bl	8003e64 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>
 8003dd0:	f107 0314 	add.w	r3, r7, #20
 8003dd4:	4619      	mov	r1, r3
 8003dd6:	68f8      	ldr	r0, [r7, #12]
 8003dd8:	f006 fcb5 	bl	800a746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>
 8003ddc:	f107 0314 	add.w	r3, r7, #20
 8003de0:	4618      	mov	r0, r3
 8003de2:	f006 fbe8 	bl	800a5b6 <_ZNSaIcED1Ev>
 8003de6:	f107 0318 	add.w	r3, r7, #24
 8003dea:	4618      	mov	r0, r3
 8003dec:	f006 fbe3 	bl	800a5b6 <_ZNSaIcED1Ev>
          __rhs.get_allocator()));
      __str.reserve(__len + __rhs.size());
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f006 fd02 	bl	800a7fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>
 8003df6:	4602      	mov	r2, r0
 8003df8:	69fb      	ldr	r3, [r7, #28]
 8003dfa:	4413      	add	r3, r2
 8003dfc:	4619      	mov	r1, r3
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f006 fd3e 	bl	800a880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>
      __str.append(__lhs, __len);
 8003e04:	69fa      	ldr	r2, [r7, #28]
 8003e06:	68b9      	ldr	r1, [r7, #8]
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f006 fe1f 	bl	800aa4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
      __str.append(__rhs);
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	68f8      	ldr	r0, [r7, #12]
 8003e12:	f006 fe2b 	bl	800aa6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>
      return __str;
 8003e16:	bf00      	nop
    }
 8003e18:	68f8      	ldr	r0, [r7, #12]
 8003e1a:	3720      	adds	r7, #32
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZStplIcSt11char_traitsIcESaIcEENSt7__cxx1112basic_stringIT_T0_T1_EEOS8_PKS5_>:
    operator+(basic_string<_CharT, _Traits, _Alloc>&& __lhs,
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
    { return std::move(__lhs.append(__rhs)); }
 8003e2c:	6879      	ldr	r1, [r7, #4]
 8003e2e:	68b8      	ldr	r0, [r7, #8]
 8003e30:	f006 fe22 	bl	800aa78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>
 8003e34:	4603      	mov	r3, r0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 f809 	bl	8003e4e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	4619      	mov	r1, r3
 8003e40:	68f8      	ldr	r0, [r7, #12]
 8003e42:	f006 fc87 	bl	800a754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>
 8003e46:	68f8      	ldr	r0, [r7, #12]
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_ZSt4moveIRNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEEONSt16remove_referenceIT_E4typeEOS8_>:
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    _GLIBCXX_NODISCARD
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	4618      	mov	r0, r3
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <_ZN9__gnu_cxx14__alloc_traitsISaIcEcE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b082      	sub	sp, #8
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6839      	ldr	r1, [r7, #0]
 8003e72:	4618      	mov	r0, r3
 8003e74:	f000 f804 	bl	8003e80 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	3708      	adds	r7, #8
 8003e7c:	46bd      	mov	sp, r7
 8003e7e:	bd80      	pop	{r7, pc}

08003e80 <_ZNSt16allocator_traitsISaIcEE37select_on_container_copy_constructionERKS0_>:
       *  @brief  Obtain an allocator to use when copying a container.
       *  @param  __rhs  An allocator.
       *  @return @c __rhs
      */
      static _GLIBCXX20_CONSTEXPR allocator_type
      select_on_container_copy_construction(const allocator_type& __rhs)
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 8003e8a:	6839      	ldr	r1, [r7, #0]
 8003e8c:	6878      	ldr	r0, [r7, #4]
 8003e8e:	f006 fb91 	bl	800a5b4 <_ZNSaIcEC1ERKS_>
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	3708      	adds	r7, #8
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
	...

08003e9c <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8003ea0:	4b1b      	ldr	r3, [pc, #108]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ea2:	4a1c      	ldr	r2, [pc, #112]	@ (8003f14 <MX_SPI2_Init+0x78>)
 8003ea4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8003ea6:	4b1a      	ldr	r3, [pc, #104]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ea8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003eac:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003eae:	4b18      	ldr	r3, [pc, #96]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003eb0:	2200      	movs	r2, #0
 8003eb2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003eb4:	4b16      	ldr	r3, [pc, #88]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003eb6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003eba:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ebc:	4b14      	ldr	r3, [pc, #80]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ebe:	2200      	movs	r2, #0
 8003ec0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003ec2:	4b13      	ldr	r3, [pc, #76]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003ec8:	4b11      	ldr	r3, [pc, #68]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003eca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003ece:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8003ed0:	4b0f      	ldr	r3, [pc, #60]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ed2:	2220      	movs	r2, #32
 8003ed4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003ed6:	4b0e      	ldr	r3, [pc, #56]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ed8:	2200      	movs	r2, #0
 8003eda:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8003edc:	4b0c      	ldr	r3, [pc, #48]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ee2:	4b0b      	ldr	r3, [pc, #44]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 7;
 8003ee8:	4b09      	ldr	r3, [pc, #36]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003eea:	2207      	movs	r2, #7
 8003eec:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8003eee:	4b08      	ldr	r3, [pc, #32]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8003ef4:	4b06      	ldr	r3, [pc, #24]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003ef6:	2208      	movs	r2, #8
 8003ef8:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8003efa:	4805      	ldr	r0, [pc, #20]	@ (8003f10 <MX_SPI2_Init+0x74>)
 8003efc:	f003 ff76 	bl	8007dec <HAL_SPI_Init>
 8003f00:	4603      	mov	r3, r0
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d001      	beq.n	8003f0a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8003f06:	f7ff ff2d 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8003f0a:	bf00      	nop
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000310 	.word	0x20000310
 8003f14:	40003800 	.word	0x40003800

08003f18 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b08a      	sub	sp, #40	@ 0x28
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f20:	f107 0314 	add.w	r3, r7, #20
 8003f24:	2200      	movs	r2, #0
 8003f26:	601a      	str	r2, [r3, #0]
 8003f28:	605a      	str	r2, [r3, #4]
 8003f2a:	609a      	str	r2, [r3, #8]
 8003f2c:	60da      	str	r2, [r3, #12]
 8003f2e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	4a25      	ldr	r2, [pc, #148]	@ (8003fcc <HAL_SPI_MspInit+0xb4>)
 8003f36:	4293      	cmp	r3, r2
 8003f38:	d144      	bne.n	8003fc4 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003f3a:	4b25      	ldr	r3, [pc, #148]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f3e:	4a24      	ldr	r2, [pc, #144]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003f44:	6593      	str	r3, [r2, #88]	@ 0x58
 8003f46:	4b22      	ldr	r3, [pc, #136]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f4e:	613b      	str	r3, [r7, #16]
 8003f50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f52:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f56:	4a1e      	ldr	r2, [pc, #120]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f58:	f043 0304 	orr.w	r3, r3, #4
 8003f5c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f62:	f003 0304 	and.w	r3, r3, #4
 8003f66:	60fb      	str	r3, [r7, #12]
 8003f68:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f6a:	4b19      	ldr	r3, [pc, #100]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f6c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f6e:	4a18      	ldr	r2, [pc, #96]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f70:	f043 0302 	orr.w	r3, r3, #2
 8003f74:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8003f76:	4b16      	ldr	r3, [pc, #88]	@ (8003fd0 <HAL_SPI_MspInit+0xb8>)
 8003f78:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	60bb      	str	r3, [r7, #8]
 8003f80:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003f82:	230c      	movs	r3, #12
 8003f84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f86:	2302      	movs	r3, #2
 8003f88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8a:	2300      	movs	r3, #0
 8003f8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003f92:	2305      	movs	r3, #5
 8003f94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f96:	f107 0314 	add.w	r3, r7, #20
 8003f9a:	4619      	mov	r1, r3
 8003f9c:	480d      	ldr	r0, [pc, #52]	@ (8003fd4 <HAL_SPI_MspInit+0xbc>)
 8003f9e:	f001 f96d 	bl	800527c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003fa2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003fa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003fa8:	2302      	movs	r3, #2
 8003faa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fac:	2300      	movs	r3, #0
 8003fae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003fb4:	2305      	movs	r3, #5
 8003fb6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fb8:	f107 0314 	add.w	r3, r7, #20
 8003fbc:	4619      	mov	r1, r3
 8003fbe:	4806      	ldr	r0, [pc, #24]	@ (8003fd8 <HAL_SPI_MspInit+0xc0>)
 8003fc0:	f001 f95c 	bl	800527c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8003fc4:	bf00      	nop
 8003fc6:	3728      	adds	r7, #40	@ 0x28
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	bd80      	pop	{r7, pc}
 8003fcc:	40003800 	.word	0x40003800
 8003fd0:	40021000 	.word	0x40021000
 8003fd4:	48000800 	.word	0x48000800
 8003fd8:	48000400 	.word	0x48000400

08003fdc <ssd1306_Reset>:
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
}

#elif defined(SSD1306_USE_SPI)

void ssd1306_Reset(void) {
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	af00      	add	r7, sp, #0
    // CS = High (not selected)
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET);
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	2102      	movs	r1, #2
 8003fe4:	480b      	ldr	r0, [pc, #44]	@ (8004014 <ssd1306_Reset+0x38>)
 8003fe6:	f001 faf3 	bl	80055d0 <HAL_GPIO_WritePin>

    // Reset the OLED
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_RESET);
 8003fea:	2200      	movs	r2, #0
 8003fec:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003ff0:	4808      	ldr	r0, [pc, #32]	@ (8004014 <ssd1306_Reset+0x38>)
 8003ff2:	f001 faed 	bl	80055d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8003ff6:	200a      	movs	r0, #10
 8003ff8:	f000 fe5c 	bl	8004cb4 <HAL_Delay>
    HAL_GPIO_WritePin(SSD1306_Reset_Port, SSD1306_Reset_Pin, GPIO_PIN_SET);
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004002:	4804      	ldr	r0, [pc, #16]	@ (8004014 <ssd1306_Reset+0x38>)
 8004004:	f001 fae4 	bl	80055d0 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 8004008:	200a      	movs	r0, #10
 800400a:	f000 fe53 	bl	8004cb4 <HAL_Delay>
}
 800400e:	bf00      	nop
 8004010:	bd80      	pop	{r7, pc}
 8004012:	bf00      	nop
 8004014:	48000400 	.word	0x48000400

08004018 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004018:	b580      	push	{r7, lr}
 800401a:	b082      	sub	sp, #8
 800401c:	af00      	add	r7, sp, #0
 800401e:	4603      	mov	r3, r0
 8004020:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 8004022:	2200      	movs	r2, #0
 8004024:	2102      	movs	r1, #2
 8004026:	480c      	ldr	r0, [pc, #48]	@ (8004058 <ssd1306_WriteCommand+0x40>)
 8004028:	f001 fad2 	bl	80055d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_RESET); // command
 800402c:	2200      	movs	r2, #0
 800402e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004032:	4809      	ldr	r0, [pc, #36]	@ (8004058 <ssd1306_WriteCommand+0x40>)
 8004034:	f001 facc 	bl	80055d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, (uint8_t *) &byte, 1, HAL_MAX_DELAY);
 8004038:	1df9      	adds	r1, r7, #7
 800403a:	f04f 33ff 	mov.w	r3, #4294967295
 800403e:	2201      	movs	r2, #1
 8004040:	4806      	ldr	r0, [pc, #24]	@ (800405c <ssd1306_WriteCommand+0x44>)
 8004042:	f003 ff76 	bl	8007f32 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004046:	2201      	movs	r2, #1
 8004048:	2102      	movs	r1, #2
 800404a:	4803      	ldr	r0, [pc, #12]	@ (8004058 <ssd1306_WriteCommand+0x40>)
 800404c:	f001 fac0 	bl	80055d0 <HAL_GPIO_WritePin>
}
 8004050:	bf00      	nop
 8004052:	3708      	adds	r7, #8
 8004054:	46bd      	mov	sp, r7
 8004056:	bd80      	pop	{r7, pc}
 8004058:	48000400 	.word	0x48000400
 800405c:	20000310 	.word	0x20000310

08004060 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004060:	b580      	push	{r7, lr}
 8004062:	b082      	sub	sp, #8
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
 8004068:	6039      	str	r1, [r7, #0]
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_RESET); // select OLED
 800406a:	2200      	movs	r2, #0
 800406c:	2102      	movs	r1, #2
 800406e:	480d      	ldr	r0, [pc, #52]	@ (80040a4 <ssd1306_WriteData+0x44>)
 8004070:	f001 faae 	bl	80055d0 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(SSD1306_DC_Port, SSD1306_DC_Pin, GPIO_PIN_SET); // data
 8004074:	2201      	movs	r2, #1
 8004076:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800407a:	480a      	ldr	r0, [pc, #40]	@ (80040a4 <ssd1306_WriteData+0x44>)
 800407c:	f001 faa8 	bl	80055d0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(&SSD1306_SPI_PORT, buffer, buff_size, HAL_MAX_DELAY);
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	b29a      	uxth	r2, r3
 8004084:	f04f 33ff 	mov.w	r3, #4294967295
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	4807      	ldr	r0, [pc, #28]	@ (80040a8 <ssd1306_WriteData+0x48>)
 800408c:	f003 ff51 	bl	8007f32 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(SSD1306_CS_Port, SSD1306_CS_Pin, GPIO_PIN_SET); // un-select OLED
 8004090:	2201      	movs	r2, #1
 8004092:	2102      	movs	r1, #2
 8004094:	4803      	ldr	r0, [pc, #12]	@ (80040a4 <ssd1306_WriteData+0x44>)
 8004096:	f001 fa9b 	bl	80055d0 <HAL_GPIO_WritePin>
}
 800409a:	bf00      	nop
 800409c:	3708      	adds	r7, #8
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}
 80040a2:	bf00      	nop
 80040a4:	48000400 	.word	0x48000400
 80040a8:	20000310 	.word	0x20000310

080040ac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 80040ac:	b580      	push	{r7, lr}
 80040ae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 80040b0:	f7ff ff94 	bl	8003fdc <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 80040b4:	2064      	movs	r0, #100	@ 0x64
 80040b6:	f000 fdfd 	bl	8004cb4 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 80040ba:	2000      	movs	r0, #0
 80040bc:	f000 f9da 	bl	8004474 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 80040c0:	2020      	movs	r0, #32
 80040c2:	f7ff ffa9 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 80040c6:	2000      	movs	r0, #0
 80040c8:	f7ff ffa6 	bl	8004018 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80040cc:	20b0      	movs	r0, #176	@ 0xb0
 80040ce:	f7ff ffa3 	bl	8004018 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 80040d2:	20c8      	movs	r0, #200	@ 0xc8
 80040d4:	f7ff ffa0 	bl	8004018 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 80040d8:	2000      	movs	r0, #0
 80040da:	f7ff ff9d 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 80040de:	2010      	movs	r0, #16
 80040e0:	f7ff ff9a 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 80040e4:	2040      	movs	r0, #64	@ 0x40
 80040e6:	f7ff ff97 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 80040ea:	20ff      	movs	r0, #255	@ 0xff
 80040ec:	f000 f9b0 	bl	8004450 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 80040f0:	20a1      	movs	r0, #161	@ 0xa1
 80040f2:	f7ff ff91 	bl	8004018 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 80040f6:	20a6      	movs	r0, #166	@ 0xa6
 80040f8:	f7ff ff8e 	bl	8004018 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80040fc:	20a8      	movs	r0, #168	@ 0xa8
 80040fe:	f7ff ff8b 	bl	8004018 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8004102:	203f      	movs	r0, #63	@ 0x3f
 8004104:	f7ff ff88 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8004108:	20a4      	movs	r0, #164	@ 0xa4
 800410a:	f7ff ff85 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 800410e:	20d3      	movs	r0, #211	@ 0xd3
 8004110:	f7ff ff82 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8004114:	2000      	movs	r0, #0
 8004116:	f7ff ff7f 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800411a:	20d5      	movs	r0, #213	@ 0xd5
 800411c:	f7ff ff7c 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8004120:	20f0      	movs	r0, #240	@ 0xf0
 8004122:	f7ff ff79 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8004126:	20d9      	movs	r0, #217	@ 0xd9
 8004128:	f7ff ff76 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 800412c:	2022      	movs	r0, #34	@ 0x22
 800412e:	f7ff ff73 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8004132:	20da      	movs	r0, #218	@ 0xda
 8004134:	f7ff ff70 	bl	8004018 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8004138:	2012      	movs	r0, #18
 800413a:	f7ff ff6d 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 800413e:	20db      	movs	r0, #219	@ 0xdb
 8004140:	f7ff ff6a 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8004144:	2020      	movs	r0, #32
 8004146:	f7ff ff67 	bl	8004018 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800414a:	208d      	movs	r0, #141	@ 0x8d
 800414c:	f7ff ff64 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8004150:	2014      	movs	r0, #20
 8004152:	f7ff ff61 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8004156:	2001      	movs	r0, #1
 8004158:	f000 f98c 	bl	8004474 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 800415c:	2000      	movs	r0, #0
 800415e:	f000 f80f 	bl	8004180 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8004162:	f000 f825 	bl	80041b0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8004166:	4b05      	ldr	r3, [pc, #20]	@ (800417c <ssd1306_Init+0xd0>)
 8004168:	2200      	movs	r2, #0
 800416a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 800416c:	4b03      	ldr	r3, [pc, #12]	@ (800417c <ssd1306_Init+0xd0>)
 800416e:	2200      	movs	r2, #0
 8004170:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8004172:	4b02      	ldr	r3, [pc, #8]	@ (800417c <ssd1306_Init+0xd0>)
 8004174:	2201      	movs	r2, #1
 8004176:	711a      	strb	r2, [r3, #4]
}
 8004178:	bf00      	nop
 800417a:	bd80      	pop	{r7, pc}
 800417c:	20000774 	.word	0x20000774

08004180 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8004180:	b580      	push	{r7, lr}
 8004182:	b082      	sub	sp, #8
 8004184:	af00      	add	r7, sp, #0
 8004186:	4603      	mov	r3, r0
 8004188:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800418a:	79fb      	ldrb	r3, [r7, #7]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d101      	bne.n	8004194 <ssd1306_Fill+0x14>
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <ssd1306_Fill+0x16>
 8004194:	23ff      	movs	r3, #255	@ 0xff
 8004196:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800419a:	4619      	mov	r1, r3
 800419c:	4803      	ldr	r0, [pc, #12]	@ (80041ac <ssd1306_Fill+0x2c>)
 800419e:	f007 fb44 	bl	800b82a <memset>
}
 80041a2:	bf00      	nop
 80041a4:	3708      	adds	r7, #8
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	20000374 	.word	0x20000374

080041b0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80041b6:	2300      	movs	r3, #0
 80041b8:	71fb      	strb	r3, [r7, #7]
 80041ba:	e016      	b.n	80041ea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80041bc:	79fb      	ldrb	r3, [r7, #7]
 80041be:	3b50      	subs	r3, #80	@ 0x50
 80041c0:	b2db      	uxtb	r3, r3
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff ff28 	bl	8004018 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80041c8:	2000      	movs	r0, #0
 80041ca:	f7ff ff25 	bl	8004018 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80041ce:	2010      	movs	r0, #16
 80041d0:	f7ff ff22 	bl	8004018 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80041d4:	79fb      	ldrb	r3, [r7, #7]
 80041d6:	01db      	lsls	r3, r3, #7
 80041d8:	4a08      	ldr	r2, [pc, #32]	@ (80041fc <ssd1306_UpdateScreen+0x4c>)
 80041da:	4413      	add	r3, r2
 80041dc:	2180      	movs	r1, #128	@ 0x80
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ff3e 	bl	8004060 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80041e4:	79fb      	ldrb	r3, [r7, #7]
 80041e6:	3301      	adds	r3, #1
 80041e8:	71fb      	strb	r3, [r7, #7]
 80041ea:	79fb      	ldrb	r3, [r7, #7]
 80041ec:	2b07      	cmp	r3, #7
 80041ee:	d9e5      	bls.n	80041bc <ssd1306_UpdateScreen+0xc>
    }
}
 80041f0:	bf00      	nop
 80041f2:	bf00      	nop
 80041f4:	3708      	adds	r7, #8
 80041f6:	46bd      	mov	sp, r7
 80041f8:	bd80      	pop	{r7, pc}
 80041fa:	bf00      	nop
 80041fc:	20000374 	.word	0x20000374

08004200 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
 800420a:	460b      	mov	r3, r1
 800420c:	71bb      	strb	r3, [r7, #6]
 800420e:	4613      	mov	r3, r2
 8004210:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	2b00      	cmp	r3, #0
 8004218:	db3d      	blt.n	8004296 <ssd1306_DrawPixel+0x96>
 800421a:	79bb      	ldrb	r3, [r7, #6]
 800421c:	2b3f      	cmp	r3, #63	@ 0x3f
 800421e:	d83a      	bhi.n	8004296 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8004220:	797b      	ldrb	r3, [r7, #5]
 8004222:	2b01      	cmp	r3, #1
 8004224:	d11a      	bne.n	800425c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8004226:	79fa      	ldrb	r2, [r7, #7]
 8004228:	79bb      	ldrb	r3, [r7, #6]
 800422a:	08db      	lsrs	r3, r3, #3
 800422c:	b2d8      	uxtb	r0, r3
 800422e:	4603      	mov	r3, r0
 8004230:	01db      	lsls	r3, r3, #7
 8004232:	4413      	add	r3, r2
 8004234:	4a1b      	ldr	r2, [pc, #108]	@ (80042a4 <ssd1306_DrawPixel+0xa4>)
 8004236:	5cd3      	ldrb	r3, [r2, r3]
 8004238:	b25a      	sxtb	r2, r3
 800423a:	79bb      	ldrb	r3, [r7, #6]
 800423c:	f003 0307 	and.w	r3, r3, #7
 8004240:	2101      	movs	r1, #1
 8004242:	fa01 f303 	lsl.w	r3, r1, r3
 8004246:	b25b      	sxtb	r3, r3
 8004248:	4313      	orrs	r3, r2
 800424a:	b259      	sxtb	r1, r3
 800424c:	79fa      	ldrb	r2, [r7, #7]
 800424e:	4603      	mov	r3, r0
 8004250:	01db      	lsls	r3, r3, #7
 8004252:	4413      	add	r3, r2
 8004254:	b2c9      	uxtb	r1, r1
 8004256:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <ssd1306_DrawPixel+0xa4>)
 8004258:	54d1      	strb	r1, [r2, r3]
 800425a:	e01d      	b.n	8004298 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800425c:	79fa      	ldrb	r2, [r7, #7]
 800425e:	79bb      	ldrb	r3, [r7, #6]
 8004260:	08db      	lsrs	r3, r3, #3
 8004262:	b2d8      	uxtb	r0, r3
 8004264:	4603      	mov	r3, r0
 8004266:	01db      	lsls	r3, r3, #7
 8004268:	4413      	add	r3, r2
 800426a:	4a0e      	ldr	r2, [pc, #56]	@ (80042a4 <ssd1306_DrawPixel+0xa4>)
 800426c:	5cd3      	ldrb	r3, [r2, r3]
 800426e:	b25a      	sxtb	r2, r3
 8004270:	79bb      	ldrb	r3, [r7, #6]
 8004272:	f003 0307 	and.w	r3, r3, #7
 8004276:	2101      	movs	r1, #1
 8004278:	fa01 f303 	lsl.w	r3, r1, r3
 800427c:	b25b      	sxtb	r3, r3
 800427e:	43db      	mvns	r3, r3
 8004280:	b25b      	sxtb	r3, r3
 8004282:	4013      	ands	r3, r2
 8004284:	b259      	sxtb	r1, r3
 8004286:	79fa      	ldrb	r2, [r7, #7]
 8004288:	4603      	mov	r3, r0
 800428a:	01db      	lsls	r3, r3, #7
 800428c:	4413      	add	r3, r2
 800428e:	b2c9      	uxtb	r1, r1
 8004290:	4a04      	ldr	r2, [pc, #16]	@ (80042a4 <ssd1306_DrawPixel+0xa4>)
 8004292:	54d1      	strb	r1, [r2, r3]
 8004294:	e000      	b.n	8004298 <ssd1306_DrawPixel+0x98>
        return;
 8004296:	bf00      	nop
    }
}
 8004298:	370c      	adds	r7, #12
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	20000374 	.word	0x20000374

080042a8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80042a8:	b590      	push	{r4, r7, lr}
 80042aa:	b089      	sub	sp, #36	@ 0x24
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4604      	mov	r4, r0
 80042b0:	4638      	mov	r0, r7
 80042b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80042b6:	4623      	mov	r3, r4
 80042b8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80042ba:	7bfb      	ldrb	r3, [r7, #15]
 80042bc:	2b1f      	cmp	r3, #31
 80042be:	d902      	bls.n	80042c6 <ssd1306_WriteChar+0x1e>
 80042c0:	7bfb      	ldrb	r3, [r7, #15]
 80042c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80042c4:	d901      	bls.n	80042ca <ssd1306_WriteChar+0x22>
        return 0;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e077      	b.n	80043ba <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80042ca:	4b3e      	ldr	r3, [pc, #248]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 80042cc:	881b      	ldrh	r3, [r3, #0]
 80042ce:	461a      	mov	r2, r3
 80042d0:	783b      	ldrb	r3, [r7, #0]
 80042d2:	4413      	add	r3, r2
 80042d4:	2b80      	cmp	r3, #128	@ 0x80
 80042d6:	dc06      	bgt.n	80042e6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80042d8:	4b3a      	ldr	r3, [pc, #232]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 80042da:	885b      	ldrh	r3, [r3, #2]
 80042dc:	461a      	mov	r2, r3
 80042de:	787b      	ldrb	r3, [r7, #1]
 80042e0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80042e2:	2b40      	cmp	r3, #64	@ 0x40
 80042e4:	dd01      	ble.n	80042ea <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80042e6:	2300      	movs	r3, #0
 80042e8:	e067      	b.n	80043ba <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80042ea:	2300      	movs	r3, #0
 80042ec:	61fb      	str	r3, [r7, #28]
 80042ee:	e04e      	b.n	800438e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
 80042f4:	3b20      	subs	r3, #32
 80042f6:	7879      	ldrb	r1, [r7, #1]
 80042f8:	fb01 f303 	mul.w	r3, r1, r3
 80042fc:	4619      	mov	r1, r3
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	440b      	add	r3, r1
 8004302:	005b      	lsls	r3, r3, #1
 8004304:	4413      	add	r3, r2
 8004306:	881b      	ldrh	r3, [r3, #0]
 8004308:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800430a:	2300      	movs	r3, #0
 800430c:	61bb      	str	r3, [r7, #24]
 800430e:	e036      	b.n	800437e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	69bb      	ldr	r3, [r7, #24]
 8004314:	fa02 f303 	lsl.w	r3, r2, r3
 8004318:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800431c:	2b00      	cmp	r3, #0
 800431e:	d013      	beq.n	8004348 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8004320:	4b28      	ldr	r3, [pc, #160]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 8004322:	881b      	ldrh	r3, [r3, #0]
 8004324:	b2da      	uxtb	r2, r3
 8004326:	69bb      	ldr	r3, [r7, #24]
 8004328:	b2db      	uxtb	r3, r3
 800432a:	4413      	add	r3, r2
 800432c:	b2d8      	uxtb	r0, r3
 800432e:	4b25      	ldr	r3, [pc, #148]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 8004330:	885b      	ldrh	r3, [r3, #2]
 8004332:	b2da      	uxtb	r2, r3
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	b2db      	uxtb	r3, r3
 8004338:	4413      	add	r3, r2
 800433a:	b2db      	uxtb	r3, r3
 800433c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8004340:	4619      	mov	r1, r3
 8004342:	f7ff ff5d 	bl	8004200 <ssd1306_DrawPixel>
 8004346:	e017      	b.n	8004378 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8004348:	4b1e      	ldr	r3, [pc, #120]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 800434a:	881b      	ldrh	r3, [r3, #0]
 800434c:	b2da      	uxtb	r2, r3
 800434e:	69bb      	ldr	r3, [r7, #24]
 8004350:	b2db      	uxtb	r3, r3
 8004352:	4413      	add	r3, r2
 8004354:	b2d8      	uxtb	r0, r3
 8004356:	4b1b      	ldr	r3, [pc, #108]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 8004358:	885b      	ldrh	r3, [r3, #2]
 800435a:	b2da      	uxtb	r2, r3
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	b2db      	uxtb	r3, r3
 8004360:	4413      	add	r3, r2
 8004362:	b2d9      	uxtb	r1, r3
 8004364:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8004368:	2b00      	cmp	r3, #0
 800436a:	bf0c      	ite	eq
 800436c:	2301      	moveq	r3, #1
 800436e:	2300      	movne	r3, #0
 8004370:	b2db      	uxtb	r3, r3
 8004372:	461a      	mov	r2, r3
 8004374:	f7ff ff44 	bl	8004200 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	3301      	adds	r3, #1
 800437c:	61bb      	str	r3, [r7, #24]
 800437e:	783b      	ldrb	r3, [r7, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	4293      	cmp	r3, r2
 8004386:	d3c3      	bcc.n	8004310 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8004388:	69fb      	ldr	r3, [r7, #28]
 800438a:	3301      	adds	r3, #1
 800438c:	61fb      	str	r3, [r7, #28]
 800438e:	787b      	ldrb	r3, [r7, #1]
 8004390:	461a      	mov	r2, r3
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	4293      	cmp	r3, r2
 8004396:	d3ab      	bcc.n	80042f0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8004398:	4b0a      	ldr	r3, [pc, #40]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 800439a:	881b      	ldrh	r3, [r3, #0]
 800439c:	68ba      	ldr	r2, [r7, #8]
 800439e:	2a00      	cmp	r2, #0
 80043a0:	d005      	beq.n	80043ae <ssd1306_WriteChar+0x106>
 80043a2:	68b9      	ldr	r1, [r7, #8]
 80043a4:	7bfa      	ldrb	r2, [r7, #15]
 80043a6:	3a20      	subs	r2, #32
 80043a8:	440a      	add	r2, r1
 80043aa:	7812      	ldrb	r2, [r2, #0]
 80043ac:	e000      	b.n	80043b0 <ssd1306_WriteChar+0x108>
 80043ae:	783a      	ldrb	r2, [r7, #0]
 80043b0:	4413      	add	r3, r2
 80043b2:	b29a      	uxth	r2, r3
 80043b4:	4b03      	ldr	r3, [pc, #12]	@ (80043c4 <ssd1306_WriteChar+0x11c>)
 80043b6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80043b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3724      	adds	r7, #36	@ 0x24
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd90      	pop	{r4, r7, pc}
 80043c2:	bf00      	nop
 80043c4:	20000774 	.word	0x20000774

080043c8 <ssd1306_WriteString>:
//void ssd1306_displayText(std::string text, SSD1306_Font_t Font, SSD1306_COLOR color){
//	ssd1306_WriteString((char*)text.c_str(), Font, color);
//}

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af02      	add	r7, sp, #8
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	4638      	mov	r0, r7
 80043d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80043d6:	e018      	b.n	800440a <ssd1306_WriteString+0x42>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	7818      	ldrb	r0, [r3, #0]
 80043dc:	7e3b      	ldrb	r3, [r7, #24]
 80043de:	9300      	str	r3, [sp, #0]
 80043e0:	463b      	mov	r3, r7
 80043e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043e4:	f7ff ff60 	bl	80042a8 <ssd1306_WriteChar>
 80043e8:	4603      	mov	r3, r0
 80043ea:	461a      	mov	r2, r3
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	bf14      	ite	ne
 80043f4:	2301      	movne	r3, #1
 80043f6:	2300      	moveq	r3, #0
 80043f8:	b2db      	uxtb	r3, r3
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d002      	beq.n	8004404 <ssd1306_WriteString+0x3c>
            // Char could not be written
            return *str;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	781b      	ldrb	r3, [r3, #0]
 8004402:	e008      	b.n	8004416 <ssd1306_WriteString+0x4e>
        }
        str++;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	3301      	adds	r3, #1
 8004408:	60fb      	str	r3, [r7, #12]
    while (*str) {
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d1e2      	bne.n	80043d8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	781b      	ldrb	r3, [r3, #0]
}
 8004416:	4618      	mov	r0, r3
 8004418:	3710      	adds	r7, #16
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
	...

08004420 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	4603      	mov	r3, r0
 8004428:	460a      	mov	r2, r1
 800442a:	71fb      	strb	r3, [r7, #7]
 800442c:	4613      	mov	r3, r2
 800442e:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8004430:	79fb      	ldrb	r3, [r7, #7]
 8004432:	b29a      	uxth	r2, r3
 8004434:	4b05      	ldr	r3, [pc, #20]	@ (800444c <ssd1306_SetCursor+0x2c>)
 8004436:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8004438:	79bb      	ldrb	r3, [r7, #6]
 800443a:	b29a      	uxth	r2, r3
 800443c:	4b03      	ldr	r3, [pc, #12]	@ (800444c <ssd1306_SetCursor+0x2c>)
 800443e:	805a      	strh	r2, [r3, #2]
}
 8004440:	bf00      	nop
 8004442:	370c      	adds	r7, #12
 8004444:	46bd      	mov	sp, r7
 8004446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444a:	4770      	bx	lr
 800444c:	20000774 	.word	0x20000774

08004450 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	4603      	mov	r3, r0
 8004458:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800445a:	2381      	movs	r3, #129	@ 0x81
 800445c:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800445e:	2081      	movs	r0, #129	@ 0x81
 8004460:	f7ff fdda 	bl	8004018 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8004464:	79fb      	ldrb	r3, [r7, #7]
 8004466:	4618      	mov	r0, r3
 8004468:	f7ff fdd6 	bl	8004018 <ssd1306_WriteCommand>
}
 800446c:	bf00      	nop
 800446e:	3710      	adds	r7, #16
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8004474:	b580      	push	{r7, lr}
 8004476:	b084      	sub	sp, #16
 8004478:	af00      	add	r7, sp, #0
 800447a:	4603      	mov	r3, r0
 800447c:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 800447e:	79fb      	ldrb	r3, [r7, #7]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8004484:	23af      	movs	r3, #175	@ 0xaf
 8004486:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8004488:	4b08      	ldr	r3, [pc, #32]	@ (80044ac <ssd1306_SetDisplayOn+0x38>)
 800448a:	2201      	movs	r2, #1
 800448c:	715a      	strb	r2, [r3, #5]
 800448e:	e004      	b.n	800449a <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8004490:	23ae      	movs	r3, #174	@ 0xae
 8004492:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8004494:	4b05      	ldr	r3, [pc, #20]	@ (80044ac <ssd1306_SetDisplayOn+0x38>)
 8004496:	2200      	movs	r2, #0
 8004498:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 800449a:	7bfb      	ldrb	r3, [r7, #15]
 800449c:	4618      	mov	r0, r3
 800449e:	f7ff fdbb 	bl	8004018 <ssd1306_WriteCommand>
}
 80044a2:	bf00      	nop
 80044a4:	3710      	adds	r7, #16
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bd80      	pop	{r7, pc}
 80044aa:	bf00      	nop
 80044ac:	20000774 	.word	0x20000774

080044b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80044b6:	4b0f      	ldr	r3, [pc, #60]	@ (80044f4 <HAL_MspInit+0x44>)
 80044b8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044ba:	4a0e      	ldr	r2, [pc, #56]	@ (80044f4 <HAL_MspInit+0x44>)
 80044bc:	f043 0301 	orr.w	r3, r3, #1
 80044c0:	6613      	str	r3, [r2, #96]	@ 0x60
 80044c2:	4b0c      	ldr	r3, [pc, #48]	@ (80044f4 <HAL_MspInit+0x44>)
 80044c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	607b      	str	r3, [r7, #4]
 80044cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80044ce:	4b09      	ldr	r3, [pc, #36]	@ (80044f4 <HAL_MspInit+0x44>)
 80044d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044d2:	4a08      	ldr	r2, [pc, #32]	@ (80044f4 <HAL_MspInit+0x44>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d8:	6593      	str	r3, [r2, #88]	@ 0x58
 80044da:	4b06      	ldr	r3, [pc, #24]	@ (80044f4 <HAL_MspInit+0x44>)
 80044dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044e2:	603b      	str	r3, [r7, #0]
 80044e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80044e6:	bf00      	nop
 80044e8:	370c      	adds	r7, #12
 80044ea:	46bd      	mov	sp, r7
 80044ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f0:	4770      	bx	lr
 80044f2:	bf00      	nop
 80044f4:	40021000 	.word	0x40021000

080044f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80044f8:	b480      	push	{r7}
 80044fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80044fc:	bf00      	nop
 80044fe:	e7fd      	b.n	80044fc <NMI_Handler+0x4>

08004500 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004500:	b480      	push	{r7}
 8004502:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004504:	bf00      	nop
 8004506:	e7fd      	b.n	8004504 <HardFault_Handler+0x4>

08004508 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004508:	b480      	push	{r7}
 800450a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800450c:	bf00      	nop
 800450e:	e7fd      	b.n	800450c <MemManage_Handler+0x4>

08004510 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004514:	bf00      	nop
 8004516:	e7fd      	b.n	8004514 <BusFault_Handler+0x4>

08004518 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800451c:	bf00      	nop
 800451e:	e7fd      	b.n	800451c <UsageFault_Handler+0x4>

08004520 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004520:	b480      	push	{r7}
 8004522:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004524:	bf00      	nop
 8004526:	46bd      	mov	sp, r7
 8004528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452c:	4770      	bx	lr

0800452e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800452e:	b480      	push	{r7}
 8004530:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004532:	bf00      	nop
 8004534:	46bd      	mov	sp, r7
 8004536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453a:	4770      	bx	lr

0800453c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800453c:	b480      	push	{r7}
 800453e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004540:	bf00      	nop
 8004542:	46bd      	mov	sp, r7
 8004544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004548:	4770      	bx	lr

0800454a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800454a:	b580      	push	{r7, lr}
 800454c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */
  HAL_SYSTICK_IRQHandler();
 800454e:	f000 fce6 	bl	8004f1e <HAL_SYSTICK_IRQHandler>
  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004552:	f000 fb8f 	bl	8004c74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004556:	bf00      	nop
 8004558:	bd80      	pop	{r7, pc}
	...

0800455c <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8004560:	4802      	ldr	r0, [pc, #8]	@ (800456c <DMA1_Channel5_IRQHandler+0x10>)
 8004562:	f000 fddc 	bl	800511e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8004566:	bf00      	nop
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	20000818 	.word	0x20000818

08004570 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(BTN4_Pin);
 8004574:	2020      	movs	r0, #32
 8004576:	f001 f843 	bl	8005600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN3_Pin);
 800457a:	2040      	movs	r0, #64	@ 0x40
 800457c:	f001 f840 	bl	8005600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN2_Pin);
 8004580:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8004584:	f001 f83c 	bl	8005600 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BTN1_Pin);
 8004588:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800458c:	f001 f838 	bl	8005600 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004590:	bf00      	nop
 8004592:	bd80      	pop	{r7, pc}

08004594 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8004598:	4802      	ldr	r0, [pc, #8]	@ (80045a4 <TIM1_CC_IRQHandler+0x10>)
 800459a:	f004 f99d 	bl	80088d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800459e:	bf00      	nop
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	20000780 	.word	0x20000780

080045a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80045a8:	b480      	push	{r7}
 80045aa:	af00      	add	r7, sp, #0
  return 1;
 80045ac:	2301      	movs	r3, #1
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	46bd      	mov	sp, r7
 80045b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b6:	4770      	bx	lr

080045b8 <_kill>:

int _kill(int pid, int sig)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
 80045c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80045c2:	f007 f9d9 	bl	800b978 <__errno>
 80045c6:	4603      	mov	r3, r0
 80045c8:	2216      	movs	r2, #22
 80045ca:	601a      	str	r2, [r3, #0]
  return -1;
 80045cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80045d0:	4618      	mov	r0, r3
 80045d2:	3708      	adds	r7, #8
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bd80      	pop	{r7, pc}

080045d8 <_exit>:

void _exit (int status)
{
 80045d8:	b580      	push	{r7, lr}
 80045da:	b082      	sub	sp, #8
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80045e0:	f04f 31ff 	mov.w	r1, #4294967295
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f7ff ffe7 	bl	80045b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80045ea:	bf00      	nop
 80045ec:	e7fd      	b.n	80045ea <_exit+0x12>

080045ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b086      	sub	sp, #24
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	60f8      	str	r0, [r7, #12]
 80045f6:	60b9      	str	r1, [r7, #8]
 80045f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80045fa:	2300      	movs	r3, #0
 80045fc:	617b      	str	r3, [r7, #20]
 80045fe:	e00a      	b.n	8004616 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004600:	f3af 8000 	nop.w
 8004604:	4601      	mov	r1, r0
 8004606:	68bb      	ldr	r3, [r7, #8]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	60ba      	str	r2, [r7, #8]
 800460c:	b2ca      	uxtb	r2, r1
 800460e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004610:	697b      	ldr	r3, [r7, #20]
 8004612:	3301      	adds	r3, #1
 8004614:	617b      	str	r3, [r7, #20]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	429a      	cmp	r2, r3
 800461c:	dbf0      	blt.n	8004600 <_read+0x12>
  }

  return len;
 800461e:	687b      	ldr	r3, [r7, #4]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3718      	adds	r7, #24
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004628:	b580      	push	{r7, lr}
 800462a:	b086      	sub	sp, #24
 800462c:	af00      	add	r7, sp, #0
 800462e:	60f8      	str	r0, [r7, #12]
 8004630:	60b9      	str	r1, [r7, #8]
 8004632:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
 8004638:	e009      	b.n	800464e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800463a:	68bb      	ldr	r3, [r7, #8]
 800463c:	1c5a      	adds	r2, r3, #1
 800463e:	60ba      	str	r2, [r7, #8]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	4618      	mov	r0, r3
 8004644:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004648:	697b      	ldr	r3, [r7, #20]
 800464a:	3301      	adds	r3, #1
 800464c:	617b      	str	r3, [r7, #20]
 800464e:	697a      	ldr	r2, [r7, #20]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	429a      	cmp	r2, r3
 8004654:	dbf1      	blt.n	800463a <_write+0x12>
  }
  return len;
 8004656:	687b      	ldr	r3, [r7, #4]
}
 8004658:	4618      	mov	r0, r3
 800465a:	3718      	adds	r7, #24
 800465c:	46bd      	mov	sp, r7
 800465e:	bd80      	pop	{r7, pc}

08004660 <_close>:

int _close(int file)
{
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
 8004666:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004668:	f04f 33ff 	mov.w	r3, #4294967295
}
 800466c:	4618      	mov	r0, r3
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
 8004680:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004682:	683b      	ldr	r3, [r7, #0]
 8004684:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004688:	605a      	str	r2, [r3, #4]
  return 0;
 800468a:	2300      	movs	r3, #0
}
 800468c:	4618      	mov	r0, r3
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <_isatty>:

int _isatty(int file)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80046a0:	2301      	movs	r3, #1
}
 80046a2:	4618      	mov	r0, r3
 80046a4:	370c      	adds	r7, #12
 80046a6:	46bd      	mov	sp, r7
 80046a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ac:	4770      	bx	lr

080046ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80046ae:	b480      	push	{r7}
 80046b0:	b085      	sub	sp, #20
 80046b2:	af00      	add	r7, sp, #0
 80046b4:	60f8      	str	r0, [r7, #12]
 80046b6:	60b9      	str	r1, [r7, #8]
 80046b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	3714      	adds	r7, #20
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80046d0:	4a14      	ldr	r2, [pc, #80]	@ (8004724 <_sbrk+0x5c>)
 80046d2:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <_sbrk+0x60>)
 80046d4:	1ad3      	subs	r3, r2, r3
 80046d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80046dc:	4b13      	ldr	r3, [pc, #76]	@ (800472c <_sbrk+0x64>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d102      	bne.n	80046ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80046e4:	4b11      	ldr	r3, [pc, #68]	@ (800472c <_sbrk+0x64>)
 80046e6:	4a12      	ldr	r2, [pc, #72]	@ (8004730 <_sbrk+0x68>)
 80046e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80046ea:	4b10      	ldr	r3, [pc, #64]	@ (800472c <_sbrk+0x64>)
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	4413      	add	r3, r2
 80046f2:	693a      	ldr	r2, [r7, #16]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d207      	bcs.n	8004708 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80046f8:	f007 f93e 	bl	800b978 <__errno>
 80046fc:	4603      	mov	r3, r0
 80046fe:	220c      	movs	r2, #12
 8004700:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004702:	f04f 33ff 	mov.w	r3, #4294967295
 8004706:	e009      	b.n	800471c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004708:	4b08      	ldr	r3, [pc, #32]	@ (800472c <_sbrk+0x64>)
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800470e:	4b07      	ldr	r3, [pc, #28]	@ (800472c <_sbrk+0x64>)
 8004710:	681a      	ldr	r2, [r3, #0]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4413      	add	r3, r2
 8004716:	4a05      	ldr	r2, [pc, #20]	@ (800472c <_sbrk+0x64>)
 8004718:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800471a:	68fb      	ldr	r3, [r7, #12]
}
 800471c:	4618      	mov	r0, r3
 800471e:	3718      	adds	r7, #24
 8004720:	46bd      	mov	sp, r7
 8004722:	bd80      	pop	{r7, pc}
 8004724:	20018000 	.word	0x20018000
 8004728:	00000400 	.word	0x00000400
 800472c:	2000077c 	.word	0x2000077c
 8004730:	20000a40 	.word	0x20000a40

08004734 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8004734:	b480      	push	{r7}
 8004736:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8004738:	4b06      	ldr	r3, [pc, #24]	@ (8004754 <SystemInit+0x20>)
 800473a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800473e:	4a05      	ldr	r2, [pc, #20]	@ (8004754 <SystemInit+0x20>)
 8004740:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004744:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8004748:	bf00      	nop
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr
 8004752:	bf00      	nop
 8004754:	e000ed00 	.word	0xe000ed00

08004758 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8004758:	b580      	push	{r7, lr}
 800475a:	b088      	sub	sp, #32
 800475c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800475e:	f107 0314 	add.w	r3, r7, #20
 8004762:	2200      	movs	r2, #0
 8004764:	601a      	str	r2, [r3, #0]
 8004766:	605a      	str	r2, [r3, #4]
 8004768:	609a      	str	r2, [r3, #8]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800476a:	1d3b      	adds	r3, r7, #4
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
 8004770:	605a      	str	r2, [r3, #4]
 8004772:	609a      	str	r2, [r3, #8]
 8004774:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8004776:	4b23      	ldr	r3, [pc, #140]	@ (8004804 <MX_TIM1_Init+0xac>)
 8004778:	4a23      	ldr	r2, [pc, #140]	@ (8004808 <MX_TIM1_Init+0xb0>)
 800477a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 80-1;
 800477c:	4b21      	ldr	r3, [pc, #132]	@ (8004804 <MX_TIM1_Init+0xac>)
 800477e:	224f      	movs	r2, #79	@ 0x4f
 8004780:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004782:	4b20      	ldr	r3, [pc, #128]	@ (8004804 <MX_TIM1_Init+0xac>)
 8004784:	2200      	movs	r2, #0
 8004786:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8004788:	4b1e      	ldr	r3, [pc, #120]	@ (8004804 <MX_TIM1_Init+0xac>)
 800478a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 800478e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8004790:	4b1c      	ldr	r3, [pc, #112]	@ (8004804 <MX_TIM1_Init+0xac>)
 8004792:	2200      	movs	r2, #0
 8004794:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8004796:	4b1b      	ldr	r3, [pc, #108]	@ (8004804 <MX_TIM1_Init+0xac>)
 8004798:	2200      	movs	r2, #0
 800479a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800479c:	4b19      	ldr	r3, [pc, #100]	@ (8004804 <MX_TIM1_Init+0xac>)
 800479e:	2200      	movs	r2, #0
 80047a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 80047a2:	4818      	ldr	r0, [pc, #96]	@ (8004804 <MX_TIM1_Init+0xac>)
 80047a4:	f003 fef7 	bl	8008596 <HAL_TIM_IC_Init>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d001      	beq.n	80047b2 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 80047ae:	f7ff fad9 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80047b2:	2300      	movs	r3, #0
 80047b4:	617b      	str	r3, [r7, #20]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80047b6:	2300      	movs	r3, #0
 80047b8:	61bb      	str	r3, [r7, #24]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80047be:	f107 0314 	add.w	r3, r7, #20
 80047c2:	4619      	mov	r1, r3
 80047c4:	480f      	ldr	r0, [pc, #60]	@ (8004804 <MX_TIM1_Init+0xac>)
 80047c6:	f005 f903 	bl	80099d0 <HAL_TIMEx_MasterConfigSynchronization>
 80047ca:	4603      	mov	r3, r0
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d001      	beq.n	80047d4 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 80047d0:	f7ff fac8 	bl	8003d64 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80047d4:	2300      	movs	r3, #0
 80047d6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80047d8:	2301      	movs	r3, #1
 80047da:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
  sConfigIC.ICFilter = 0;
 80047e0:	2300      	movs	r3, #0
 80047e2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80047e4:	1d3b      	adds	r3, r7, #4
 80047e6:	2200      	movs	r2, #0
 80047e8:	4619      	mov	r1, r3
 80047ea:	4806      	ldr	r0, [pc, #24]	@ (8004804 <MX_TIM1_Init+0xac>)
 80047ec:	f004 f97b 	bl	8008ae6 <HAL_TIM_IC_ConfigChannel>
 80047f0:	4603      	mov	r3, r0
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d001      	beq.n	80047fa <MX_TIM1_Init+0xa2>
  {
    Error_Handler();
 80047f6:	f7ff fab5 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80047fa:	bf00      	nop
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
 8004802:	bf00      	nop
 8004804:	20000780 	.word	0x20000780
 8004808:	40012c00 	.word	0x40012c00

0800480c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08a      	sub	sp, #40	@ 0x28
 8004810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8004812:	f107 031c 	add.w	r3, r7, #28
 8004816:	2200      	movs	r2, #0
 8004818:	601a      	str	r2, [r3, #0]
 800481a:	605a      	str	r2, [r3, #4]
 800481c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800481e:	463b      	mov	r3, r7
 8004820:	2200      	movs	r2, #0
 8004822:	601a      	str	r2, [r3, #0]
 8004824:	605a      	str	r2, [r3, #4]
 8004826:	609a      	str	r2, [r3, #8]
 8004828:	60da      	str	r2, [r3, #12]
 800482a:	611a      	str	r2, [r3, #16]
 800482c:	615a      	str	r2, [r3, #20]
 800482e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8004830:	4b21      	ldr	r3, [pc, #132]	@ (80048b8 <MX_TIM2_Init+0xac>)
 8004832:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8004836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8004838:	4b1f      	ldr	r3, [pc, #124]	@ (80048b8 <MX_TIM2_Init+0xac>)
 800483a:	2200      	movs	r2, #0
 800483c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800483e:	4b1e      	ldr	r3, [pc, #120]	@ (80048b8 <MX_TIM2_Init+0xac>)
 8004840:	2200      	movs	r2, #0
 8004842:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8004844:	4b1c      	ldr	r3, [pc, #112]	@ (80048b8 <MX_TIM2_Init+0xac>)
 8004846:	2263      	movs	r2, #99	@ 0x63
 8004848:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800484a:	4b1b      	ldr	r3, [pc, #108]	@ (80048b8 <MX_TIM2_Init+0xac>)
 800484c:	2200      	movs	r2, #0
 800484e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004850:	4b19      	ldr	r3, [pc, #100]	@ (80048b8 <MX_TIM2_Init+0xac>)
 8004852:	2200      	movs	r2, #0
 8004854:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8004856:	4818      	ldr	r0, [pc, #96]	@ (80048b8 <MX_TIM2_Init+0xac>)
 8004858:	f003 fe46 	bl	80084e8 <HAL_TIM_PWM_Init>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d001      	beq.n	8004866 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 8004862:	f7ff fa7f 	bl	8003d64 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800486a:	2300      	movs	r3, #0
 800486c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800486e:	f107 031c 	add.w	r3, r7, #28
 8004872:	4619      	mov	r1, r3
 8004874:	4810      	ldr	r0, [pc, #64]	@ (80048b8 <MX_TIM2_Init+0xac>)
 8004876:	f005 f8ab 	bl	80099d0 <HAL_TIMEx_MasterConfigSynchronization>
 800487a:	4603      	mov	r3, r0
 800487c:	2b00      	cmp	r3, #0
 800487e:	d001      	beq.n	8004884 <MX_TIM2_Init+0x78>
  {
    Error_Handler();
 8004880:	f7ff fa70 	bl	8003d64 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8004884:	2360      	movs	r3, #96	@ 0x60
 8004886:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8004888:	2300      	movs	r3, #0
 800488a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800488c:	2300      	movs	r3, #0
 800488e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8004890:	2300      	movs	r3, #0
 8004892:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8004894:	463b      	mov	r3, r7
 8004896:	2200      	movs	r2, #0
 8004898:	4619      	mov	r1, r3
 800489a:	4807      	ldr	r0, [pc, #28]	@ (80048b8 <MX_TIM2_Init+0xac>)
 800489c:	f004 f9c0 	bl	8008c20 <HAL_TIM_PWM_ConfigChannel>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d001      	beq.n	80048aa <MX_TIM2_Init+0x9e>
  {
    Error_Handler();
 80048a6:	f7ff fa5d 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80048aa:	4803      	ldr	r0, [pc, #12]	@ (80048b8 <MX_TIM2_Init+0xac>)
 80048ac:	f000 f89c 	bl	80049e8 <HAL_TIM_MspPostInit>

}
 80048b0:	bf00      	nop
 80048b2:	3728      	adds	r7, #40	@ 0x28
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	200007cc 	.word	0x200007cc

080048bc <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	@ 0x28
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80048c4:	f107 0314 	add.w	r3, r7, #20
 80048c8:	2200      	movs	r2, #0
 80048ca:	601a      	str	r2, [r3, #0]
 80048cc:	605a      	str	r2, [r3, #4]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	60da      	str	r2, [r3, #12]
 80048d2:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM1)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a1c      	ldr	r2, [pc, #112]	@ (800494c <HAL_TIM_IC_MspInit+0x90>)
 80048da:	4293      	cmp	r3, r2
 80048dc:	d131      	bne.n	8004942 <HAL_TIM_IC_MspInit+0x86>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80048de:	4b1c      	ldr	r3, [pc, #112]	@ (8004950 <HAL_TIM_IC_MspInit+0x94>)
 80048e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004950 <HAL_TIM_IC_MspInit+0x94>)
 80048e4:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80048e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80048ea:	4b19      	ldr	r3, [pc, #100]	@ (8004950 <HAL_TIM_IC_MspInit+0x94>)
 80048ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80048ee:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80048f2:	613b      	str	r3, [r7, #16]
 80048f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048f6:	4b16      	ldr	r3, [pc, #88]	@ (8004950 <HAL_TIM_IC_MspInit+0x94>)
 80048f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fa:	4a15      	ldr	r2, [pc, #84]	@ (8004950 <HAL_TIM_IC_MspInit+0x94>)
 80048fc:	f043 0301 	orr.w	r3, r3, #1
 8004900:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004902:	4b13      	ldr	r3, [pc, #76]	@ (8004950 <HAL_TIM_IC_MspInit+0x94>)
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	f003 0301 	and.w	r3, r3, #1
 800490a:	60fb      	str	r3, [r7, #12]
 800490c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800490e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004912:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004914:	2302      	movs	r3, #2
 8004916:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004918:	2300      	movs	r3, #0
 800491a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800491c:	2300      	movs	r3, #0
 800491e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004920:	2301      	movs	r3, #1
 8004922:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004924:	f107 0314 	add.w	r3, r7, #20
 8004928:	4619      	mov	r1, r3
 800492a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800492e:	f000 fca5 	bl	800527c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8004932:	2200      	movs	r2, #0
 8004934:	2100      	movs	r1, #0
 8004936:	201b      	movs	r0, #27
 8004938:	f000 fabb 	bl	8004eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800493c:	201b      	movs	r0, #27
 800493e:	f000 fad4 	bl	8004eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8004942:	bf00      	nop
 8004944:	3728      	adds	r7, #40	@ 0x28
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
 800494a:	bf00      	nop
 800494c:	40012c00 	.word	0x40012c00
 8004950:	40021000 	.word	0x40021000

08004954 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8004954:	b580      	push	{r7, lr}
 8004956:	b084      	sub	sp, #16
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004964:	d136      	bne.n	80049d4 <HAL_TIM_PWM_MspInit+0x80>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004966:	4b1d      	ldr	r3, [pc, #116]	@ (80049dc <HAL_TIM_PWM_MspInit+0x88>)
 8004968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800496a:	4a1c      	ldr	r2, [pc, #112]	@ (80049dc <HAL_TIM_PWM_MspInit+0x88>)
 800496c:	f043 0301 	orr.w	r3, r3, #1
 8004970:	6593      	str	r3, [r2, #88]	@ 0x58
 8004972:	4b1a      	ldr	r3, [pc, #104]	@ (80049dc <HAL_TIM_PWM_MspInit+0x88>)
 8004974:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004976:	f003 0301 	and.w	r3, r3, #1
 800497a:	60fb      	str	r3, [r7, #12]
 800497c:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Channel5;
 800497e:	4b18      	ldr	r3, [pc, #96]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8004980:	4a18      	ldr	r2, [pc, #96]	@ (80049e4 <HAL_TIM_PWM_MspInit+0x90>)
 8004982:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Request = DMA_REQUEST_4;
 8004984:	4b16      	ldr	r3, [pc, #88]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8004986:	2204      	movs	r2, #4
 8004988:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800498a:	4b15      	ldr	r3, [pc, #84]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 800498c:	2210      	movs	r2, #16
 800498e:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004990:	4b13      	ldr	r3, [pc, #76]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8004992:	2200      	movs	r2, #0
 8004994:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004996:	4b12      	ldr	r3, [pc, #72]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 8004998:	2280      	movs	r2, #128	@ 0x80
 800499a:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800499c:	4b10      	ldr	r3, [pc, #64]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 800499e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80049a2:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80049a4:	4b0e      	ldr	r3, [pc, #56]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80049a6:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80049aa:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 80049ac:	4b0c      	ldr	r3, [pc, #48]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80049ae:	2200      	movs	r2, #0
 80049b0:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 80049b2:	4b0b      	ldr	r3, [pc, #44]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80049b4:	2200      	movs	r2, #0
 80049b6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 80049b8:	4809      	ldr	r0, [pc, #36]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80049ba:	f000 fab7 	bl	8004f2c <HAL_DMA_Init>
 80049be:	4603      	mov	r3, r0
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d001      	beq.n	80049c8 <HAL_TIM_PWM_MspInit+0x74>
    {
      Error_Handler();
 80049c4:	f7ff f9ce 	bl	8003d64 <Error_Handler>
    }

    __HAL_LINKDMA(tim_pwmHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a05      	ldr	r2, [pc, #20]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80049cc:	625a      	str	r2, [r3, #36]	@ 0x24
 80049ce:	4a04      	ldr	r2, [pc, #16]	@ (80049e0 <HAL_TIM_PWM_MspInit+0x8c>)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80049d4:	bf00      	nop
 80049d6:	3710      	adds	r7, #16
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000
 80049e0:	20000818 	.word	0x20000818
 80049e4:	40020058 	.word	0x40020058

080049e8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b088      	sub	sp, #32
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80049f0:	f107 030c 	add.w	r3, r7, #12
 80049f4:	2200      	movs	r2, #0
 80049f6:	601a      	str	r2, [r3, #0]
 80049f8:	605a      	str	r2, [r3, #4]
 80049fa:	609a      	str	r2, [r3, #8]
 80049fc:	60da      	str	r2, [r3, #12]
 80049fe:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a08:	d11c      	bne.n	8004a44 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004a0a:	4b10      	ldr	r3, [pc, #64]	@ (8004a4c <HAL_TIM_MspPostInit+0x64>)
 8004a0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a0e:	4a0f      	ldr	r2, [pc, #60]	@ (8004a4c <HAL_TIM_MspPostInit+0x64>)
 8004a10:	f043 0301 	orr.w	r3, r3, #1
 8004a14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004a16:	4b0d      	ldr	r3, [pc, #52]	@ (8004a4c <HAL_TIM_MspPostInit+0x64>)
 8004a18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a1a:	f003 0301 	and.w	r3, r3, #1
 8004a1e:	60bb      	str	r3, [r7, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004a22:	2301      	movs	r3, #1
 8004a24:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a26:	2302      	movs	r3, #2
 8004a28:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004a2e:	2300      	movs	r3, #0
 8004a30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8004a32:	2301      	movs	r3, #1
 8004a34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004a36:	f107 030c 	add.w	r3, r7, #12
 8004a3a:	4619      	mov	r1, r3
 8004a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004a40:	f000 fc1c 	bl	800527c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8004a44:	bf00      	nop
 8004a46:	3720      	adds	r7, #32
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bd80      	pop	{r7, pc}
 8004a4c:	40021000 	.word	0x40021000

08004a50 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004a54:	4b14      	ldr	r3, [pc, #80]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a56:	4a15      	ldr	r2, [pc, #84]	@ (8004aac <MX_USART2_UART_Init+0x5c>)
 8004a58:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8004a5a:	4b13      	ldr	r3, [pc, #76]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a5c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a60:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8004a62:	4b11      	ldr	r3, [pc, #68]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004a68:	4b0f      	ldr	r3, [pc, #60]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004a6e:	4b0e      	ldr	r3, [pc, #56]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a70:	2200      	movs	r2, #0
 8004a72:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004a74:	4b0c      	ldr	r3, [pc, #48]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a76:	220c      	movs	r2, #12
 8004a78:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a7a:	4b0b      	ldr	r3, [pc, #44]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a7c:	2200      	movs	r2, #0
 8004a7e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a80:	4b09      	ldr	r3, [pc, #36]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a82:	2200      	movs	r2, #0
 8004a84:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004a86:	4b08      	ldr	r3, [pc, #32]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a88:	2200      	movs	r2, #0
 8004a8a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004a8c:	4b06      	ldr	r3, [pc, #24]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a8e:	2200      	movs	r2, #0
 8004a90:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8004a92:	4805      	ldr	r0, [pc, #20]	@ (8004aa8 <MX_USART2_UART_Init+0x58>)
 8004a94:	f005 f867 	bl	8009b66 <HAL_UART_Init>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d001      	beq.n	8004aa2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8004a9e:	f7ff f961 	bl	8003d64 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004aa2:	bf00      	nop
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	20000860 	.word	0x20000860
 8004aac:	40004400 	.word	0x40004400

08004ab0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b0ac      	sub	sp, #176	@ 0xb0
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ab8:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004abc:	2200      	movs	r2, #0
 8004abe:	601a      	str	r2, [r3, #0]
 8004ac0:	605a      	str	r2, [r3, #4]
 8004ac2:	609a      	str	r2, [r3, #8]
 8004ac4:	60da      	str	r2, [r3, #12]
 8004ac6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	2288      	movs	r2, #136	@ 0x88
 8004ace:	2100      	movs	r1, #0
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	f006 feaa 	bl	800b82a <memset>
  if(uartHandle->Instance==USART2)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a21      	ldr	r2, [pc, #132]	@ (8004b60 <HAL_UART_MspInit+0xb0>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d13b      	bne.n	8004b58 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004ae0:	2302      	movs	r3, #2
 8004ae2:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	653b      	str	r3, [r7, #80]	@ 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004ae8:	f107 0314 	add.w	r3, r7, #20
 8004aec:	4618      	mov	r0, r3
 8004aee:	f002 fcc1 	bl	8007474 <HAL_RCCEx_PeriphCLKConfig>
 8004af2:	4603      	mov	r3, r0
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d001      	beq.n	8004afc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004af8:	f7ff f934 	bl	8003d64 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004afc:	4b19      	ldr	r3, [pc, #100]	@ (8004b64 <HAL_UART_MspInit+0xb4>)
 8004afe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b00:	4a18      	ldr	r2, [pc, #96]	@ (8004b64 <HAL_UART_MspInit+0xb4>)
 8004b02:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b06:	6593      	str	r3, [r2, #88]	@ 0x58
 8004b08:	4b16      	ldr	r3, [pc, #88]	@ (8004b64 <HAL_UART_MspInit+0xb4>)
 8004b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004b0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004b10:	613b      	str	r3, [r7, #16]
 8004b12:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b14:	4b13      	ldr	r3, [pc, #76]	@ (8004b64 <HAL_UART_MspInit+0xb4>)
 8004b16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b18:	4a12      	ldr	r2, [pc, #72]	@ (8004b64 <HAL_UART_MspInit+0xb4>)
 8004b1a:	f043 0301 	orr.w	r3, r3, #1
 8004b1e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8004b20:	4b10      	ldr	r3, [pc, #64]	@ (8004b64 <HAL_UART_MspInit+0xb4>)
 8004b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004b24:	f003 0301 	and.w	r3, r3, #1
 8004b28:	60fb      	str	r3, [r7, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004b2c:	230c      	movs	r3, #12
 8004b2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b32:	2302      	movs	r3, #2
 8004b34:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b38:	2300      	movs	r3, #0
 8004b3a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b3e:	2303      	movs	r3, #3
 8004b40:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004b44:	2307      	movs	r3, #7
 8004b46:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b4a:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8004b4e:	4619      	mov	r1, r3
 8004b50:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8004b54:	f000 fb92 	bl	800527c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8004b58:	bf00      	nop
 8004b5a:	37b0      	adds	r7, #176	@ 0xb0
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	bd80      	pop	{r7, pc}
 8004b60:	40004400 	.word	0x40004400
 8004b64:	40021000 	.word	0x40021000

08004b68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8004b68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004ba0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8004b6c:	f7ff fde2 	bl	8004734 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004b70:	480c      	ldr	r0, [pc, #48]	@ (8004ba4 <LoopForever+0x6>)
  ldr r1, =_edata
 8004b72:	490d      	ldr	r1, [pc, #52]	@ (8004ba8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004b74:	4a0d      	ldr	r2, [pc, #52]	@ (8004bac <LoopForever+0xe>)
  movs r3, #0
 8004b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b78:	e002      	b.n	8004b80 <LoopCopyDataInit>

08004b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b7e:	3304      	adds	r3, #4

08004b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b84:	d3f9      	bcc.n	8004b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b86:	4a0a      	ldr	r2, [pc, #40]	@ (8004bb0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004b88:	4c0a      	ldr	r4, [pc, #40]	@ (8004bb4 <LoopForever+0x16>)
  movs r3, #0
 8004b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b8c:	e001      	b.n	8004b92 <LoopFillZerobss>

08004b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b90:	3204      	adds	r2, #4

08004b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b94:	d3fb      	bcc.n	8004b8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004b96:	f006 fef5 	bl	800b984 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004b9a:	f7fe f8b9 	bl	8002d10 <main>

08004b9e <LoopForever>:

LoopForever:
    b LoopForever
 8004b9e:	e7fe      	b.n	8004b9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8004ba0:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8004ba4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004ba8:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8004bac:	0800e5a0 	.word	0x0800e5a0
  ldr r2, =_sbss
 8004bb0:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8004bb4:	20000a3c 	.word	0x20000a3c

08004bb8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004bb8:	e7fe      	b.n	8004bb8 <ADC1_2_IRQHandler>
	...

08004bbc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004bbc:	b580      	push	{r7, lr}
 8004bbe:	b082      	sub	sp, #8
 8004bc0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bc6:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf8 <HAL_Init+0x3c>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a0b      	ldr	r2, [pc, #44]	@ (8004bf8 <HAL_Init+0x3c>)
 8004bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bd0:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bd2:	2003      	movs	r0, #3
 8004bd4:	f000 f962 	bl	8004e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004bd8:	2000      	movs	r0, #0
 8004bda:	f000 f80f 	bl	8004bfc <HAL_InitTick>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d002      	beq.n	8004bea <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8004be4:	2301      	movs	r3, #1
 8004be6:	71fb      	strb	r3, [r7, #7]
 8004be8:	e001      	b.n	8004bee <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004bea:	f7ff fc61 	bl	80044b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004bee:	79fb      	ldrb	r3, [r7, #7]
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3708      	adds	r7, #8
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}
 8004bf8:	40022000 	.word	0x40022000

08004bfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004c04:	2300      	movs	r3, #0
 8004c06:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8004c08:	4b17      	ldr	r3, [pc, #92]	@ (8004c68 <HAL_InitTick+0x6c>)
 8004c0a:	781b      	ldrb	r3, [r3, #0]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d023      	beq.n	8004c58 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8004c10:	4b16      	ldr	r3, [pc, #88]	@ (8004c6c <HAL_InitTick+0x70>)
 8004c12:	681a      	ldr	r2, [r3, #0]
 8004c14:	4b14      	ldr	r3, [pc, #80]	@ (8004c68 <HAL_InitTick+0x6c>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	4619      	mov	r1, r3
 8004c1a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004c1e:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c26:	4618      	mov	r0, r3
 8004c28:	f000 f96d 	bl	8004f06 <HAL_SYSTICK_Config>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d10f      	bne.n	8004c52 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2b0f      	cmp	r3, #15
 8004c36:	d809      	bhi.n	8004c4c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c38:	2200      	movs	r2, #0
 8004c3a:	6879      	ldr	r1, [r7, #4]
 8004c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8004c40:	f000 f937 	bl	8004eb2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c44:	4a0a      	ldr	r2, [pc, #40]	@ (8004c70 <HAL_InitTick+0x74>)
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6013      	str	r3, [r2, #0]
 8004c4a:	e007      	b.n	8004c5c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	73fb      	strb	r3, [r7, #15]
 8004c50:	e004      	b.n	8004c5c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8004c52:	2301      	movs	r3, #1
 8004c54:	73fb      	strb	r3, [r7, #15]
 8004c56:	e001      	b.n	8004c5c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c5e:	4618      	mov	r0, r3
 8004c60:	3710      	adds	r7, #16
 8004c62:	46bd      	mov	sp, r7
 8004c64:	bd80      	pop	{r7, pc}
 8004c66:	bf00      	nop
 8004c68:	2000000c 	.word	0x2000000c
 8004c6c:	20000004 	.word	0x20000004
 8004c70:	20000008 	.word	0x20000008

08004c74 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c74:	b480      	push	{r7}
 8004c76:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004c78:	4b06      	ldr	r3, [pc, #24]	@ (8004c94 <HAL_IncTick+0x20>)
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	461a      	mov	r2, r3
 8004c7e:	4b06      	ldr	r3, [pc, #24]	@ (8004c98 <HAL_IncTick+0x24>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4413      	add	r3, r2
 8004c84:	4a04      	ldr	r2, [pc, #16]	@ (8004c98 <HAL_IncTick+0x24>)
 8004c86:	6013      	str	r3, [r2, #0]
}
 8004c88:	bf00      	nop
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	2000000c 	.word	0x2000000c
 8004c98:	200008e8 	.word	0x200008e8

08004c9c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	af00      	add	r7, sp, #0
  return uwTick;
 8004ca0:	4b03      	ldr	r3, [pc, #12]	@ (8004cb0 <HAL_GetTick+0x14>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
}
 8004ca4:	4618      	mov	r0, r3
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cac:	4770      	bx	lr
 8004cae:	bf00      	nop
 8004cb0:	200008e8 	.word	0x200008e8

08004cb4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004cb4:	b580      	push	{r7, lr}
 8004cb6:	b084      	sub	sp, #16
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004cbc:	f7ff ffee 	bl	8004c9c <HAL_GetTick>
 8004cc0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ccc:	d005      	beq.n	8004cda <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004cce:	4b0a      	ldr	r3, [pc, #40]	@ (8004cf8 <HAL_Delay+0x44>)
 8004cd0:	781b      	ldrb	r3, [r3, #0]
 8004cd2:	461a      	mov	r2, r3
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	4413      	add	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004cda:	bf00      	nop
 8004cdc:	f7ff ffde 	bl	8004c9c <HAL_GetTick>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	1ad3      	subs	r3, r2, r3
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	429a      	cmp	r2, r3
 8004cea:	d8f7      	bhi.n	8004cdc <HAL_Delay+0x28>
  {
  }
}
 8004cec:	bf00      	nop
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	bf00      	nop
 8004cf8:	2000000c 	.word	0x2000000c

08004cfc <__NVIC_SetPriorityGrouping>:
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b085      	sub	sp, #20
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	f003 0307 	and.w	r3, r3, #7
 8004d0a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8004d40 <__NVIC_SetPriorityGrouping+0x44>)
 8004d0e:	68db      	ldr	r3, [r3, #12]
 8004d10:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d12:	68ba      	ldr	r2, [r7, #8]
 8004d14:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004d18:	4013      	ands	r3, r2
 8004d1a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d24:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004d28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d2c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d2e:	4a04      	ldr	r2, [pc, #16]	@ (8004d40 <__NVIC_SetPriorityGrouping+0x44>)
 8004d30:	68bb      	ldr	r3, [r7, #8]
 8004d32:	60d3      	str	r3, [r2, #12]
}
 8004d34:	bf00      	nop
 8004d36:	3714      	adds	r7, #20
 8004d38:	46bd      	mov	sp, r7
 8004d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3e:	4770      	bx	lr
 8004d40:	e000ed00 	.word	0xe000ed00

08004d44 <__NVIC_GetPriorityGrouping>:
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d48:	4b04      	ldr	r3, [pc, #16]	@ (8004d5c <__NVIC_GetPriorityGrouping+0x18>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	0a1b      	lsrs	r3, r3, #8
 8004d4e:	f003 0307 	and.w	r3, r3, #7
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	46bd      	mov	sp, r7
 8004d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5a:	4770      	bx	lr
 8004d5c:	e000ed00 	.word	0xe000ed00

08004d60 <__NVIC_EnableIRQ>:
{
 8004d60:	b480      	push	{r7}
 8004d62:	b083      	sub	sp, #12
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	4603      	mov	r3, r0
 8004d68:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	db0b      	blt.n	8004d8a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	f003 021f 	and.w	r2, r3, #31
 8004d78:	4907      	ldr	r1, [pc, #28]	@ (8004d98 <__NVIC_EnableIRQ+0x38>)
 8004d7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d7e:	095b      	lsrs	r3, r3, #5
 8004d80:	2001      	movs	r0, #1
 8004d82:	fa00 f202 	lsl.w	r2, r0, r2
 8004d86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8004d8a:	bf00      	nop
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
 8004d96:	bf00      	nop
 8004d98:	e000e100 	.word	0xe000e100

08004d9c <__NVIC_SetPriority>:
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b083      	sub	sp, #12
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	4603      	mov	r3, r0
 8004da4:	6039      	str	r1, [r7, #0]
 8004da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	db0a      	blt.n	8004dc6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004db0:	683b      	ldr	r3, [r7, #0]
 8004db2:	b2da      	uxtb	r2, r3
 8004db4:	490c      	ldr	r1, [pc, #48]	@ (8004de8 <__NVIC_SetPriority+0x4c>)
 8004db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dba:	0112      	lsls	r2, r2, #4
 8004dbc:	b2d2      	uxtb	r2, r2
 8004dbe:	440b      	add	r3, r1
 8004dc0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004dc4:	e00a      	b.n	8004ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	b2da      	uxtb	r2, r3
 8004dca:	4908      	ldr	r1, [pc, #32]	@ (8004dec <__NVIC_SetPriority+0x50>)
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	f003 030f 	and.w	r3, r3, #15
 8004dd2:	3b04      	subs	r3, #4
 8004dd4:	0112      	lsls	r2, r2, #4
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	440b      	add	r3, r1
 8004dda:	761a      	strb	r2, [r3, #24]
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr
 8004de8:	e000e100 	.word	0xe000e100
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <NVIC_EncodePriority>:
{
 8004df0:	b480      	push	{r7}
 8004df2:	b089      	sub	sp, #36	@ 0x24
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	60f8      	str	r0, [r7, #12]
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	f003 0307 	and.w	r3, r3, #7
 8004e02:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	f1c3 0307 	rsb	r3, r3, #7
 8004e0a:	2b04      	cmp	r3, #4
 8004e0c:	bf28      	it	cs
 8004e0e:	2304      	movcs	r3, #4
 8004e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e12:	69fb      	ldr	r3, [r7, #28]
 8004e14:	3304      	adds	r3, #4
 8004e16:	2b06      	cmp	r3, #6
 8004e18:	d902      	bls.n	8004e20 <NVIC_EncodePriority+0x30>
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	3b03      	subs	r3, #3
 8004e1e:	e000      	b.n	8004e22 <NVIC_EncodePriority+0x32>
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e24:	f04f 32ff 	mov.w	r2, #4294967295
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2e:	43da      	mvns	r2, r3
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	401a      	ands	r2, r3
 8004e34:	697b      	ldr	r3, [r7, #20]
 8004e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e38:	f04f 31ff 	mov.w	r1, #4294967295
 8004e3c:	697b      	ldr	r3, [r7, #20]
 8004e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e42:	43d9      	mvns	r1, r3
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e48:	4313      	orrs	r3, r2
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3724      	adds	r7, #36	@ 0x24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e54:	4770      	bx	lr
	...

08004e58 <SysTick_Config>:
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b082      	sub	sp, #8
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e68:	d301      	bcc.n	8004e6e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004e6a:	2301      	movs	r3, #1
 8004e6c:	e00f      	b.n	8004e8e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e6e:	4a0a      	ldr	r2, [pc, #40]	@ (8004e98 <SysTick_Config+0x40>)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	3b01      	subs	r3, #1
 8004e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e76:	210f      	movs	r1, #15
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	f7ff ff8e 	bl	8004d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e80:	4b05      	ldr	r3, [pc, #20]	@ (8004e98 <SysTick_Config+0x40>)
 8004e82:	2200      	movs	r2, #0
 8004e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e86:	4b04      	ldr	r3, [pc, #16]	@ (8004e98 <SysTick_Config+0x40>)
 8004e88:	2207      	movs	r2, #7
 8004e8a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3708      	adds	r7, #8
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	e000e010 	.word	0xe000e010

08004e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b082      	sub	sp, #8
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f7ff ff29 	bl	8004cfc <__NVIC_SetPriorityGrouping>
}
 8004eaa:	bf00      	nop
 8004eac:	3708      	adds	r7, #8
 8004eae:	46bd      	mov	sp, r7
 8004eb0:	bd80      	pop	{r7, pc}

08004eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004eb2:	b580      	push	{r7, lr}
 8004eb4:	b086      	sub	sp, #24
 8004eb6:	af00      	add	r7, sp, #0
 8004eb8:	4603      	mov	r3, r0
 8004eba:	60b9      	str	r1, [r7, #8]
 8004ebc:	607a      	str	r2, [r7, #4]
 8004ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004ec4:	f7ff ff3e 	bl	8004d44 <__NVIC_GetPriorityGrouping>
 8004ec8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004eca:	687a      	ldr	r2, [r7, #4]
 8004ecc:	68b9      	ldr	r1, [r7, #8]
 8004ece:	6978      	ldr	r0, [r7, #20]
 8004ed0:	f7ff ff8e 	bl	8004df0 <NVIC_EncodePriority>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eda:	4611      	mov	r1, r2
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7ff ff5d 	bl	8004d9c <__NVIC_SetPriority>
}
 8004ee2:	bf00      	nop
 8004ee4:	3718      	adds	r7, #24
 8004ee6:	46bd      	mov	sp, r7
 8004ee8:	bd80      	pop	{r7, pc}

08004eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004eea:	b580      	push	{r7, lr}
 8004eec:	b082      	sub	sp, #8
 8004eee:	af00      	add	r7, sp, #0
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ef8:	4618      	mov	r0, r3
 8004efa:	f7ff ff31 	bl	8004d60 <__NVIC_EnableIRQ>
}
 8004efe:	bf00      	nop
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}

08004f06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004f06:	b580      	push	{r7, lr}
 8004f08:	b082      	sub	sp, #8
 8004f0a:	af00      	add	r7, sp, #0
 8004f0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f7ff ffa2 	bl	8004e58 <SysTick_Config>
 8004f14:	4603      	mov	r3, r0
}
 8004f16:	4618      	mov	r0, r3
 8004f18:	3708      	adds	r7, #8
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <HAL_SYSTICK_IRQHandler>:
/**
  * @brief  Handle SYSTICK interrupt request.
  * @retval None
  */
void HAL_SYSTICK_IRQHandler(void)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	af00      	add	r7, sp, #0
  HAL_SYSTICK_Callback();
 8004f22:	f7fe fea9 	bl	8003c78 <HAL_SYSTICK_Callback>
}
 8004f26:	bf00      	nop
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d101      	bne.n	8004f3e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004f3a:	2301      	movs	r3, #1
 8004f3c:	e098      	b.n	8005070 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	461a      	mov	r2, r3
 8004f44:	4b4d      	ldr	r3, [pc, #308]	@ (800507c <HAL_DMA_Init+0x150>)
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d80f      	bhi.n	8004f6a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4b4b      	ldr	r3, [pc, #300]	@ (8005080 <HAL_DMA_Init+0x154>)
 8004f52:	4413      	add	r3, r2
 8004f54:	4a4b      	ldr	r2, [pc, #300]	@ (8005084 <HAL_DMA_Init+0x158>)
 8004f56:	fba2 2303 	umull	r2, r3, r2, r3
 8004f5a:	091b      	lsrs	r3, r3, #4
 8004f5c:	009a      	lsls	r2, r3, #2
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a48      	ldr	r2, [pc, #288]	@ (8005088 <HAL_DMA_Init+0x15c>)
 8004f66:	641a      	str	r2, [r3, #64]	@ 0x40
 8004f68:	e00e      	b.n	8004f88 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	461a      	mov	r2, r3
 8004f70:	4b46      	ldr	r3, [pc, #280]	@ (800508c <HAL_DMA_Init+0x160>)
 8004f72:	4413      	add	r3, r2
 8004f74:	4a43      	ldr	r2, [pc, #268]	@ (8005084 <HAL_DMA_Init+0x158>)
 8004f76:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7a:	091b      	lsrs	r3, r3, #4
 8004f7c:	009a      	lsls	r2, r3, #2
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a42      	ldr	r2, [pc, #264]	@ (8005090 <HAL_DMA_Init+0x164>)
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2202      	movs	r2, #2
 8004f8c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8004f9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004fa2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004fac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	691b      	ldr	r3, [r3, #16]
 8004fb2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004fb8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	699b      	ldr	r3, [r3, #24]
 8004fbe:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004fc4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	6a1b      	ldr	r3, [r3, #32]
 8004fca:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004fcc:	68fa      	ldr	r2, [r7, #12]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	68fa      	ldr	r2, [r7, #12]
 8004fd8:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if (hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004fe2:	d039      	beq.n	8005058 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004fe8:	4a27      	ldr	r2, [pc, #156]	@ (8005088 <HAL_DMA_Init+0x15c>)
 8004fea:	4293      	cmp	r3, r2
 8004fec:	d11a      	bne.n	8005024 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8004fee:	4b29      	ldr	r3, [pc, #164]	@ (8005094 <HAL_DMA_Init+0x168>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff6:	f003 031c 	and.w	r3, r3, #28
 8004ffa:	210f      	movs	r1, #15
 8004ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8005000:	43db      	mvns	r3, r3
 8005002:	4924      	ldr	r1, [pc, #144]	@ (8005094 <HAL_DMA_Init+0x168>)
 8005004:	4013      	ands	r3, r2
 8005006:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005008:	4b22      	ldr	r3, [pc, #136]	@ (8005094 <HAL_DMA_Init+0x168>)
 800500a:	681a      	ldr	r2, [r3, #0]
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6859      	ldr	r1, [r3, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005014:	f003 031c 	and.w	r3, r3, #28
 8005018:	fa01 f303 	lsl.w	r3, r1, r3
 800501c:	491d      	ldr	r1, [pc, #116]	@ (8005094 <HAL_DMA_Init+0x168>)
 800501e:	4313      	orrs	r3, r2
 8005020:	600b      	str	r3, [r1, #0]
 8005022:	e019      	b.n	8005058 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005024:	4b1c      	ldr	r3, [pc, #112]	@ (8005098 <HAL_DMA_Init+0x16c>)
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502c:	f003 031c 	and.w	r3, r3, #28
 8005030:	210f      	movs	r1, #15
 8005032:	fa01 f303 	lsl.w	r3, r1, r3
 8005036:	43db      	mvns	r3, r3
 8005038:	4917      	ldr	r1, [pc, #92]	@ (8005098 <HAL_DMA_Init+0x16c>)
 800503a:	4013      	ands	r3, r2
 800503c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t)(hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800503e:	4b16      	ldr	r3, [pc, #88]	@ (8005098 <HAL_DMA_Init+0x16c>)
 8005040:	681a      	ldr	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6859      	ldr	r1, [r3, #4]
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800504a:	f003 031c 	and.w	r3, r3, #28
 800504e:	fa01 f303 	lsl.w	r3, r1, r3
 8005052:	4911      	ldr	r1, [pc, #68]	@ (8005098 <HAL_DMA_Init+0x16c>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
  /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
  /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2201      	movs	r2, #1
 8005062:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 800506e:	2300      	movs	r3, #0
}
 8005070:	4618      	mov	r0, r3
 8005072:	3714      	adds	r7, #20
 8005074:	46bd      	mov	sp, r7
 8005076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507a:	4770      	bx	lr
 800507c:	40020407 	.word	0x40020407
 8005080:	bffdfff8 	.word	0xbffdfff8
 8005084:	cccccccd 	.word	0xcccccccd
 8005088:	40020000 	.word	0x40020000
 800508c:	bffdfbf8 	.word	0xbffdfbf8
 8005090:	40020400 	.word	0x40020400
 8005094:	400200a8 	.word	0x400200a8
 8005098:	400204a8 	.word	0x400204a8

0800509c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80050a4:	2300      	movs	r3, #0
 80050a6:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80050ae:	b2db      	uxtb	r3, r3
 80050b0:	2b02      	cmp	r3, #2
 80050b2:	d005      	beq.n	80050c0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2204      	movs	r2, #4
 80050b8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80050ba:	2301      	movs	r3, #1
 80050bc:	73fb      	strb	r3, [r7, #15]
 80050be:	e029      	b.n	8005114 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f022 020e 	bic.w	r2, r2, #14
 80050ce:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	681a      	ldr	r2, [r3, #0]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f022 0201 	bic.w	r2, r2, #1
 80050de:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80050e4:	f003 021c 	and.w	r2, r3, #28
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ec:	2101      	movs	r1, #1
 80050ee:	fa01 f202 	lsl.w	r2, r1, r2
 80050f2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	2201      	movs	r2, #1
 80050f8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2200      	movs	r2, #0
 8005100:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005110:	6878      	ldr	r0, [r7, #4]
 8005112:	4798      	blx	r3
    }
  }
  return status;
 8005114:	7bfb      	ldrb	r3, [r7, #15]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3710      	adds	r7, #16
 800511a:	46bd      	mov	sp, r7
 800511c:	bd80      	pop	{r7, pc}

0800511e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800511e:	b580      	push	{r7, lr}
 8005120:	b084      	sub	sp, #16
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800513a:	f003 031c 	and.w	r3, r3, #28
 800513e:	2204      	movs	r2, #4
 8005140:	409a      	lsls	r2, r3
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4013      	ands	r3, r2
 8005146:	2b00      	cmp	r3, #0
 8005148:	d026      	beq.n	8005198 <HAL_DMA_IRQHandler+0x7a>
 800514a:	68bb      	ldr	r3, [r7, #8]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b00      	cmp	r3, #0
 8005152:	d021      	beq.n	8005198 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f003 0320 	and.w	r3, r3, #32
 800515e:	2b00      	cmp	r3, #0
 8005160:	d107      	bne.n	8005172 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f022 0204 	bic.w	r2, r2, #4
 8005170:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005176:	f003 021c 	and.w	r2, r3, #28
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800517e:	2104      	movs	r1, #4
 8005180:	fa01 f202 	lsl.w	r2, r1, r2
 8005184:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800518a:	2b00      	cmp	r3, #0
 800518c:	d071      	beq.n	8005272 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005192:	6878      	ldr	r0, [r7, #4]
 8005194:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8005196:	e06c      	b.n	8005272 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800519c:	f003 031c 	and.w	r3, r3, #28
 80051a0:	2202      	movs	r2, #2
 80051a2:	409a      	lsls	r2, r3
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d02e      	beq.n	800520a <HAL_DMA_IRQHandler+0xec>
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	f003 0302 	and.w	r3, r3, #2
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d029      	beq.n	800520a <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f003 0320 	and.w	r3, r3, #32
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d10b      	bne.n	80051dc <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f022 020a 	bic.w	r2, r2, #10
 80051d2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051e0:	f003 021c 	and.w	r2, r3, #28
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051e8:	2102      	movs	r1, #2
 80051ea:	fa01 f202 	lsl.w	r2, r1, r2
 80051ee:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d038      	beq.n	8005272 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8005208:	e033      	b.n	8005272 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800520e:	f003 031c 	and.w	r3, r3, #28
 8005212:	2208      	movs	r2, #8
 8005214:	409a      	lsls	r2, r3
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4013      	ands	r3, r2
 800521a:	2b00      	cmp	r3, #0
 800521c:	d02a      	beq.n	8005274 <HAL_DMA_IRQHandler+0x156>
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f003 0308 	and.w	r3, r3, #8
 8005224:	2b00      	cmp	r3, #0
 8005226:	d025      	beq.n	8005274 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f022 020e 	bic.w	r2, r2, #14
 8005236:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800523c:	f003 021c 	and.w	r2, r3, #28
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005244:	2101      	movs	r1, #1
 8005246:	fa01 f202 	lsl.w	r2, r1, r2
 800524a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2201      	movs	r2, #1
 8005250:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	2200      	movs	r2, #0
 800525e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005266:	2b00      	cmp	r3, #0
 8005268:	d004      	beq.n	8005274 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8005272:	bf00      	nop
 8005274:	bf00      	nop
}
 8005276:	3710      	adds	r7, #16
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800527c:	b480      	push	{r7}
 800527e:	b087      	sub	sp, #28
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
 8005284:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005286:	2300      	movs	r3, #0
 8005288:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800528a:	e17f      	b.n	800558c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	681a      	ldr	r2, [r3, #0]
 8005290:	2101      	movs	r1, #1
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	fa01 f303 	lsl.w	r3, r1, r3
 8005298:	4013      	ands	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	f000 8171 	beq.w	8005586 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80052a4:	683b      	ldr	r3, [r7, #0]
 80052a6:	685b      	ldr	r3, [r3, #4]
 80052a8:	f003 0303 	and.w	r3, r3, #3
 80052ac:	2b01      	cmp	r3, #1
 80052ae:	d005      	beq.n	80052bc <HAL_GPIO_Init+0x40>
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	f003 0303 	and.w	r3, r3, #3
 80052b8:	2b02      	cmp	r3, #2
 80052ba:	d130      	bne.n	800531e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80052c2:	697b      	ldr	r3, [r7, #20]
 80052c4:	005b      	lsls	r3, r3, #1
 80052c6:	2203      	movs	r2, #3
 80052c8:	fa02 f303 	lsl.w	r3, r2, r3
 80052cc:	43db      	mvns	r3, r3
 80052ce:	693a      	ldr	r2, [r7, #16]
 80052d0:	4013      	ands	r3, r2
 80052d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80052d4:	683b      	ldr	r3, [r7, #0]
 80052d6:	68da      	ldr	r2, [r3, #12]
 80052d8:	697b      	ldr	r3, [r7, #20]
 80052da:	005b      	lsls	r3, r3, #1
 80052dc:	fa02 f303 	lsl.w	r3, r2, r3
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	4313      	orrs	r3, r2
 80052e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	693a      	ldr	r2, [r7, #16]
 80052ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	685b      	ldr	r3, [r3, #4]
 80052f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80052f2:	2201      	movs	r2, #1
 80052f4:	697b      	ldr	r3, [r7, #20]
 80052f6:	fa02 f303 	lsl.w	r3, r2, r3
 80052fa:	43db      	mvns	r3, r3
 80052fc:	693a      	ldr	r2, [r7, #16]
 80052fe:	4013      	ands	r3, r2
 8005300:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005302:	683b      	ldr	r3, [r7, #0]
 8005304:	685b      	ldr	r3, [r3, #4]
 8005306:	091b      	lsrs	r3, r3, #4
 8005308:	f003 0201 	and.w	r2, r3, #1
 800530c:	697b      	ldr	r3, [r7, #20]
 800530e:	fa02 f303 	lsl.w	r3, r2, r3
 8005312:	693a      	ldr	r2, [r7, #16]
 8005314:	4313      	orrs	r3, r2
 8005316:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	693a      	ldr	r2, [r7, #16]
 800531c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685b      	ldr	r3, [r3, #4]
 8005322:	f003 0303 	and.w	r3, r3, #3
 8005326:	2b03      	cmp	r3, #3
 8005328:	d118      	bne.n	800535c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800532e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005330:	2201      	movs	r2, #1
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	fa02 f303 	lsl.w	r3, r2, r3
 8005338:	43db      	mvns	r3, r3
 800533a:	693a      	ldr	r2, [r7, #16]
 800533c:	4013      	ands	r3, r2
 800533e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	08db      	lsrs	r3, r3, #3
 8005346:	f003 0201 	and.w	r2, r3, #1
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	fa02 f303 	lsl.w	r3, r2, r3
 8005350:	693a      	ldr	r2, [r7, #16]
 8005352:	4313      	orrs	r3, r2
 8005354:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	693a      	ldr	r2, [r7, #16]
 800535a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	f003 0303 	and.w	r3, r3, #3
 8005364:	2b03      	cmp	r3, #3
 8005366:	d017      	beq.n	8005398 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	005b      	lsls	r3, r3, #1
 8005372:	2203      	movs	r2, #3
 8005374:	fa02 f303 	lsl.w	r3, r2, r3
 8005378:	43db      	mvns	r3, r3
 800537a:	693a      	ldr	r2, [r7, #16]
 800537c:	4013      	ands	r3, r2
 800537e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	689a      	ldr	r2, [r3, #8]
 8005384:	697b      	ldr	r3, [r7, #20]
 8005386:	005b      	lsls	r3, r3, #1
 8005388:	fa02 f303 	lsl.w	r3, r2, r3
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	4313      	orrs	r3, r2
 8005390:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	693a      	ldr	r2, [r7, #16]
 8005396:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005398:	683b      	ldr	r3, [r7, #0]
 800539a:	685b      	ldr	r3, [r3, #4]
 800539c:	f003 0303 	and.w	r3, r3, #3
 80053a0:	2b02      	cmp	r3, #2
 80053a2:	d123      	bne.n	80053ec <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053a4:	697b      	ldr	r3, [r7, #20]
 80053a6:	08da      	lsrs	r2, r3, #3
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	3208      	adds	r2, #8
 80053ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	f003 0307 	and.w	r3, r3, #7
 80053b8:	009b      	lsls	r3, r3, #2
 80053ba:	220f      	movs	r2, #15
 80053bc:	fa02 f303 	lsl.w	r3, r2, r3
 80053c0:	43db      	mvns	r3, r3
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	4013      	ands	r3, r2
 80053c6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053c8:	683b      	ldr	r3, [r7, #0]
 80053ca:	691a      	ldr	r2, [r3, #16]
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	fa02 f303 	lsl.w	r3, r2, r3
 80053d8:	693a      	ldr	r2, [r7, #16]
 80053da:	4313      	orrs	r3, r2
 80053dc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	08da      	lsrs	r2, r3, #3
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	3208      	adds	r2, #8
 80053e6:	6939      	ldr	r1, [r7, #16]
 80053e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	005b      	lsls	r3, r3, #1
 80053f6:	2203      	movs	r2, #3
 80053f8:	fa02 f303 	lsl.w	r3, r2, r3
 80053fc:	43db      	mvns	r3, r3
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4013      	ands	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	685b      	ldr	r3, [r3, #4]
 8005408:	f003 0203 	and.w	r2, r3, #3
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005420:	683b      	ldr	r3, [r7, #0]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005428:	2b00      	cmp	r3, #0
 800542a:	f000 80ac 	beq.w	8005586 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800542e:	4b5f      	ldr	r3, [pc, #380]	@ (80055ac <HAL_GPIO_Init+0x330>)
 8005430:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005432:	4a5e      	ldr	r2, [pc, #376]	@ (80055ac <HAL_GPIO_Init+0x330>)
 8005434:	f043 0301 	orr.w	r3, r3, #1
 8005438:	6613      	str	r3, [r2, #96]	@ 0x60
 800543a:	4b5c      	ldr	r3, [pc, #368]	@ (80055ac <HAL_GPIO_Init+0x330>)
 800543c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800543e:	f003 0301 	and.w	r3, r3, #1
 8005442:	60bb      	str	r3, [r7, #8]
 8005444:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005446:	4a5a      	ldr	r2, [pc, #360]	@ (80055b0 <HAL_GPIO_Init+0x334>)
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	089b      	lsrs	r3, r3, #2
 800544c:	3302      	adds	r3, #2
 800544e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005452:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005454:	697b      	ldr	r3, [r7, #20]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	220f      	movs	r2, #15
 800545e:	fa02 f303 	lsl.w	r3, r2, r3
 8005462:	43db      	mvns	r3, r3
 8005464:	693a      	ldr	r2, [r7, #16]
 8005466:	4013      	ands	r3, r2
 8005468:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8005470:	d025      	beq.n	80054be <HAL_GPIO_Init+0x242>
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	4a4f      	ldr	r2, [pc, #316]	@ (80055b4 <HAL_GPIO_Init+0x338>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d01f      	beq.n	80054ba <HAL_GPIO_Init+0x23e>
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	4a4e      	ldr	r2, [pc, #312]	@ (80055b8 <HAL_GPIO_Init+0x33c>)
 800547e:	4293      	cmp	r3, r2
 8005480:	d019      	beq.n	80054b6 <HAL_GPIO_Init+0x23a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a4d      	ldr	r2, [pc, #308]	@ (80055bc <HAL_GPIO_Init+0x340>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_GPIO_Init+0x236>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a4c      	ldr	r2, [pc, #304]	@ (80055c0 <HAL_GPIO_Init+0x344>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d00d      	beq.n	80054ae <HAL_GPIO_Init+0x232>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a4b      	ldr	r2, [pc, #300]	@ (80055c4 <HAL_GPIO_Init+0x348>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d007      	beq.n	80054aa <HAL_GPIO_Init+0x22e>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	4a4a      	ldr	r2, [pc, #296]	@ (80055c8 <HAL_GPIO_Init+0x34c>)
 800549e:	4293      	cmp	r3, r2
 80054a0:	d101      	bne.n	80054a6 <HAL_GPIO_Init+0x22a>
 80054a2:	2306      	movs	r3, #6
 80054a4:	e00c      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054a6:	2307      	movs	r3, #7
 80054a8:	e00a      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054aa:	2305      	movs	r3, #5
 80054ac:	e008      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054ae:	2304      	movs	r3, #4
 80054b0:	e006      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054b2:	2303      	movs	r3, #3
 80054b4:	e004      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054b6:	2302      	movs	r3, #2
 80054b8:	e002      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054ba:	2301      	movs	r3, #1
 80054bc:	e000      	b.n	80054c0 <HAL_GPIO_Init+0x244>
 80054be:	2300      	movs	r3, #0
 80054c0:	697a      	ldr	r2, [r7, #20]
 80054c2:	f002 0203 	and.w	r2, r2, #3
 80054c6:	0092      	lsls	r2, r2, #2
 80054c8:	4093      	lsls	r3, r2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80054d0:	4937      	ldr	r1, [pc, #220]	@ (80055b0 <HAL_GPIO_Init+0x334>)
 80054d2:	697b      	ldr	r3, [r7, #20]
 80054d4:	089b      	lsrs	r3, r3, #2
 80054d6:	3302      	adds	r3, #2
 80054d8:	693a      	ldr	r2, [r7, #16]
 80054da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054de:	4b3b      	ldr	r3, [pc, #236]	@ (80055cc <HAL_GPIO_Init+0x350>)
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	43db      	mvns	r3, r3
 80054e8:	693a      	ldr	r2, [r7, #16]
 80054ea:	4013      	ands	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80054fa:	693a      	ldr	r2, [r7, #16]
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	4313      	orrs	r3, r2
 8005500:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005502:	4a32      	ldr	r2, [pc, #200]	@ (80055cc <HAL_GPIO_Init+0x350>)
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005508:	4b30      	ldr	r3, [pc, #192]	@ (80055cc <HAL_GPIO_Init+0x350>)
 800550a:	68db      	ldr	r3, [r3, #12]
 800550c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	43db      	mvns	r3, r3
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	4013      	ands	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005518:	683b      	ldr	r3, [r7, #0]
 800551a:	685b      	ldr	r3, [r3, #4]
 800551c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005520:	2b00      	cmp	r3, #0
 8005522:	d003      	beq.n	800552c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8005524:	693a      	ldr	r2, [r7, #16]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	4313      	orrs	r3, r2
 800552a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800552c:	4a27      	ldr	r2, [pc, #156]	@ (80055cc <HAL_GPIO_Init+0x350>)
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005532:	4b26      	ldr	r3, [pc, #152]	@ (80055cc <HAL_GPIO_Init+0x350>)
 8005534:	685b      	ldr	r3, [r3, #4]
 8005536:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	43db      	mvns	r3, r3
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	4013      	ands	r3, r2
 8005540:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005542:	683b      	ldr	r3, [r7, #0]
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 800554e:	693a      	ldr	r2, [r7, #16]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	4313      	orrs	r3, r2
 8005554:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005556:	4a1d      	ldr	r2, [pc, #116]	@ (80055cc <HAL_GPIO_Init+0x350>)
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <HAL_GPIO_Init+0x350>)
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	43db      	mvns	r3, r3
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4013      	ands	r3, r2
 800556a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005574:	2b00      	cmp	r3, #0
 8005576:	d003      	beq.n	8005580 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8005578:	693a      	ldr	r2, [r7, #16]
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	4313      	orrs	r3, r2
 800557e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005580:	4a12      	ldr	r2, [pc, #72]	@ (80055cc <HAL_GPIO_Init+0x350>)
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	3301      	adds	r3, #1
 800558a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	681a      	ldr	r2, [r3, #0]
 8005590:	697b      	ldr	r3, [r7, #20]
 8005592:	fa22 f303 	lsr.w	r3, r2, r3
 8005596:	2b00      	cmp	r3, #0
 8005598:	f47f ae78 	bne.w	800528c <HAL_GPIO_Init+0x10>
  }
}
 800559c:	bf00      	nop
 800559e:	bf00      	nop
 80055a0:	371c      	adds	r7, #28
 80055a2:	46bd      	mov	sp, r7
 80055a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055a8:	4770      	bx	lr
 80055aa:	bf00      	nop
 80055ac:	40021000 	.word	0x40021000
 80055b0:	40010000 	.word	0x40010000
 80055b4:	48000400 	.word	0x48000400
 80055b8:	48000800 	.word	0x48000800
 80055bc:	48000c00 	.word	0x48000c00
 80055c0:	48001000 	.word	0x48001000
 80055c4:	48001400 	.word	0x48001400
 80055c8:	48001800 	.word	0x48001800
 80055cc:	40010400 	.word	0x40010400

080055d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	460b      	mov	r3, r1
 80055da:	807b      	strh	r3, [r7, #2]
 80055dc:	4613      	mov	r3, r2
 80055de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80055e0:	787b      	ldrb	r3, [r7, #1]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d003      	beq.n	80055ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80055e6:	887a      	ldrh	r2, [r7, #2]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80055ec:	e002      	b.n	80055f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80055ee:	887a      	ldrh	r2, [r7, #2]
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80055f4:	bf00      	nop
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	4603      	mov	r3, r0
 8005608:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800560a:	4b08      	ldr	r3, [pc, #32]	@ (800562c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800560c:	695a      	ldr	r2, [r3, #20]
 800560e:	88fb      	ldrh	r3, [r7, #6]
 8005610:	4013      	ands	r3, r2
 8005612:	2b00      	cmp	r3, #0
 8005614:	d006      	beq.n	8005624 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005616:	4a05      	ldr	r2, [pc, #20]	@ (800562c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005618:	88fb      	ldrh	r3, [r7, #6]
 800561a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800561c:	88fb      	ldrh	r3, [r7, #6]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fe fb6c 	bl	8003cfc <HAL_GPIO_EXTI_Callback>
  }
}
 8005624:	bf00      	nop
 8005626:	3708      	adds	r7, #8
 8005628:	46bd      	mov	sp, r7
 800562a:	bd80      	pop	{r7, pc}
 800562c:	40010400 	.word	0x40010400

08005630 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e08d      	b.n	800575e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005648:	b2db      	uxtb	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d106      	bne.n	800565c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2200      	movs	r2, #0
 8005652:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005656:	6878      	ldr	r0, [r7, #4]
 8005658:	f7fd f9d0 	bl	80029fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2224      	movs	r2, #36	@ 0x24
 8005660:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681a      	ldr	r2, [r3, #0]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f022 0201 	bic.w	r2, r2, #1
 8005672:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8005680:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689a      	ldr	r2, [r3, #8]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005690:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b01      	cmp	r3, #1
 8005698:	d107      	bne.n	80056aa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	689a      	ldr	r2, [r3, #8]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80056a6:	609a      	str	r2, [r3, #8]
 80056a8:	e006      	b.n	80056b8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	689a      	ldr	r2, [r3, #8]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 80056b6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b02      	cmp	r3, #2
 80056be:	d108      	bne.n	80056d2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	685a      	ldr	r2, [r3, #4]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80056ce:	605a      	str	r2, [r3, #4]
 80056d0:	e007      	b.n	80056e2 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80056e0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	685b      	ldr	r3, [r3, #4]
 80056e8:	687a      	ldr	r2, [r7, #4]
 80056ea:	6812      	ldr	r2, [r2, #0]
 80056ec:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80056f0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80056f4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	68da      	ldr	r2, [r3, #12]
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005704:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	691a      	ldr	r2, [r3, #16]
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	695b      	ldr	r3, [r3, #20]
 800570e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	699b      	ldr	r3, [r3, #24]
 8005716:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	430a      	orrs	r2, r1
 800571e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	69d9      	ldr	r1, [r3, #28]
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6a1a      	ldr	r2, [r3, #32]
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	430a      	orrs	r2, r1
 800572e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	681a      	ldr	r2, [r3, #0]
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	f042 0201 	orr.w	r2, r2, #1
 800573e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2200      	movs	r2, #0
 8005744:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	2220      	movs	r2, #32
 800574a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800575c:	2300      	movs	r3, #0
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
	...

08005768 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b088      	sub	sp, #32
 800576c:	af02      	add	r7, sp, #8
 800576e:	60f8      	str	r0, [r7, #12]
 8005770:	607a      	str	r2, [r7, #4]
 8005772:	461a      	mov	r2, r3
 8005774:	460b      	mov	r3, r1
 8005776:	817b      	strh	r3, [r7, #10]
 8005778:	4613      	mov	r3, r2
 800577a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005782:	b2db      	uxtb	r3, r3
 8005784:	2b20      	cmp	r3, #32
 8005786:	f040 80fd 	bne.w	8005984 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005790:	2b01      	cmp	r3, #1
 8005792:	d101      	bne.n	8005798 <HAL_I2C_Master_Transmit+0x30>
 8005794:	2302      	movs	r3, #2
 8005796:	e0f6      	b.n	8005986 <HAL_I2C_Master_Transmit+0x21e>
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	2201      	movs	r2, #1
 800579c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80057a0:	f7ff fa7c 	bl	8004c9c <HAL_GetTick>
 80057a4:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	9300      	str	r3, [sp, #0]
 80057aa:	2319      	movs	r3, #25
 80057ac:	2201      	movs	r2, #1
 80057ae:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80057b2:	68f8      	ldr	r0, [r7, #12]
 80057b4:	f000 fce0 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 80057b8:	4603      	mov	r3, r0
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d001      	beq.n	80057c2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e0e1      	b.n	8005986 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	2221      	movs	r2, #33	@ 0x21
 80057c6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	2210      	movs	r2, #16
 80057ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2200      	movs	r2, #0
 80057d6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	687a      	ldr	r2, [r7, #4]
 80057dc:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	893a      	ldrh	r2, [r7, #8]
 80057e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	2200      	movs	r2, #0
 80057e8:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057ee:	b29b      	uxth	r3, r3
 80057f0:	2bff      	cmp	r3, #255	@ 0xff
 80057f2:	d906      	bls.n	8005802 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80057f4:	68fb      	ldr	r3, [r7, #12]
 80057f6:	22ff      	movs	r2, #255	@ 0xff
 80057f8:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 80057fa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e007      	b.n	8005812 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005806:	b29a      	uxth	r2, r3
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800580c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005810:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005816:	2b00      	cmp	r3, #0
 8005818:	d024      	beq.n	8005864 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800581e:	781a      	ldrb	r2, [r3, #0]
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800582a:	1c5a      	adds	r2, r3, #1
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005834:	b29b      	uxth	r3, r3
 8005836:	3b01      	subs	r3, #1
 8005838:	b29a      	uxth	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005842:	3b01      	subs	r3, #1
 8005844:	b29a      	uxth	r2, r3
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800584e:	b2db      	uxtb	r3, r3
 8005850:	3301      	adds	r3, #1
 8005852:	b2da      	uxtb	r2, r3
 8005854:	8979      	ldrh	r1, [r7, #10]
 8005856:	4b4e      	ldr	r3, [pc, #312]	@ (8005990 <HAL_I2C_Master_Transmit+0x228>)
 8005858:	9300      	str	r3, [sp, #0]
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fedb 	bl	8006618 <I2C_TransferConfig>
 8005862:	e066      	b.n	8005932 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005868:	b2da      	uxtb	r2, r3
 800586a:	8979      	ldrh	r1, [r7, #10]
 800586c:	4b48      	ldr	r3, [pc, #288]	@ (8005990 <HAL_I2C_Master_Transmit+0x228>)
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	697b      	ldr	r3, [r7, #20]
 8005872:	68f8      	ldr	r0, [r7, #12]
 8005874:	f000 fed0 	bl	8006618 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8005878:	e05b      	b.n	8005932 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800587a:	693a      	ldr	r2, [r7, #16]
 800587c:	6a39      	ldr	r1, [r7, #32]
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fcd3 	bl	800622a <I2C_WaitOnTXISFlagUntilTimeout>
 8005884:	4603      	mov	r3, r0
 8005886:	2b00      	cmp	r3, #0
 8005888:	d001      	beq.n	800588e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800588a:	2301      	movs	r3, #1
 800588c:	e07b      	b.n	8005986 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005892:	781a      	ldrb	r2, [r3, #0]
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800589e:	1c5a      	adds	r2, r3, #1
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058a8:	b29b      	uxth	r3, r3
 80058aa:	3b01      	subs	r3, #1
 80058ac:	b29a      	uxth	r2, r3
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058b6:	3b01      	subs	r3, #1
 80058b8:	b29a      	uxth	r2, r3
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058c2:	b29b      	uxth	r3, r3
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d034      	beq.n	8005932 <HAL_I2C_Master_Transmit+0x1ca>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d130      	bne.n	8005932 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	9300      	str	r3, [sp, #0]
 80058d4:	6a3b      	ldr	r3, [r7, #32]
 80058d6:	2200      	movs	r2, #0
 80058d8:	2180      	movs	r1, #128	@ 0x80
 80058da:	68f8      	ldr	r0, [r7, #12]
 80058dc:	f000 fc4c 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d001      	beq.n	80058ea <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 80058e6:	2301      	movs	r3, #1
 80058e8:	e04d      	b.n	8005986 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	2bff      	cmp	r3, #255	@ 0xff
 80058f2:	d90e      	bls.n	8005912 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	22ff      	movs	r2, #255	@ 0xff
 80058f8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80058fe:	b2da      	uxtb	r2, r3
 8005900:	8979      	ldrh	r1, [r7, #10]
 8005902:	2300      	movs	r3, #0
 8005904:	9300      	str	r3, [sp, #0]
 8005906:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800590a:	68f8      	ldr	r0, [r7, #12]
 800590c:	f000 fe84 	bl	8006618 <I2C_TransferConfig>
 8005910:	e00f      	b.n	8005932 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005916:	b29a      	uxth	r2, r3
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005920:	b2da      	uxtb	r2, r3
 8005922:	8979      	ldrh	r1, [r7, #10]
 8005924:	2300      	movs	r3, #0
 8005926:	9300      	str	r3, [sp, #0]
 8005928:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800592c:	68f8      	ldr	r0, [r7, #12]
 800592e:	f000 fe73 	bl	8006618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005936:	b29b      	uxth	r3, r3
 8005938:	2b00      	cmp	r3, #0
 800593a:	d19e      	bne.n	800587a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	6a39      	ldr	r1, [r7, #32]
 8005940:	68f8      	ldr	r0, [r7, #12]
 8005942:	f000 fcb9 	bl	80062b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005946:	4603      	mov	r3, r0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d001      	beq.n	8005950 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 800594c:	2301      	movs	r3, #1
 800594e:	e01a      	b.n	8005986 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	2220      	movs	r2, #32
 8005956:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	6859      	ldr	r1, [r3, #4]
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	681a      	ldr	r2, [r3, #0]
 8005962:	4b0c      	ldr	r3, [pc, #48]	@ (8005994 <HAL_I2C_Master_Transmit+0x22c>)
 8005964:	400b      	ands	r3, r1
 8005966:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2220      	movs	r2, #32
 800596c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2200      	movs	r2, #0
 8005974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2200      	movs	r2, #0
 800597c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005980:	2300      	movs	r3, #0
 8005982:	e000      	b.n	8005986 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8005984:	2302      	movs	r3, #2
  }
}
 8005986:	4618      	mov	r0, r3
 8005988:	3718      	adds	r7, #24
 800598a:	46bd      	mov	sp, r7
 800598c:	bd80      	pop	{r7, pc}
 800598e:	bf00      	nop
 8005990:	80002000 	.word	0x80002000
 8005994:	fe00e800 	.word	0xfe00e800

08005998 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8005998:	b580      	push	{r7, lr}
 800599a:	b088      	sub	sp, #32
 800599c:	af02      	add	r7, sp, #8
 800599e:	60f8      	str	r0, [r7, #12]
 80059a0:	607a      	str	r2, [r7, #4]
 80059a2:	461a      	mov	r2, r3
 80059a4:	460b      	mov	r3, r1
 80059a6:	817b      	strh	r3, [r7, #10]
 80059a8:	4613      	mov	r3, r2
 80059aa:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b20      	cmp	r3, #32
 80059b6:	f040 80db 	bne.w	8005b70 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80059c0:	2b01      	cmp	r3, #1
 80059c2:	d101      	bne.n	80059c8 <HAL_I2C_Master_Receive+0x30>
 80059c4:	2302      	movs	r3, #2
 80059c6:	e0d4      	b.n	8005b72 <HAL_I2C_Master_Receive+0x1da>
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2201      	movs	r2, #1
 80059cc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80059d0:	f7ff f964 	bl	8004c9c <HAL_GetTick>
 80059d4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	9300      	str	r3, [sp, #0]
 80059da:	2319      	movs	r3, #25
 80059dc:	2201      	movs	r2, #1
 80059de:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80059e2:	68f8      	ldr	r0, [r7, #12]
 80059e4:	f000 fbc8 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d001      	beq.n	80059f2 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 80059ee:	2301      	movs	r3, #1
 80059f0:	e0bf      	b.n	8005b72 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2222      	movs	r2, #34	@ 0x22
 80059f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2210      	movs	r2, #16
 80059fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	893a      	ldrh	r2, [r7, #8]
 8005a12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	2200      	movs	r2, #0
 8005a18:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a1e:	b29b      	uxth	r3, r3
 8005a20:	2bff      	cmp	r3, #255	@ 0xff
 8005a22:	d90e      	bls.n	8005a42 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	2201      	movs	r2, #1
 8005a28:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a2e:	b2da      	uxtb	r2, r3
 8005a30:	8979      	ldrh	r1, [r7, #10]
 8005a32:	4b52      	ldr	r3, [pc, #328]	@ (8005b7c <HAL_I2C_Master_Receive+0x1e4>)
 8005a34:	9300      	str	r3, [sp, #0]
 8005a36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005a3a:	68f8      	ldr	r0, [r7, #12]
 8005a3c:	f000 fdec 	bl	8006618 <I2C_TransferConfig>
 8005a40:	e06d      	b.n	8005b1e <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005a46:	b29a      	uxth	r2, r3
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a50:	b2da      	uxtb	r2, r3
 8005a52:	8979      	ldrh	r1, [r7, #10]
 8005a54:	4b49      	ldr	r3, [pc, #292]	@ (8005b7c <HAL_I2C_Master_Receive+0x1e4>)
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005a5c:	68f8      	ldr	r0, [r7, #12]
 8005a5e:	f000 fddb 	bl	8006618 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8005a62:	e05c      	b.n	8005b1e <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a64:	697a      	ldr	r2, [r7, #20]
 8005a66:	6a39      	ldr	r1, [r7, #32]
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fc69 	bl	8006340 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e07c      	b.n	8005b72 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aae:	b29b      	uxth	r3, r3
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d034      	beq.n	8005b1e <HAL_I2C_Master_Receive+0x186>
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d130      	bne.n	8005b1e <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	6a3b      	ldr	r3, [r7, #32]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2180      	movs	r1, #128	@ 0x80
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 fb56 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e04d      	b.n	8005b72 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ada:	b29b      	uxth	r3, r3
 8005adc:	2bff      	cmp	r3, #255	@ 0xff
 8005ade:	d90e      	bls.n	8005afe <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	22ff      	movs	r2, #255	@ 0xff
 8005ae4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005aea:	b2da      	uxtb	r2, r3
 8005aec:	8979      	ldrh	r1, [r7, #10]
 8005aee:	2300      	movs	r3, #0
 8005af0:	9300      	str	r3, [sp, #0]
 8005af2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fd8e 	bl	8006618 <I2C_TransferConfig>
 8005afc:	e00f      	b.n	8005b1e <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b02:	b29a      	uxth	r2, r3
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b0c:	b2da      	uxtb	r2, r3
 8005b0e:	8979      	ldrh	r1, [r7, #10]
 8005b10:	2300      	movs	r3, #0
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005b18:	68f8      	ldr	r0, [r7, #12]
 8005b1a:	f000 fd7d 	bl	8006618 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b22:	b29b      	uxth	r3, r3
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d19d      	bne.n	8005a64 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b28:	697a      	ldr	r2, [r7, #20]
 8005b2a:	6a39      	ldr	r1, [r7, #32]
 8005b2c:	68f8      	ldr	r0, [r7, #12]
 8005b2e:	f000 fbc3 	bl	80062b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005b32:	4603      	mov	r3, r0
 8005b34:	2b00      	cmp	r3, #0
 8005b36:	d001      	beq.n	8005b3c <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 8005b38:	2301      	movs	r3, #1
 8005b3a:	e01a      	b.n	8005b72 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	2220      	movs	r2, #32
 8005b42:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	6859      	ldr	r1, [r3, #4]
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005b80 <HAL_I2C_Master_Receive+0x1e8>)
 8005b50:	400b      	ands	r3, r1
 8005b52:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2220      	movs	r2, #32
 8005b58:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	e000      	b.n	8005b72 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8005b70:	2302      	movs	r3, #2
  }
}
 8005b72:	4618      	mov	r0, r3
 8005b74:	3718      	adds	r7, #24
 8005b76:	46bd      	mov	sp, r7
 8005b78:	bd80      	pop	{r7, pc}
 8005b7a:	bf00      	nop
 8005b7c:	80002400 	.word	0x80002400
 8005b80:	fe00e800 	.word	0xfe00e800

08005b84 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b84:	b580      	push	{r7, lr}
 8005b86:	b088      	sub	sp, #32
 8005b88:	af02      	add	r7, sp, #8
 8005b8a:	60f8      	str	r0, [r7, #12]
 8005b8c:	4608      	mov	r0, r1
 8005b8e:	4611      	mov	r1, r2
 8005b90:	461a      	mov	r2, r3
 8005b92:	4603      	mov	r3, r0
 8005b94:	817b      	strh	r3, [r7, #10]
 8005b96:	460b      	mov	r3, r1
 8005b98:	813b      	strh	r3, [r7, #8]
 8005b9a:	4613      	mov	r3, r2
 8005b9c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005ba4:	b2db      	uxtb	r3, r3
 8005ba6:	2b20      	cmp	r3, #32
 8005ba8:	f040 80f9 	bne.w	8005d9e <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bac:	6a3b      	ldr	r3, [r7, #32]
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d002      	beq.n	8005bb8 <HAL_I2C_Mem_Write+0x34>
 8005bb2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d105      	bne.n	8005bc4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005bbe:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005bc0:	2301      	movs	r3, #1
 8005bc2:	e0ed      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d101      	bne.n	8005bd2 <HAL_I2C_Mem_Write+0x4e>
 8005bce:	2302      	movs	r3, #2
 8005bd0:	e0e6      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	2201      	movs	r2, #1
 8005bd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005bda:	f7ff f85f 	bl	8004c9c <HAL_GetTick>
 8005bde:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005be0:	697b      	ldr	r3, [r7, #20]
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	2319      	movs	r3, #25
 8005be6:	2201      	movs	r2, #1
 8005be8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005bec:	68f8      	ldr	r0, [r7, #12]
 8005bee:	f000 fac3 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e0d1      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2221      	movs	r2, #33	@ 0x21
 8005c00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2240      	movs	r2, #64	@ 0x40
 8005c08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	2200      	movs	r2, #0
 8005c10:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	6a3a      	ldr	r2, [r7, #32]
 8005c16:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005c1c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	2200      	movs	r2, #0
 8005c22:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c24:	88f8      	ldrh	r0, [r7, #6]
 8005c26:	893a      	ldrh	r2, [r7, #8]
 8005c28:	8979      	ldrh	r1, [r7, #10]
 8005c2a:	697b      	ldr	r3, [r7, #20]
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	4603      	mov	r3, r0
 8005c34:	68f8      	ldr	r0, [r7, #12]
 8005c36:	f000 f9d3 	bl	8005fe0 <I2C_RequestMemoryWrite>
 8005c3a:	4603      	mov	r3, r0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d005      	beq.n	8005c4c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2200      	movs	r2, #0
 8005c44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	e0a9      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c50:	b29b      	uxth	r3, r3
 8005c52:	2bff      	cmp	r3, #255	@ 0xff
 8005c54:	d90e      	bls.n	8005c74 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	22ff      	movs	r2, #255	@ 0xff
 8005c5a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c60:	b2da      	uxtb	r2, r3
 8005c62:	8979      	ldrh	r1, [r7, #10]
 8005c64:	2300      	movs	r3, #0
 8005c66:	9300      	str	r3, [sp, #0]
 8005c68:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f000 fcd3 	bl	8006618 <I2C_TransferConfig>
 8005c72:	e00f      	b.n	8005c94 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c78:	b29a      	uxth	r2, r3
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c82:	b2da      	uxtb	r2, r3
 8005c84:	8979      	ldrh	r1, [r7, #10]
 8005c86:	2300      	movs	r3, #0
 8005c88:	9300      	str	r3, [sp, #0]
 8005c8a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005c8e:	68f8      	ldr	r0, [r7, #12]
 8005c90:	f000 fcc2 	bl	8006618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c94:	697a      	ldr	r2, [r7, #20]
 8005c96:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c98:	68f8      	ldr	r0, [r7, #12]
 8005c9a:	f000 fac6 	bl	800622a <I2C_WaitOnTXISFlagUntilTimeout>
 8005c9e:	4603      	mov	r3, r0
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d001      	beq.n	8005ca8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8005ca4:	2301      	movs	r3, #1
 8005ca6:	e07b      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cac:	781a      	ldrb	r2, [r3, #0]
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb8:	1c5a      	adds	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	3b01      	subs	r3, #1
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29a      	uxth	r2, r3
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cdc:	b29b      	uxth	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d034      	beq.n	8005d4c <HAL_I2C_Mem_Write+0x1c8>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d130      	bne.n	8005d4c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005cea:	697b      	ldr	r3, [r7, #20]
 8005cec:	9300      	str	r3, [sp, #0]
 8005cee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	2180      	movs	r1, #128	@ 0x80
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fa3f 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d001      	beq.n	8005d04 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e04d      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	2bff      	cmp	r3, #255	@ 0xff
 8005d0c:	d90e      	bls.n	8005d2c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	22ff      	movs	r2, #255	@ 0xff
 8005d12:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	b2da      	uxtb	r2, r3
 8005d1a:	8979      	ldrh	r1, [r7, #10]
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9300      	str	r3, [sp, #0]
 8005d20:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005d24:	68f8      	ldr	r0, [r7, #12]
 8005d26:	f000 fc77 	bl	8006618 <I2C_TransferConfig>
 8005d2a:	e00f      	b.n	8005d4c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d3a:	b2da      	uxtb	r2, r3
 8005d3c:	8979      	ldrh	r1, [r7, #10]
 8005d3e:	2300      	movs	r3, #0
 8005d40:	9300      	str	r3, [sp, #0]
 8005d42:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 fc66 	bl	8006618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d50:	b29b      	uxth	r3, r3
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d19e      	bne.n	8005c94 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f000 faac 	bl	80062b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005d60:	4603      	mov	r3, r0
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d001      	beq.n	8005d6a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8005d66:	2301      	movs	r3, #1
 8005d68:	e01a      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	2220      	movs	r2, #32
 8005d70:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	6859      	ldr	r1, [r3, #4]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8005da8 <HAL_I2C_Mem_Write+0x224>)
 8005d7e:	400b      	ands	r3, r1
 8005d80:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	2220      	movs	r2, #32
 8005d86:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	2200      	movs	r2, #0
 8005d96:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	e000      	b.n	8005da0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8005d9e:	2302      	movs	r3, #2
  }
}
 8005da0:	4618      	mov	r0, r3
 8005da2:	3718      	adds	r7, #24
 8005da4:	46bd      	mov	sp, r7
 8005da6:	bd80      	pop	{r7, pc}
 8005da8:	fe00e800 	.word	0xfe00e800

08005dac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dac:	b580      	push	{r7, lr}
 8005dae:	b088      	sub	sp, #32
 8005db0:	af02      	add	r7, sp, #8
 8005db2:	60f8      	str	r0, [r7, #12]
 8005db4:	4608      	mov	r0, r1
 8005db6:	4611      	mov	r1, r2
 8005db8:	461a      	mov	r2, r3
 8005dba:	4603      	mov	r3, r0
 8005dbc:	817b      	strh	r3, [r7, #10]
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	813b      	strh	r3, [r7, #8]
 8005dc2:	4613      	mov	r3, r2
 8005dc4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b20      	cmp	r3, #32
 8005dd0:	f040 80fd 	bne.w	8005fce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dd4:	6a3b      	ldr	r3, [r7, #32]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d002      	beq.n	8005de0 <HAL_I2C_Mem_Read+0x34>
 8005dda:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d105      	bne.n	8005dec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de6:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8005de8:	2301      	movs	r3, #1
 8005dea:	e0f1      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005df2:	2b01      	cmp	r3, #1
 8005df4:	d101      	bne.n	8005dfa <HAL_I2C_Mem_Read+0x4e>
 8005df6:	2302      	movs	r3, #2
 8005df8:	e0ea      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	2201      	movs	r2, #1
 8005dfe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8005e02:	f7fe ff4b 	bl	8004c9c <HAL_GetTick>
 8005e06:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	9300      	str	r3, [sp, #0]
 8005e0c:	2319      	movs	r3, #25
 8005e0e:	2201      	movs	r2, #1
 8005e10:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8005e14:	68f8      	ldr	r0, [r7, #12]
 8005e16:	f000 f9af 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005e1a:	4603      	mov	r3, r0
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d001      	beq.n	8005e24 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8005e20:	2301      	movs	r3, #1
 8005e22:	e0d5      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2222      	movs	r2, #34	@ 0x22
 8005e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2240      	movs	r2, #64	@ 0x40
 8005e30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	2200      	movs	r2, #0
 8005e38:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	6a3a      	ldr	r2, [r7, #32]
 8005e3e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005e44:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005e4c:	88f8      	ldrh	r0, [r7, #6]
 8005e4e:	893a      	ldrh	r2, [r7, #8]
 8005e50:	8979      	ldrh	r1, [r7, #10]
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	9301      	str	r3, [sp, #4]
 8005e56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f000 f913 	bl	8006088 <I2C_RequestMemoryRead>
 8005e62:	4603      	mov	r3, r0
 8005e64:	2b00      	cmp	r3, #0
 8005e66:	d005      	beq.n	8005e74 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8005e70:	2301      	movs	r3, #1
 8005e72:	e0ad      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	2bff      	cmp	r3, #255	@ 0xff
 8005e7c:	d90e      	bls.n	8005e9c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = 1U;
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2201      	movs	r2, #1
 8005e82:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005e88:	b2da      	uxtb	r2, r3
 8005e8a:	8979      	ldrh	r1, [r7, #10]
 8005e8c:	4b52      	ldr	r3, [pc, #328]	@ (8005fd8 <HAL_I2C_Mem_Read+0x22c>)
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 fbbf 	bl	8006618 <I2C_TransferConfig>
 8005e9a:	e00f      	b.n	8005ebc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005eaa:	b2da      	uxtb	r2, r3
 8005eac:	8979      	ldrh	r1, [r7, #10]
 8005eae:	4b4a      	ldr	r3, [pc, #296]	@ (8005fd8 <HAL_I2C_Mem_Read+0x22c>)
 8005eb0:	9300      	str	r3, [sp, #0]
 8005eb2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005eb6:	68f8      	ldr	r0, [r7, #12]
 8005eb8:	f000 fbae 	bl	8006618 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ec2:	2200      	movs	r2, #0
 8005ec4:	2104      	movs	r1, #4
 8005ec6:	68f8      	ldr	r0, [r7, #12]
 8005ec8:	f000 f956 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d001      	beq.n	8005ed6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	e07c      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005edc:	68fb      	ldr	r3, [r7, #12]
 8005ede:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee0:	b2d2      	uxtb	r2, r2
 8005ee2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ee8:	1c5a      	adds	r2, r3, #1
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ef2:	3b01      	subs	r3, #1
 8005ef4:	b29a      	uxth	r2, r3
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005efe:	b29b      	uxth	r3, r3
 8005f00:	3b01      	subs	r3, #1
 8005f02:	b29a      	uxth	r2, r3
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f0c:	b29b      	uxth	r3, r3
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d034      	beq.n	8005f7c <HAL_I2C_Mem_Read+0x1d0>
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d130      	bne.n	8005f7c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	9300      	str	r3, [sp, #0]
 8005f1e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f20:	2200      	movs	r2, #0
 8005f22:	2180      	movs	r1, #128	@ 0x80
 8005f24:	68f8      	ldr	r0, [r7, #12]
 8005f26:	f000 f927 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8005f2a:	4603      	mov	r3, r0
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d001      	beq.n	8005f34 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8005f30:	2301      	movs	r3, #1
 8005f32:	e04d      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f38:	b29b      	uxth	r3, r3
 8005f3a:	2bff      	cmp	r3, #255	@ 0xff
 8005f3c:	d90e      	bls.n	8005f5c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = 1U;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2201      	movs	r2, #1
 8005f42:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f48:	b2da      	uxtb	r2, r3
 8005f4a:	8979      	ldrh	r1, [r7, #10]
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	9300      	str	r3, [sp, #0]
 8005f50:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8005f54:	68f8      	ldr	r0, [r7, #12]
 8005f56:	f000 fb5f 	bl	8006618 <I2C_TransferConfig>
 8005f5a:	e00f      	b.n	8005f7c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005f6a:	b2da      	uxtb	r2, r3
 8005f6c:	8979      	ldrh	r1, [r7, #10]
 8005f6e:	2300      	movs	r3, #0
 8005f70:	9300      	str	r3, [sp, #0]
 8005f72:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005f76:	68f8      	ldr	r0, [r7, #12]
 8005f78:	f000 fb4e 	bl	8006618 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f80:	b29b      	uxth	r3, r3
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d19a      	bne.n	8005ebc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005f86:	697a      	ldr	r2, [r7, #20]
 8005f88:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005f8a:	68f8      	ldr	r0, [r7, #12]
 8005f8c:	f000 f994 	bl	80062b8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8005f90:	4603      	mov	r3, r0
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d001      	beq.n	8005f9a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8005f96:	2301      	movs	r3, #1
 8005f98:	e01a      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	2220      	movs	r2, #32
 8005fa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6859      	ldr	r1, [r3, #4]
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	681a      	ldr	r2, [r3, #0]
 8005fac:	4b0b      	ldr	r3, [pc, #44]	@ (8005fdc <HAL_I2C_Mem_Read+0x230>)
 8005fae:	400b      	ands	r3, r1
 8005fb0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2220      	movs	r2, #32
 8005fb6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	e000      	b.n	8005fd0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8005fce:	2302      	movs	r3, #2
  }
}
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	3718      	adds	r7, #24
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	80002400 	.word	0x80002400
 8005fdc:	fe00e800 	.word	0xfe00e800

08005fe0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b086      	sub	sp, #24
 8005fe4:	af02      	add	r7, sp, #8
 8005fe6:	60f8      	str	r0, [r7, #12]
 8005fe8:	4608      	mov	r0, r1
 8005fea:	4611      	mov	r1, r2
 8005fec:	461a      	mov	r2, r3
 8005fee:	4603      	mov	r3, r0
 8005ff0:	817b      	strh	r3, [r7, #10]
 8005ff2:	460b      	mov	r3, r1
 8005ff4:	813b      	strh	r3, [r7, #8]
 8005ff6:	4613      	mov	r3, r2
 8005ff8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8005ffa:	88fb      	ldrh	r3, [r7, #6]
 8005ffc:	b2da      	uxtb	r2, r3
 8005ffe:	8979      	ldrh	r1, [r7, #10]
 8006000:	4b20      	ldr	r3, [pc, #128]	@ (8006084 <I2C_RequestMemoryWrite+0xa4>)
 8006002:	9300      	str	r3, [sp, #0]
 8006004:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8006008:	68f8      	ldr	r0, [r7, #12]
 800600a:	f000 fb05 	bl	8006618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800600e:	69fa      	ldr	r2, [r7, #28]
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	68f8      	ldr	r0, [r7, #12]
 8006014:	f000 f909 	bl	800622a <I2C_WaitOnTXISFlagUntilTimeout>
 8006018:	4603      	mov	r3, r0
 800601a:	2b00      	cmp	r3, #0
 800601c:	d001      	beq.n	8006022 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e02c      	b.n	800607c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006022:	88fb      	ldrh	r3, [r7, #6]
 8006024:	2b01      	cmp	r3, #1
 8006026:	d105      	bne.n	8006034 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006028:	893b      	ldrh	r3, [r7, #8]
 800602a:	b2da      	uxtb	r2, r3
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	629a      	str	r2, [r3, #40]	@ 0x28
 8006032:	e015      	b.n	8006060 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006034:	893b      	ldrh	r3, [r7, #8]
 8006036:	0a1b      	lsrs	r3, r3, #8
 8006038:	b29b      	uxth	r3, r3
 800603a:	b2da      	uxtb	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006042:	69fa      	ldr	r2, [r7, #28]
 8006044:	69b9      	ldr	r1, [r7, #24]
 8006046:	68f8      	ldr	r0, [r7, #12]
 8006048:	f000 f8ef 	bl	800622a <I2C_WaitOnTXISFlagUntilTimeout>
 800604c:	4603      	mov	r3, r0
 800604e:	2b00      	cmp	r3, #0
 8006050:	d001      	beq.n	8006056 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006052:	2301      	movs	r3, #1
 8006054:	e012      	b.n	800607c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006056:	893b      	ldrh	r3, [r7, #8]
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006060:	69fb      	ldr	r3, [r7, #28]
 8006062:	9300      	str	r3, [sp, #0]
 8006064:	69bb      	ldr	r3, [r7, #24]
 8006066:	2200      	movs	r2, #0
 8006068:	2180      	movs	r1, #128	@ 0x80
 800606a:	68f8      	ldr	r0, [r7, #12]
 800606c:	f000 f884 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8006070:	4603      	mov	r3, r0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d001      	beq.n	800607a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800607a:	2300      	movs	r3, #0
}
 800607c:	4618      	mov	r0, r3
 800607e:	3710      	adds	r7, #16
 8006080:	46bd      	mov	sp, r7
 8006082:	bd80      	pop	{r7, pc}
 8006084:	80002000 	.word	0x80002000

08006088 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	4608      	mov	r0, r1
 8006092:	4611      	mov	r1, r2
 8006094:	461a      	mov	r2, r3
 8006096:	4603      	mov	r3, r0
 8006098:	817b      	strh	r3, [r7, #10]
 800609a:	460b      	mov	r3, r1
 800609c:	813b      	strh	r3, [r7, #8]
 800609e:	4613      	mov	r3, r2
 80060a0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80060a2:	88fb      	ldrh	r3, [r7, #6]
 80060a4:	b2da      	uxtb	r2, r3
 80060a6:	8979      	ldrh	r1, [r7, #10]
 80060a8:	4b20      	ldr	r3, [pc, #128]	@ (800612c <I2C_RequestMemoryRead+0xa4>)
 80060aa:	9300      	str	r3, [sp, #0]
 80060ac:	2300      	movs	r3, #0
 80060ae:	68f8      	ldr	r0, [r7, #12]
 80060b0:	f000 fab2 	bl	8006618 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060b4:	69fa      	ldr	r2, [r7, #28]
 80060b6:	69b9      	ldr	r1, [r7, #24]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f000 f8b6 	bl	800622a <I2C_WaitOnTXISFlagUntilTimeout>
 80060be:	4603      	mov	r3, r0
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d001      	beq.n	80060c8 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	e02c      	b.n	8006122 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80060c8:	88fb      	ldrh	r3, [r7, #6]
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d105      	bne.n	80060da <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060ce:	893b      	ldrh	r3, [r7, #8]
 80060d0:	b2da      	uxtb	r2, r3
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80060d8:	e015      	b.n	8006106 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80060da:	893b      	ldrh	r3, [r7, #8]
 80060dc:	0a1b      	lsrs	r3, r3, #8
 80060de:	b29b      	uxth	r3, r3
 80060e0:	b2da      	uxtb	r2, r3
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80060e8:	69fa      	ldr	r2, [r7, #28]
 80060ea:	69b9      	ldr	r1, [r7, #24]
 80060ec:	68f8      	ldr	r0, [r7, #12]
 80060ee:	f000 f89c 	bl	800622a <I2C_WaitOnTXISFlagUntilTimeout>
 80060f2:	4603      	mov	r3, r0
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d001      	beq.n	80060fc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80060f8:	2301      	movs	r3, #1
 80060fa:	e012      	b.n	8006122 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80060fc:	893b      	ldrh	r3, [r7, #8]
 80060fe:	b2da      	uxtb	r2, r3
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006106:	69fb      	ldr	r3, [r7, #28]
 8006108:	9300      	str	r3, [sp, #0]
 800610a:	69bb      	ldr	r3, [r7, #24]
 800610c:	2200      	movs	r2, #0
 800610e:	2140      	movs	r1, #64	@ 0x40
 8006110:	68f8      	ldr	r0, [r7, #12]
 8006112:	f000 f831 	bl	8006178 <I2C_WaitOnFlagUntilTimeout>
 8006116:	4603      	mov	r3, r0
 8006118:	2b00      	cmp	r3, #0
 800611a:	d001      	beq.n	8006120 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800611c:	2301      	movs	r3, #1
 800611e:	e000      	b.n	8006122 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006120:	2300      	movs	r3, #0
}
 8006122:	4618      	mov	r0, r3
 8006124:	3710      	adds	r7, #16
 8006126:	46bd      	mov	sp, r7
 8006128:	bd80      	pop	{r7, pc}
 800612a:	bf00      	nop
 800612c:	80002000 	.word	0x80002000

08006130 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006130:	b480      	push	{r7}
 8006132:	b083      	sub	sp, #12
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	f003 0302 	and.w	r3, r3, #2
 8006142:	2b02      	cmp	r3, #2
 8006144:	d103      	bne.n	800614e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2200      	movs	r2, #0
 800614c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	699b      	ldr	r3, [r3, #24]
 8006154:	f003 0301 	and.w	r3, r3, #1
 8006158:	2b01      	cmp	r3, #1
 800615a:	d007      	beq.n	800616c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	699a      	ldr	r2, [r3, #24]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	619a      	str	r2, [r3, #24]
  }
}
 800616c:	bf00      	nop
 800616e:	370c      	adds	r7, #12
 8006170:	46bd      	mov	sp, r7
 8006172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006176:	4770      	bx	lr

08006178 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006178:	b580      	push	{r7, lr}
 800617a:	b084      	sub	sp, #16
 800617c:	af00      	add	r7, sp, #0
 800617e:	60f8      	str	r0, [r7, #12]
 8006180:	60b9      	str	r1, [r7, #8]
 8006182:	603b      	str	r3, [r7, #0]
 8006184:	4613      	mov	r3, r2
 8006186:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006188:	e03b      	b.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800618a:	69ba      	ldr	r2, [r7, #24]
 800618c:	6839      	ldr	r1, [r7, #0]
 800618e:	68f8      	ldr	r0, [r7, #12]
 8006190:	f000 f962 	bl	8006458 <I2C_IsErrorOccurred>
 8006194:	4603      	mov	r3, r0
 8006196:	2b00      	cmp	r3, #0
 8006198:	d001      	beq.n	800619e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800619a:	2301      	movs	r3, #1
 800619c:	e041      	b.n	8006222 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061a4:	d02d      	beq.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061a6:	f7fe fd79 	bl	8004c9c <HAL_GetTick>
 80061aa:	4602      	mov	r2, r0
 80061ac:	69bb      	ldr	r3, [r7, #24]
 80061ae:	1ad3      	subs	r3, r2, r3
 80061b0:	683a      	ldr	r2, [r7, #0]
 80061b2:	429a      	cmp	r2, r3
 80061b4:	d302      	bcc.n	80061bc <I2C_WaitOnFlagUntilTimeout+0x44>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d122      	bne.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	699a      	ldr	r2, [r3, #24]
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	4013      	ands	r3, r2
 80061c6:	68ba      	ldr	r2, [r7, #8]
 80061c8:	429a      	cmp	r2, r3
 80061ca:	bf0c      	ite	eq
 80061cc:	2301      	moveq	r3, #1
 80061ce:	2300      	movne	r3, #0
 80061d0:	b2db      	uxtb	r3, r3
 80061d2:	461a      	mov	r2, r3
 80061d4:	79fb      	ldrb	r3, [r7, #7]
 80061d6:	429a      	cmp	r2, r3
 80061d8:	d113      	bne.n	8006202 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80061de:	f043 0220 	orr.w	r2, r3, #32
 80061e2:	68fb      	ldr	r3, [r7, #12]
 80061e4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	2220      	movs	r2, #32
 80061ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80061fe:	2301      	movs	r3, #1
 8006200:	e00f      	b.n	8006222 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	699a      	ldr	r2, [r3, #24]
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	4013      	ands	r3, r2
 800620c:	68ba      	ldr	r2, [r7, #8]
 800620e:	429a      	cmp	r2, r3
 8006210:	bf0c      	ite	eq
 8006212:	2301      	moveq	r3, #1
 8006214:	2300      	movne	r3, #0
 8006216:	b2db      	uxtb	r3, r3
 8006218:	461a      	mov	r2, r3
 800621a:	79fb      	ldrb	r3, [r7, #7]
 800621c:	429a      	cmp	r2, r3
 800621e:	d0b4      	beq.n	800618a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3710      	adds	r7, #16
 8006226:	46bd      	mov	sp, r7
 8006228:	bd80      	pop	{r7, pc}

0800622a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800622a:	b580      	push	{r7, lr}
 800622c:	b084      	sub	sp, #16
 800622e:	af00      	add	r7, sp, #0
 8006230:	60f8      	str	r0, [r7, #12]
 8006232:	60b9      	str	r1, [r7, #8]
 8006234:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006236:	e033      	b.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f90b 	bl	8006458 <I2C_IsErrorOccurred>
 8006242:	4603      	mov	r3, r0
 8006244:	2b00      	cmp	r3, #0
 8006246:	d001      	beq.n	800624c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e031      	b.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800624c:	68bb      	ldr	r3, [r7, #8]
 800624e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006252:	d025      	beq.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006254:	f7fe fd22 	bl	8004c9c <HAL_GetTick>
 8006258:	4602      	mov	r2, r0
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	1ad3      	subs	r3, r2, r3
 800625e:	68ba      	ldr	r2, [r7, #8]
 8006260:	429a      	cmp	r2, r3
 8006262:	d302      	bcc.n	800626a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d11a      	bne.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	699b      	ldr	r3, [r3, #24]
 8006270:	f003 0302 	and.w	r3, r3, #2
 8006274:	2b02      	cmp	r3, #2
 8006276:	d013      	beq.n	80062a0 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800627c:	f043 0220 	orr.w	r2, r3, #32
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2220      	movs	r2, #32
 8006288:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800629c:	2301      	movs	r3, #1
 800629e:	e007      	b.n	80062b0 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	699b      	ldr	r3, [r3, #24]
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	2b02      	cmp	r3, #2
 80062ac:	d1c4      	bne.n	8006238 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80062ae:	2300      	movs	r3, #0
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	3710      	adds	r7, #16
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	60f8      	str	r0, [r7, #12]
 80062c0:	60b9      	str	r1, [r7, #8]
 80062c2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80062c4:	e02f      	b.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c6:	687a      	ldr	r2, [r7, #4]
 80062c8:	68b9      	ldr	r1, [r7, #8]
 80062ca:	68f8      	ldr	r0, [r7, #12]
 80062cc:	f000 f8c4 	bl	8006458 <I2C_IsErrorOccurred>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e02d      	b.n	8006336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062da:	f7fe fcdf 	bl	8004c9c <HAL_GetTick>
 80062de:	4602      	mov	r2, r0
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	68ba      	ldr	r2, [r7, #8]
 80062e6:	429a      	cmp	r2, r3
 80062e8:	d302      	bcc.n	80062f0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d11a      	bne.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	f003 0320 	and.w	r3, r3, #32
 80062fa:	2b20      	cmp	r3, #32
 80062fc:	d013      	beq.n	8006326 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006302:	f043 0220 	orr.w	r2, r3, #32
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2220      	movs	r2, #32
 800630e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e007      	b.n	8006336 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	699b      	ldr	r3, [r3, #24]
 800632c:	f003 0320 	and.w	r3, r3, #32
 8006330:	2b20      	cmp	r3, #32
 8006332:	d1c8      	bne.n	80062c6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006334:	2300      	movs	r3, #0
}
 8006336:	4618      	mov	r0, r3
 8006338:	3710      	adds	r7, #16
 800633a:	46bd      	mov	sp, r7
 800633c:	bd80      	pop	{r7, pc}
	...

08006340 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b086      	sub	sp, #24
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800634c:	2300      	movs	r3, #0
 800634e:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006350:	e071      	b.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	68b9      	ldr	r1, [r7, #8]
 8006356:	68f8      	ldr	r0, [r7, #12]
 8006358:	f000 f87e 	bl	8006458 <I2C_IsErrorOccurred>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d001      	beq.n	8006366 <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8006362:	2301      	movs	r3, #1
 8006364:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	699b      	ldr	r3, [r3, #24]
 800636c:	f003 0320 	and.w	r3, r3, #32
 8006370:	2b20      	cmp	r3, #32
 8006372:	d13b      	bne.n	80063ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8006374:	7dfb      	ldrb	r3, [r7, #23]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d138      	bne.n	80063ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	699b      	ldr	r3, [r3, #24]
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b04      	cmp	r3, #4
 8006386:	d105      	bne.n	8006394 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800638c:	2b00      	cmp	r3, #0
 800638e:	d001      	beq.n	8006394 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8006390:	2300      	movs	r3, #0
 8006392:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	699b      	ldr	r3, [r3, #24]
 800639a:	f003 0310 	and.w	r3, r3, #16
 800639e:	2b10      	cmp	r3, #16
 80063a0:	d121      	bne.n	80063e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	2210      	movs	r2, #16
 80063a8:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	2204      	movs	r2, #4
 80063ae:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	2220      	movs	r2, #32
 80063b6:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	681b      	ldr	r3, [r3, #0]
 80063bc:	6859      	ldr	r1, [r3, #4]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	681a      	ldr	r2, [r3, #0]
 80063c2:	4b24      	ldr	r3, [pc, #144]	@ (8006454 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80063c4:	400b      	ands	r3, r1
 80063c6:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	2220      	movs	r2, #32
 80063cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2200      	movs	r2, #0
 80063d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80063e0:	2301      	movs	r3, #1
 80063e2:	75fb      	strb	r3, [r7, #23]
 80063e4:	e002      	b.n	80063ec <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	2200      	movs	r2, #0
 80063ea:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80063ec:	f7fe fc56 	bl	8004c9c <HAL_GetTick>
 80063f0:	4602      	mov	r2, r0
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	1ad3      	subs	r3, r2, r3
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d302      	bcc.n	8006402 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80063fc:	68bb      	ldr	r3, [r7, #8]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d119      	bne.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 8006402:	7dfb      	ldrb	r3, [r7, #23]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d116      	bne.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f003 0304 	and.w	r3, r3, #4
 8006412:	2b04      	cmp	r3, #4
 8006414:	d00f      	beq.n	8006436 <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641a:	f043 0220 	orr.w	r2, r3, #32
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	2220      	movs	r2, #32
 8006426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8006432:	2301      	movs	r3, #1
 8006434:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	2b04      	cmp	r3, #4
 8006442:	d002      	beq.n	800644a <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8006444:	7dfb      	ldrb	r3, [r7, #23]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d083      	beq.n	8006352 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800644a:	7dfb      	ldrb	r3, [r7, #23]
}
 800644c:	4618      	mov	r0, r3
 800644e:	3718      	adds	r7, #24
 8006450:	46bd      	mov	sp, r7
 8006452:	bd80      	pop	{r7, pc}
 8006454:	fe00e800 	.word	0xfe00e800

08006458 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b08a      	sub	sp, #40	@ 0x28
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006464:	2300      	movs	r3, #0
 8006466:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	699b      	ldr	r3, [r3, #24]
 8006470:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006472:	2300      	movs	r3, #0
 8006474:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800647a:	69bb      	ldr	r3, [r7, #24]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b00      	cmp	r3, #0
 8006482:	d068      	beq.n	8006556 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2210      	movs	r2, #16
 800648a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800648c:	e049      	b.n	8006522 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006494:	d045      	beq.n	8006522 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006496:	f7fe fc01 	bl	8004c9c <HAL_GetTick>
 800649a:	4602      	mov	r2, r0
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	1ad3      	subs	r3, r2, r3
 80064a0:	68ba      	ldr	r2, [r7, #8]
 80064a2:	429a      	cmp	r2, r3
 80064a4:	d302      	bcc.n	80064ac <I2C_IsErrorOccurred+0x54>
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d13a      	bne.n	8006522 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	685b      	ldr	r3, [r3, #4]
 80064b2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80064b6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80064be:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80064ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80064ce:	d121      	bne.n	8006514 <I2C_IsErrorOccurred+0xbc>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80064d6:	d01d      	beq.n	8006514 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80064d8:	7cfb      	ldrb	r3, [r7, #19]
 80064da:	2b20      	cmp	r3, #32
 80064dc:	d01a      	beq.n	8006514 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	685a      	ldr	r2, [r3, #4]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80064ec:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80064ee:	f7fe fbd5 	bl	8004c9c <HAL_GetTick>
 80064f2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80064f4:	e00e      	b.n	8006514 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80064f6:	f7fe fbd1 	bl	8004c9c <HAL_GetTick>
 80064fa:	4602      	mov	r2, r0
 80064fc:	69fb      	ldr	r3, [r7, #28]
 80064fe:	1ad3      	subs	r3, r2, r3
 8006500:	2b19      	cmp	r3, #25
 8006502:	d907      	bls.n	8006514 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8006504:	6a3b      	ldr	r3, [r7, #32]
 8006506:	f043 0320 	orr.w	r3, r3, #32
 800650a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800650c:	2301      	movs	r3, #1
 800650e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8006512:	e006      	b.n	8006522 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	699b      	ldr	r3, [r3, #24]
 800651a:	f003 0320 	and.w	r3, r3, #32
 800651e:	2b20      	cmp	r3, #32
 8006520:	d1e9      	bne.n	80064f6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	699b      	ldr	r3, [r3, #24]
 8006528:	f003 0320 	and.w	r3, r3, #32
 800652c:	2b20      	cmp	r3, #32
 800652e:	d003      	beq.n	8006538 <I2C_IsErrorOccurred+0xe0>
 8006530:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006534:	2b00      	cmp	r3, #0
 8006536:	d0aa      	beq.n	800648e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006538:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800653c:	2b00      	cmp	r3, #0
 800653e:	d103      	bne.n	8006548 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	2220      	movs	r2, #32
 8006546:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006548:	6a3b      	ldr	r3, [r7, #32]
 800654a:	f043 0304 	orr.w	r3, r3, #4
 800654e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	699b      	ldr	r3, [r3, #24]
 800655c:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800655e:	69bb      	ldr	r3, [r7, #24]
 8006560:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006564:	2b00      	cmp	r3, #0
 8006566:	d00b      	beq.n	8006580 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006568:	6a3b      	ldr	r3, [r7, #32]
 800656a:	f043 0301 	orr.w	r3, r3, #1
 800656e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006578:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800657a:	2301      	movs	r3, #1
 800657c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8006580:	69bb      	ldr	r3, [r7, #24]
 8006582:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00b      	beq.n	80065a2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800658a:	6a3b      	ldr	r3, [r7, #32]
 800658c:	f043 0308 	orr.w	r3, r3, #8
 8006590:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800659a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800659c:	2301      	movs	r3, #1
 800659e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80065a2:	69bb      	ldr	r3, [r7, #24]
 80065a4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80065ac:	6a3b      	ldr	r3, [r7, #32]
 80065ae:	f043 0302 	orr.w	r3, r3, #2
 80065b2:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80065bc:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80065c4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d01c      	beq.n	8006606 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f7ff fdaf 	bl	8006130 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6859      	ldr	r1, [r3, #4]
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	4b0d      	ldr	r3, [pc, #52]	@ (8006614 <I2C_IsErrorOccurred+0x1bc>)
 80065de:	400b      	ands	r3, r1
 80065e0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80065e6:	6a3b      	ldr	r3, [r7, #32]
 80065e8:	431a      	orrs	r2, r3
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2220      	movs	r2, #32
 80065f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	2200      	movs	r2, #0
 8006602:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8006606:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800660a:	4618      	mov	r0, r3
 800660c:	3728      	adds	r7, #40	@ 0x28
 800660e:	46bd      	mov	sp, r7
 8006610:	bd80      	pop	{r7, pc}
 8006612:	bf00      	nop
 8006614:	fe00e800 	.word	0xfe00e800

08006618 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006618:	b480      	push	{r7}
 800661a:	b087      	sub	sp, #28
 800661c:	af00      	add	r7, sp, #0
 800661e:	60f8      	str	r0, [r7, #12]
 8006620:	607b      	str	r3, [r7, #4]
 8006622:	460b      	mov	r3, r1
 8006624:	817b      	strh	r3, [r7, #10]
 8006626:	4613      	mov	r3, r2
 8006628:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800662a:	897b      	ldrh	r3, [r7, #10]
 800662c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006630:	7a7b      	ldrb	r3, [r7, #9]
 8006632:	041b      	lsls	r3, r3, #16
 8006634:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006638:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800663e:	6a3b      	ldr	r3, [r7, #32]
 8006640:	4313      	orrs	r3, r2
 8006642:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006646:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	685a      	ldr	r2, [r3, #4]
 800664e:	6a3b      	ldr	r3, [r7, #32]
 8006650:	0d5b      	lsrs	r3, r3, #21
 8006652:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8006656:	4b08      	ldr	r3, [pc, #32]	@ (8006678 <I2C_TransferConfig+0x60>)
 8006658:	430b      	orrs	r3, r1
 800665a:	43db      	mvns	r3, r3
 800665c:	ea02 0103 	and.w	r1, r2, r3
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	03ff63ff 	.word	0x03ff63ff

0800667c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
 8006684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800668c:	b2db      	uxtb	r3, r3
 800668e:	2b20      	cmp	r3, #32
 8006690:	d138      	bne.n	8006704 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8006698:	2b01      	cmp	r3, #1
 800669a:	d101      	bne.n	80066a0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800669c:	2302      	movs	r3, #2
 800669e:	e032      	b.n	8006706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	2201      	movs	r2, #1
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2224      	movs	r2, #36	@ 0x24
 80066ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	681a      	ldr	r2, [r3, #0]
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f022 0201 	bic.w	r2, r2, #1
 80066be:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80066ce:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	6819      	ldr	r1, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	683a      	ldr	r2, [r7, #0]
 80066dc:	430a      	orrs	r2, r1
 80066de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	681a      	ldr	r2, [r3, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f042 0201 	orr.w	r2, r2, #1
 80066ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	2220      	movs	r2, #32
 80066f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2200      	movs	r2, #0
 80066fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006700:	2300      	movs	r3, #0
 8006702:	e000      	b.n	8006706 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006704:	2302      	movs	r3, #2
  }
}
 8006706:	4618      	mov	r0, r3
 8006708:	370c      	adds	r7, #12
 800670a:	46bd      	mov	sp, r7
 800670c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006710:	4770      	bx	lr

08006712 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006712:	b480      	push	{r7}
 8006714:	b085      	sub	sp, #20
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
 800671a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006722:	b2db      	uxtb	r3, r3
 8006724:	2b20      	cmp	r3, #32
 8006726:	d139      	bne.n	800679c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800672e:	2b01      	cmp	r3, #1
 8006730:	d101      	bne.n	8006736 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006732:	2302      	movs	r3, #2
 8006734:	e033      	b.n	800679e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2201      	movs	r2, #1
 800673a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2224      	movs	r2, #36	@ 0x24
 8006742:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	681a      	ldr	r2, [r3, #0]
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	f022 0201 	bic.w	r2, r2, #1
 8006754:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8006764:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	021b      	lsls	r3, r3, #8
 800676a:	68fa      	ldr	r2, [r7, #12]
 800676c:	4313      	orrs	r3, r2
 800676e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	681a      	ldr	r2, [r3, #0]
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0201 	orr.w	r2, r2, #1
 8006786:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8006798:	2300      	movs	r3, #0
 800679a:	e000      	b.n	800679e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800679c:	2302      	movs	r3, #2
  }
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3714      	adds	r7, #20
 80067a2:	46bd      	mov	sp, r7
 80067a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067a8:	4770      	bx	lr
	...

080067ac <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80067ac:	b480      	push	{r7}
 80067ae:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80067b0:	4b04      	ldr	r3, [pc, #16]	@ (80067c4 <HAL_PWREx_GetVoltageRange+0x18>)
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 80067b8:	4618      	mov	r0, r3
 80067ba:	46bd      	mov	sp, r7
 80067bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c0:	4770      	bx	lr
 80067c2:	bf00      	nop
 80067c4:	40007000 	.word	0x40007000

080067c8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b085      	sub	sp, #20
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067d6:	d130      	bne.n	800683a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80067d8:	4b23      	ldr	r3, [pc, #140]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80067e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80067e4:	d038      	beq.n	8006858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80067e6:	4b20      	ldr	r3, [pc, #128]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80067ee:	4a1e      	ldr	r2, [pc, #120]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80067f4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067f6:	4b1d      	ldr	r3, [pc, #116]	@ (800686c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	2232      	movs	r2, #50	@ 0x32
 80067fc:	fb02 f303 	mul.w	r3, r2, r3
 8006800:	4a1b      	ldr	r2, [pc, #108]	@ (8006870 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006802:	fba2 2303 	umull	r2, r3, r2, r3
 8006806:	0c9b      	lsrs	r3, r3, #18
 8006808:	3301      	adds	r3, #1
 800680a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800680c:	e002      	b.n	8006814 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	3b01      	subs	r3, #1
 8006812:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006814:	4b14      	ldr	r3, [pc, #80]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006816:	695b      	ldr	r3, [r3, #20]
 8006818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800681c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006820:	d102      	bne.n	8006828 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d1f2      	bne.n	800680e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006828:	4b0f      	ldr	r3, [pc, #60]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006830:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006834:	d110      	bne.n	8006858 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006836:	2303      	movs	r3, #3
 8006838:	e00f      	b.n	800685a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800683a:	4b0b      	ldr	r3, [pc, #44]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006842:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006846:	d007      	beq.n	8006858 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006848:	4b07      	ldr	r3, [pc, #28]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8006850:	4a05      	ldr	r2, [pc, #20]	@ (8006868 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006856:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006858:	2300      	movs	r3, #0
}
 800685a:	4618      	mov	r0, r3
 800685c:	3714      	adds	r7, #20
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr
 8006866:	bf00      	nop
 8006868:	40007000 	.word	0x40007000
 800686c:	20000004 	.word	0x20000004
 8006870:	431bde83 	.word	0x431bde83

08006874 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b088      	sub	sp, #32
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d101      	bne.n	8006886 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e3ca      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006886:	4b97      	ldr	r3, [pc, #604]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006888:	689b      	ldr	r3, [r3, #8]
 800688a:	f003 030c 	and.w	r3, r3, #12
 800688e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006890:	4b94      	ldr	r3, [pc, #592]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006892:	68db      	ldr	r3, [r3, #12]
 8006894:	f003 0303 	and.w	r3, r3, #3
 8006898:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0310 	and.w	r3, r3, #16
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	f000 80e4 	beq.w	8006a70 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d007      	beq.n	80068be <HAL_RCC_OscConfig+0x4a>
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	2b0c      	cmp	r3, #12
 80068b2:	f040 808b 	bne.w	80069cc <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	2b01      	cmp	r3, #1
 80068ba:	f040 8087 	bne.w	80069cc <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80068be:	4b89      	ldr	r3, [pc, #548]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f003 0302 	and.w	r3, r3, #2
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d005      	beq.n	80068d6 <HAL_RCC_OscConfig+0x62>
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	699b      	ldr	r3, [r3, #24]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d101      	bne.n	80068d6 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e3a2      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1a      	ldr	r2, [r3, #32]
 80068da:	4b82      	ldr	r3, [pc, #520]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <HAL_RCC_OscConfig+0x7c>
 80068e6:	4b7f      	ldr	r3, [pc, #508]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068ee:	e005      	b.n	80068fc <HAL_RCC_OscConfig+0x88>
 80068f0:	4b7c      	ldr	r3, [pc, #496]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80068f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80068f6:	091b      	lsrs	r3, r3, #4
 80068f8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d223      	bcs.n	8006948 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a1b      	ldr	r3, [r3, #32]
 8006904:	4618      	mov	r0, r3
 8006906:	f000 fd55 	bl	80073b4 <RCC_SetFlashLatencyFromMSIRange>
 800690a:	4603      	mov	r3, r0
 800690c:	2b00      	cmp	r3, #0
 800690e:	d001      	beq.n	8006914 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8006910:	2301      	movs	r3, #1
 8006912:	e383      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006914:	4b73      	ldr	r3, [pc, #460]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	4a72      	ldr	r2, [pc, #456]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 800691a:	f043 0308 	orr.w	r3, r3, #8
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	4b70      	ldr	r3, [pc, #448]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	6a1b      	ldr	r3, [r3, #32]
 800692c:	496d      	ldr	r1, [pc, #436]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 800692e:	4313      	orrs	r3, r2
 8006930:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006932:	4b6c      	ldr	r3, [pc, #432]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	69db      	ldr	r3, [r3, #28]
 800693e:	021b      	lsls	r3, r3, #8
 8006940:	4968      	ldr	r1, [pc, #416]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006942:	4313      	orrs	r3, r2
 8006944:	604b      	str	r3, [r1, #4]
 8006946:	e025      	b.n	8006994 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006948:	4b66      	ldr	r3, [pc, #408]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	4a65      	ldr	r2, [pc, #404]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 800694e:	f043 0308 	orr.w	r3, r3, #8
 8006952:	6013      	str	r3, [r2, #0]
 8006954:	4b63      	ldr	r3, [pc, #396]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	6a1b      	ldr	r3, [r3, #32]
 8006960:	4960      	ldr	r1, [pc, #384]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006962:	4313      	orrs	r3, r2
 8006964:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006966:	4b5f      	ldr	r3, [pc, #380]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	69db      	ldr	r3, [r3, #28]
 8006972:	021b      	lsls	r3, r3, #8
 8006974:	495b      	ldr	r1, [pc, #364]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006976:	4313      	orrs	r3, r2
 8006978:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d109      	bne.n	8006994 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6a1b      	ldr	r3, [r3, #32]
 8006984:	4618      	mov	r0, r3
 8006986:	f000 fd15 	bl	80073b4 <RCC_SetFlashLatencyFromMSIRange>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d001      	beq.n	8006994 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8006990:	2301      	movs	r3, #1
 8006992:	e343      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006994:	f000 fc4a 	bl	800722c <HAL_RCC_GetSysClockFreq>
 8006998:	4602      	mov	r2, r0
 800699a:	4b52      	ldr	r3, [pc, #328]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	091b      	lsrs	r3, r3, #4
 80069a0:	f003 030f 	and.w	r3, r3, #15
 80069a4:	4950      	ldr	r1, [pc, #320]	@ (8006ae8 <HAL_RCC_OscConfig+0x274>)
 80069a6:	5ccb      	ldrb	r3, [r1, r3]
 80069a8:	f003 031f 	and.w	r3, r3, #31
 80069ac:	fa22 f303 	lsr.w	r3, r2, r3
 80069b0:	4a4e      	ldr	r2, [pc, #312]	@ (8006aec <HAL_RCC_OscConfig+0x278>)
 80069b2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80069b4:	4b4e      	ldr	r3, [pc, #312]	@ (8006af0 <HAL_RCC_OscConfig+0x27c>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4618      	mov	r0, r3
 80069ba:	f7fe f91f 	bl	8004bfc <HAL_InitTick>
 80069be:	4603      	mov	r3, r0
 80069c0:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80069c2:	7bfb      	ldrb	r3, [r7, #15]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d052      	beq.n	8006a6e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
 80069ca:	e327      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	699b      	ldr	r3, [r3, #24]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d032      	beq.n	8006a3a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80069d4:	4b43      	ldr	r3, [pc, #268]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a42      	ldr	r2, [pc, #264]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80069da:	f043 0301 	orr.w	r3, r3, #1
 80069de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80069e0:	f7fe f95c 	bl	8004c9c <HAL_GetTick>
 80069e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069e6:	e008      	b.n	80069fa <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069e8:	f7fe f958 	bl	8004c9c <HAL_GetTick>
 80069ec:	4602      	mov	r2, r0
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	1ad3      	subs	r3, r2, r3
 80069f2:	2b02      	cmp	r3, #2
 80069f4:	d901      	bls.n	80069fa <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80069f6:	2303      	movs	r3, #3
 80069f8:	e310      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069fa:	4b3a      	ldr	r3, [pc, #232]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d0f0      	beq.n	80069e8 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006a06:	4b37      	ldr	r3, [pc, #220]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	4a36      	ldr	r2, [pc, #216]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a0c:	f043 0308 	orr.w	r3, r3, #8
 8006a10:	6013      	str	r3, [r2, #0]
 8006a12:	4b34      	ldr	r3, [pc, #208]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a1b      	ldr	r3, [r3, #32]
 8006a1e:	4931      	ldr	r1, [pc, #196]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a20:	4313      	orrs	r3, r2
 8006a22:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006a24:	4b2f      	ldr	r3, [pc, #188]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	69db      	ldr	r3, [r3, #28]
 8006a30:	021b      	lsls	r3, r3, #8
 8006a32:	492c      	ldr	r1, [pc, #176]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a34:	4313      	orrs	r3, r2
 8006a36:	604b      	str	r3, [r1, #4]
 8006a38:	e01a      	b.n	8006a70 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006a3a:	4b2a      	ldr	r3, [pc, #168]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	4a29      	ldr	r2, [pc, #164]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a40:	f023 0301 	bic.w	r3, r3, #1
 8006a44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a46:	f7fe f929 	bl	8004c9c <HAL_GetTick>
 8006a4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a4c:	e008      	b.n	8006a60 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a4e:	f7fe f925 	bl	8004c9c <HAL_GetTick>
 8006a52:	4602      	mov	r2, r0
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	1ad3      	subs	r3, r2, r3
 8006a58:	2b02      	cmp	r3, #2
 8006a5a:	d901      	bls.n	8006a60 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8006a5c:	2303      	movs	r3, #3
 8006a5e:	e2dd      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a60:	4b20      	ldr	r3, [pc, #128]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0302 	and.w	r3, r3, #2
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d1f0      	bne.n	8006a4e <HAL_RCC_OscConfig+0x1da>
 8006a6c:	e000      	b.n	8006a70 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a6e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f003 0301 	and.w	r3, r3, #1
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	d074      	beq.n	8006b66 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a7c:	69bb      	ldr	r3, [r7, #24]
 8006a7e:	2b08      	cmp	r3, #8
 8006a80:	d005      	beq.n	8006a8e <HAL_RCC_OscConfig+0x21a>
 8006a82:	69bb      	ldr	r3, [r7, #24]
 8006a84:	2b0c      	cmp	r3, #12
 8006a86:	d10e      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	2b03      	cmp	r3, #3
 8006a8c:	d10b      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a8e:	4b15      	ldr	r3, [pc, #84]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d064      	beq.n	8006b64 <HAL_RCC_OscConfig+0x2f0>
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	685b      	ldr	r3, [r3, #4]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d160      	bne.n	8006b64 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	e2ba      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006aae:	d106      	bne.n	8006abe <HAL_RCC_OscConfig+0x24a>
 8006ab0:	4b0c      	ldr	r3, [pc, #48]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	4a0b      	ldr	r2, [pc, #44]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006ab6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006aba:	6013      	str	r3, [r2, #0]
 8006abc:	e026      	b.n	8006b0c <HAL_RCC_OscConfig+0x298>
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006ac6:	d115      	bne.n	8006af4 <HAL_RCC_OscConfig+0x280>
 8006ac8:	4b06      	ldr	r3, [pc, #24]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	4a05      	ldr	r2, [pc, #20]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006ace:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006ad2:	6013      	str	r3, [r2, #0]
 8006ad4:	4b03      	ldr	r3, [pc, #12]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	4a02      	ldr	r2, [pc, #8]	@ (8006ae4 <HAL_RCC_OscConfig+0x270>)
 8006ada:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006ade:	6013      	str	r3, [r2, #0]
 8006ae0:	e014      	b.n	8006b0c <HAL_RCC_OscConfig+0x298>
 8006ae2:	bf00      	nop
 8006ae4:	40021000 	.word	0x40021000
 8006ae8:	0800e140 	.word	0x0800e140
 8006aec:	20000004 	.word	0x20000004
 8006af0:	20000008 	.word	0x20000008
 8006af4:	4ba0      	ldr	r3, [pc, #640]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	4a9f      	ldr	r2, [pc, #636]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006afa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006afe:	6013      	str	r3, [r2, #0]
 8006b00:	4b9d      	ldr	r3, [pc, #628]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4a9c      	ldr	r2, [pc, #624]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006b06:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006b0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	685b      	ldr	r3, [r3, #4]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d013      	beq.n	8006b3c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b14:	f7fe f8c2 	bl	8004c9c <HAL_GetTick>
 8006b18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b1a:	e008      	b.n	8006b2e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b1c:	f7fe f8be 	bl	8004c9c <HAL_GetTick>
 8006b20:	4602      	mov	r2, r0
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	1ad3      	subs	r3, r2, r3
 8006b26:	2b64      	cmp	r3, #100	@ 0x64
 8006b28:	d901      	bls.n	8006b2e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006b2a:	2303      	movs	r3, #3
 8006b2c:	e276      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006b2e:	4b92      	ldr	r3, [pc, #584]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d0f0      	beq.n	8006b1c <HAL_RCC_OscConfig+0x2a8>
 8006b3a:	e014      	b.n	8006b66 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b3c:	f7fe f8ae 	bl	8004c9c <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b42:	e008      	b.n	8006b56 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006b44:	f7fe f8aa 	bl	8004c9c <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	2b64      	cmp	r3, #100	@ 0x64
 8006b50:	d901      	bls.n	8006b56 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b52:	2303      	movs	r3, #3
 8006b54:	e262      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b56:	4b88      	ldr	r3, [pc, #544]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d1f0      	bne.n	8006b44 <HAL_RCC_OscConfig+0x2d0>
 8006b62:	e000      	b.n	8006b66 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f003 0302 	and.w	r3, r3, #2
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d060      	beq.n	8006c34 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b72:	69bb      	ldr	r3, [r7, #24]
 8006b74:	2b04      	cmp	r3, #4
 8006b76:	d005      	beq.n	8006b84 <HAL_RCC_OscConfig+0x310>
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	2b0c      	cmp	r3, #12
 8006b7c:	d119      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	2b02      	cmp	r3, #2
 8006b82:	d116      	bne.n	8006bb2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b84:	4b7c      	ldr	r3, [pc, #496]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d005      	beq.n	8006b9c <HAL_RCC_OscConfig+0x328>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d101      	bne.n	8006b9c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e23f      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b9c:	4b76      	ldr	r3, [pc, #472]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006b9e:	685b      	ldr	r3, [r3, #4]
 8006ba0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	691b      	ldr	r3, [r3, #16]
 8006ba8:	061b      	lsls	r3, r3, #24
 8006baa:	4973      	ldr	r1, [pc, #460]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006bac:	4313      	orrs	r3, r2
 8006bae:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006bb0:	e040      	b.n	8006c34 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	68db      	ldr	r3, [r3, #12]
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d023      	beq.n	8006c02 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006bba:	4b6f      	ldr	r3, [pc, #444]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006bc0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc6:	f7fe f869 	bl	8004c9c <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bce:	f7fe f865 	bl	8004c9c <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e21d      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006be0:	4b65      	ldr	r3, [pc, #404]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d0f0      	beq.n	8006bce <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006bec:	4b62      	ldr	r3, [pc, #392]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006bee:	685b      	ldr	r3, [r3, #4]
 8006bf0:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	691b      	ldr	r3, [r3, #16]
 8006bf8:	061b      	lsls	r3, r3, #24
 8006bfa:	495f      	ldr	r1, [pc, #380]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006bfc:	4313      	orrs	r3, r2
 8006bfe:	604b      	str	r3, [r1, #4]
 8006c00:	e018      	b.n	8006c34 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006c02:	4b5d      	ldr	r3, [pc, #372]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	4a5c      	ldr	r2, [pc, #368]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c08:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c0e:	f7fe f845 	bl	8004c9c <HAL_GetTick>
 8006c12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c14:	e008      	b.n	8006c28 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006c16:	f7fe f841 	bl	8004c9c <HAL_GetTick>
 8006c1a:	4602      	mov	r2, r0
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	1ad3      	subs	r3, r2, r3
 8006c20:	2b02      	cmp	r3, #2
 8006c22:	d901      	bls.n	8006c28 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006c24:	2303      	movs	r3, #3
 8006c26:	e1f9      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006c28:	4b53      	ldr	r3, [pc, #332]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1f0      	bne.n	8006c16 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	f003 0308 	and.w	r3, r3, #8
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d03c      	beq.n	8006cba <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	695b      	ldr	r3, [r3, #20]
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d01c      	beq.n	8006c82 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c48:	4b4b      	ldr	r3, [pc, #300]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c4e:	4a4a      	ldr	r2, [pc, #296]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c50:	f043 0301 	orr.w	r3, r3, #1
 8006c54:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c58:	f7fe f820 	bl	8004c9c <HAL_GetTick>
 8006c5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c5e:	e008      	b.n	8006c72 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c60:	f7fe f81c 	bl	8004c9c <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	2b02      	cmp	r3, #2
 8006c6c:	d901      	bls.n	8006c72 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e1d4      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c72:	4b41      	ldr	r3, [pc, #260]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c78:	f003 0302 	and.w	r3, r3, #2
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d0ef      	beq.n	8006c60 <HAL_RCC_OscConfig+0x3ec>
 8006c80:	e01b      	b.n	8006cba <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c82:	4b3d      	ldr	r3, [pc, #244]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c84:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006c88:	4a3b      	ldr	r2, [pc, #236]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006c8a:	f023 0301 	bic.w	r3, r3, #1
 8006c8e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c92:	f7fe f803 	bl	8004c9c <HAL_GetTick>
 8006c96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c98:	e008      	b.n	8006cac <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c9a:	f7fd ffff 	bl	8004c9c <HAL_GetTick>
 8006c9e:	4602      	mov	r2, r0
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	1ad3      	subs	r3, r2, r3
 8006ca4:	2b02      	cmp	r3, #2
 8006ca6:	d901      	bls.n	8006cac <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006ca8:	2303      	movs	r3, #3
 8006caa:	e1b7      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006cac:	4b32      	ldr	r3, [pc, #200]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006cae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8006cb2:	f003 0302 	and.w	r3, r3, #2
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d1ef      	bne.n	8006c9a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f003 0304 	and.w	r3, r3, #4
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	f000 80a6 	beq.w	8006e14 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006cc8:	2300      	movs	r3, #0
 8006cca:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006ccc:	4b2a      	ldr	r3, [pc, #168]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006cce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cd0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d10d      	bne.n	8006cf4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006cd8:	4b27      	ldr	r3, [pc, #156]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006cda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006cdc:	4a26      	ldr	r2, [pc, #152]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006cde:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006ce2:	6593      	str	r3, [r2, #88]	@ 0x58
 8006ce4:	4b24      	ldr	r3, [pc, #144]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006ce6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006ce8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006cec:	60bb      	str	r3, [r7, #8]
 8006cee:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cf4:	4b21      	ldr	r3, [pc, #132]	@ (8006d7c <HAL_RCC_OscConfig+0x508>)
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d118      	bne.n	8006d32 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006d00:	4b1e      	ldr	r3, [pc, #120]	@ (8006d7c <HAL_RCC_OscConfig+0x508>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	4a1d      	ldr	r2, [pc, #116]	@ (8006d7c <HAL_RCC_OscConfig+0x508>)
 8006d06:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006d0a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006d0c:	f7fd ffc6 	bl	8004c9c <HAL_GetTick>
 8006d10:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d12:	e008      	b.n	8006d26 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006d14:	f7fd ffc2 	bl	8004c9c <HAL_GetTick>
 8006d18:	4602      	mov	r2, r0
 8006d1a:	693b      	ldr	r3, [r7, #16]
 8006d1c:	1ad3      	subs	r3, r2, r3
 8006d1e:	2b02      	cmp	r3, #2
 8006d20:	d901      	bls.n	8006d26 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006d22:	2303      	movs	r3, #3
 8006d24:	e17a      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006d26:	4b15      	ldr	r3, [pc, #84]	@ (8006d7c <HAL_RCC_OscConfig+0x508>)
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d0f0      	beq.n	8006d14 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	2b01      	cmp	r3, #1
 8006d38:	d108      	bne.n	8006d4c <HAL_RCC_OscConfig+0x4d8>
 8006d3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006d3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d40:	4a0d      	ldr	r2, [pc, #52]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006d42:	f043 0301 	orr.w	r3, r3, #1
 8006d46:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d4a:	e029      	b.n	8006da0 <HAL_RCC_OscConfig+0x52c>
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	689b      	ldr	r3, [r3, #8]
 8006d50:	2b05      	cmp	r3, #5
 8006d52:	d115      	bne.n	8006d80 <HAL_RCC_OscConfig+0x50c>
 8006d54:	4b08      	ldr	r3, [pc, #32]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d5a:	4a07      	ldr	r2, [pc, #28]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006d5c:	f043 0304 	orr.w	r3, r3, #4
 8006d60:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d64:	4b04      	ldr	r3, [pc, #16]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006d66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d6a:	4a03      	ldr	r2, [pc, #12]	@ (8006d78 <HAL_RCC_OscConfig+0x504>)
 8006d6c:	f043 0301 	orr.w	r3, r3, #1
 8006d70:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d74:	e014      	b.n	8006da0 <HAL_RCC_OscConfig+0x52c>
 8006d76:	bf00      	nop
 8006d78:	40021000 	.word	0x40021000
 8006d7c:	40007000 	.word	0x40007000
 8006d80:	4b9c      	ldr	r3, [pc, #624]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d86:	4a9b      	ldr	r2, [pc, #620]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006d88:	f023 0301 	bic.w	r3, r3, #1
 8006d8c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8006d90:	4b98      	ldr	r3, [pc, #608]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006d96:	4a97      	ldr	r2, [pc, #604]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006d98:	f023 0304 	bic.w	r3, r3, #4
 8006d9c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	689b      	ldr	r3, [r3, #8]
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d016      	beq.n	8006dd6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006da8:	f7fd ff78 	bl	8004c9c <HAL_GetTick>
 8006dac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dae:	e00a      	b.n	8006dc6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006db0:	f7fd ff74 	bl	8004c9c <HAL_GetTick>
 8006db4:	4602      	mov	r2, r0
 8006db6:	693b      	ldr	r3, [r7, #16]
 8006db8:	1ad3      	subs	r3, r2, r3
 8006dba:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d901      	bls.n	8006dc6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006dc2:	2303      	movs	r3, #3
 8006dc4:	e12a      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006dc6:	4b8b      	ldr	r3, [pc, #556]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dcc:	f003 0302 	and.w	r3, r3, #2
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d0ed      	beq.n	8006db0 <HAL_RCC_OscConfig+0x53c>
 8006dd4:	e015      	b.n	8006e02 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006dd6:	f7fd ff61 	bl	8004c9c <HAL_GetTick>
 8006dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006ddc:	e00a      	b.n	8006df4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006dde:	f7fd ff5d 	bl	8004c9c <HAL_GetTick>
 8006de2:	4602      	mov	r2, r0
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	1ad3      	subs	r3, r2, r3
 8006de8:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d901      	bls.n	8006df4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e113      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006df4:	4b7f      	ldr	r3, [pc, #508]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006df6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006dfa:	f003 0302 	and.w	r3, r3, #2
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d1ed      	bne.n	8006dde <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006e02:	7ffb      	ldrb	r3, [r7, #31]
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d105      	bne.n	8006e14 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006e08:	4b7a      	ldr	r3, [pc, #488]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006e0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006e0c:	4a79      	ldr	r2, [pc, #484]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006e0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006e12:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	f000 80fe 	beq.w	800701a <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e22:	2b02      	cmp	r3, #2
 8006e24:	f040 80d0 	bne.w	8006fc8 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e28:	4b72      	ldr	r3, [pc, #456]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006e2a:	68db      	ldr	r3, [r3, #12]
 8006e2c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f003 0203 	and.w	r2, r3, #3
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e38:	429a      	cmp	r2, r3
 8006e3a:	d130      	bne.n	8006e9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e46:	3b01      	subs	r3, #1
 8006e48:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d127      	bne.n	8006e9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e4e:	697b      	ldr	r3, [r7, #20]
 8006e50:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e58:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e5a:	429a      	cmp	r2, r3
 8006e5c:	d11f      	bne.n	8006e9e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e5e:	697b      	ldr	r3, [r7, #20]
 8006e60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006e64:	687a      	ldr	r2, [r7, #4]
 8006e66:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e68:	2a07      	cmp	r2, #7
 8006e6a:	bf14      	ite	ne
 8006e6c:	2201      	movne	r2, #1
 8006e6e:	2200      	moveq	r2, #0
 8006e70:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e72:	4293      	cmp	r3, r2
 8006e74:	d113      	bne.n	8006e9e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e76:	697b      	ldr	r3, [r7, #20]
 8006e78:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006e80:	085b      	lsrs	r3, r3, #1
 8006e82:	3b01      	subs	r3, #1
 8006e84:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006e86:	429a      	cmp	r2, r3
 8006e88:	d109      	bne.n	8006e9e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006e8a:	697b      	ldr	r3, [r7, #20]
 8006e8c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e94:	085b      	lsrs	r3, r3, #1
 8006e96:	3b01      	subs	r3, #1
 8006e98:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d06e      	beq.n	8006f7c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006e9e:	69bb      	ldr	r3, [r7, #24]
 8006ea0:	2b0c      	cmp	r3, #12
 8006ea2:	d069      	beq.n	8006f78 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006ea4:	4b53      	ldr	r3, [pc, #332]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006eac:	2b00      	cmp	r3, #0
 8006eae:	d105      	bne.n	8006ebc <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8006eb0:	4b50      	ldr	r3, [pc, #320]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d001      	beq.n	8006ec0 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8006ebc:	2301      	movs	r3, #1
 8006ebe:	e0ad      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006ec0:	4b4c      	ldr	r3, [pc, #304]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	4a4b      	ldr	r2, [pc, #300]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006ec6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006eca:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ecc:	f7fd fee6 	bl	8004c9c <HAL_GetTick>
 8006ed0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ed2:	e008      	b.n	8006ee6 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006ed4:	f7fd fee2 	bl	8004c9c <HAL_GetTick>
 8006ed8:	4602      	mov	r2, r0
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	1ad3      	subs	r3, r2, r3
 8006ede:	2b02      	cmp	r3, #2
 8006ee0:	d901      	bls.n	8006ee6 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8006ee2:	2303      	movs	r3, #3
 8006ee4:	e09a      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ee6:	4b43      	ldr	r3, [pc, #268]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1f0      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ef2:	4b40      	ldr	r3, [pc, #256]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006ef4:	68da      	ldr	r2, [r3, #12]
 8006ef6:	4b40      	ldr	r3, [pc, #256]	@ (8006ff8 <HAL_RCC_OscConfig+0x784>)
 8006ef8:	4013      	ands	r3, r2
 8006efa:	687a      	ldr	r2, [r7, #4]
 8006efc:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8006efe:	687a      	ldr	r2, [r7, #4]
 8006f00:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8006f02:	3a01      	subs	r2, #1
 8006f04:	0112      	lsls	r2, r2, #4
 8006f06:	4311      	orrs	r1, r2
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006f0c:	0212      	lsls	r2, r2, #8
 8006f0e:	4311      	orrs	r1, r2
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8006f14:	0852      	lsrs	r2, r2, #1
 8006f16:	3a01      	subs	r2, #1
 8006f18:	0552      	lsls	r2, r2, #21
 8006f1a:	4311      	orrs	r1, r2
 8006f1c:	687a      	ldr	r2, [r7, #4]
 8006f1e:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8006f20:	0852      	lsrs	r2, r2, #1
 8006f22:	3a01      	subs	r2, #1
 8006f24:	0652      	lsls	r2, r2, #25
 8006f26:	4311      	orrs	r1, r2
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006f2c:	0912      	lsrs	r2, r2, #4
 8006f2e:	0452      	lsls	r2, r2, #17
 8006f30:	430a      	orrs	r2, r1
 8006f32:	4930      	ldr	r1, [pc, #192]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f34:	4313      	orrs	r3, r2
 8006f36:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f38:	4b2e      	ldr	r3, [pc, #184]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a2d      	ldr	r2, [pc, #180]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f3e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f42:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f44:	4b2b      	ldr	r3, [pc, #172]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	4a2a      	ldr	r2, [pc, #168]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f4a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f4e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f50:	f7fd fea4 	bl	8004c9c <HAL_GetTick>
 8006f54:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f56:	e008      	b.n	8006f6a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f58:	f7fd fea0 	bl	8004c9c <HAL_GetTick>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	693b      	ldr	r3, [r7, #16]
 8006f60:	1ad3      	subs	r3, r2, r3
 8006f62:	2b02      	cmp	r3, #2
 8006f64:	d901      	bls.n	8006f6a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8006f66:	2303      	movs	r3, #3
 8006f68:	e058      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f6a:	4b22      	ldr	r3, [pc, #136]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d0f0      	beq.n	8006f58 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f76:	e050      	b.n	800701a <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006f78:	2301      	movs	r3, #1
 8006f7a:	e04f      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7c:	4b1d      	ldr	r3, [pc, #116]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d148      	bne.n	800701a <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006f88:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	4a19      	ldr	r2, [pc, #100]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f8e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f92:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f94:	4b17      	ldr	r3, [pc, #92]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f96:	68db      	ldr	r3, [r3, #12]
 8006f98:	4a16      	ldr	r2, [pc, #88]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006f9a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8006f9e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fa0:	f7fd fe7c 	bl	8004c9c <HAL_GetTick>
 8006fa4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fa6:	e008      	b.n	8006fba <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fa8:	f7fd fe78 	bl	8004c9c <HAL_GetTick>
 8006fac:	4602      	mov	r2, r0
 8006fae:	693b      	ldr	r3, [r7, #16]
 8006fb0:	1ad3      	subs	r3, r2, r3
 8006fb2:	2b02      	cmp	r3, #2
 8006fb4:	d901      	bls.n	8006fba <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8006fb6:	2303      	movs	r3, #3
 8006fb8:	e030      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fba:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d0f0      	beq.n	8006fa8 <HAL_RCC_OscConfig+0x734>
 8006fc6:	e028      	b.n	800701a <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006fc8:	69bb      	ldr	r3, [r7, #24]
 8006fca:	2b0c      	cmp	r3, #12
 8006fcc:	d023      	beq.n	8007016 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006fce:	4b09      	ldr	r3, [pc, #36]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	4a08      	ldr	r2, [pc, #32]	@ (8006ff4 <HAL_RCC_OscConfig+0x780>)
 8006fd4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8006fd8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006fda:	f7fd fe5f 	bl	8004c9c <HAL_GetTick>
 8006fde:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006fe0:	e00c      	b.n	8006ffc <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fe2:	f7fd fe5b 	bl	8004c9c <HAL_GetTick>
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	693b      	ldr	r3, [r7, #16]
 8006fea:	1ad3      	subs	r3, r2, r3
 8006fec:	2b02      	cmp	r3, #2
 8006fee:	d905      	bls.n	8006ffc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8006ff0:	2303      	movs	r3, #3
 8006ff2:	e013      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
 8006ff4:	40021000 	.word	0x40021000
 8006ff8:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006ffc:	4b09      	ldr	r3, [pc, #36]	@ (8007024 <HAL_RCC_OscConfig+0x7b0>)
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007004:	2b00      	cmp	r3, #0
 8007006:	d1ec      	bne.n	8006fe2 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8007008:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <HAL_RCC_OscConfig+0x7b0>)
 800700a:	68da      	ldr	r2, [r3, #12]
 800700c:	4905      	ldr	r1, [pc, #20]	@ (8007024 <HAL_RCC_OscConfig+0x7b0>)
 800700e:	4b06      	ldr	r3, [pc, #24]	@ (8007028 <HAL_RCC_OscConfig+0x7b4>)
 8007010:	4013      	ands	r3, r2
 8007012:	60cb      	str	r3, [r1, #12]
 8007014:	e001      	b.n	800701a <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8007016:	2301      	movs	r3, #1
 8007018:	e000      	b.n	800701c <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3720      	adds	r7, #32
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}
 8007024:	40021000 	.word	0x40021000
 8007028:	feeefffc 	.word	0xfeeefffc

0800702c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b084      	sub	sp, #16
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d101      	bne.n	8007040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800703c:	2301      	movs	r3, #1
 800703e:	e0e7      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007040:	4b75      	ldr	r3, [pc, #468]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	f003 0307 	and.w	r3, r3, #7
 8007048:	683a      	ldr	r2, [r7, #0]
 800704a:	429a      	cmp	r2, r3
 800704c:	d910      	bls.n	8007070 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800704e:	4b72      	ldr	r3, [pc, #456]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f023 0207 	bic.w	r2, r3, #7
 8007056:	4970      	ldr	r1, [pc, #448]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007058:	683b      	ldr	r3, [r7, #0]
 800705a:	4313      	orrs	r3, r2
 800705c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800705e:	4b6e      	ldr	r3, [pc, #440]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	f003 0307 	and.w	r3, r3, #7
 8007066:	683a      	ldr	r2, [r7, #0]
 8007068:	429a      	cmp	r2, r3
 800706a:	d001      	beq.n	8007070 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800706c:	2301      	movs	r3, #1
 800706e:	e0cf      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f003 0302 	and.w	r3, r3, #2
 8007078:	2b00      	cmp	r3, #0
 800707a:	d010      	beq.n	800709e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	689a      	ldr	r2, [r3, #8]
 8007080:	4b66      	ldr	r3, [pc, #408]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007088:	429a      	cmp	r2, r3
 800708a:	d908      	bls.n	800709e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800708c:	4b63      	ldr	r3, [pc, #396]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	689b      	ldr	r3, [r3, #8]
 8007098:	4960      	ldr	r1, [pc, #384]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 800709a:	4313      	orrs	r3, r2
 800709c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	681b      	ldr	r3, [r3, #0]
 80070a2:	f003 0301 	and.w	r3, r3, #1
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d04c      	beq.n	8007144 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	685b      	ldr	r3, [r3, #4]
 80070ae:	2b03      	cmp	r3, #3
 80070b0:	d107      	bne.n	80070c2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070b2:	4b5a      	ldr	r3, [pc, #360]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d121      	bne.n	8007102 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e0a6      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	685b      	ldr	r3, [r3, #4]
 80070c6:	2b02      	cmp	r3, #2
 80070c8:	d107      	bne.n	80070da <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070ca:	4b54      	ldr	r3, [pc, #336]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d115      	bne.n	8007102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e09a      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d107      	bne.n	80070f2 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80070e2:	4b4e      	ldr	r3, [pc, #312]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f003 0302 	and.w	r3, r3, #2
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d109      	bne.n	8007102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070ee:	2301      	movs	r3, #1
 80070f0:	e08e      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80070f2:	4b4a      	ldr	r3, [pc, #296]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d101      	bne.n	8007102 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e086      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007102:	4b46      	ldr	r3, [pc, #280]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 8007104:	689b      	ldr	r3, [r3, #8]
 8007106:	f023 0203 	bic.w	r2, r3, #3
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	685b      	ldr	r3, [r3, #4]
 800710e:	4943      	ldr	r1, [pc, #268]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 8007110:	4313      	orrs	r3, r2
 8007112:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007114:	f7fd fdc2 	bl	8004c9c <HAL_GetTick>
 8007118:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800711a:	e00a      	b.n	8007132 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800711c:	f7fd fdbe 	bl	8004c9c <HAL_GetTick>
 8007120:	4602      	mov	r2, r0
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	1ad3      	subs	r3, r2, r3
 8007126:	f241 3288 	movw	r2, #5000	@ 0x1388
 800712a:	4293      	cmp	r3, r2
 800712c:	d901      	bls.n	8007132 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800712e:	2303      	movs	r3, #3
 8007130:	e06e      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007132:	4b3a      	ldr	r3, [pc, #232]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 8007134:	689b      	ldr	r3, [r3, #8]
 8007136:	f003 020c 	and.w	r2, r3, #12
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	685b      	ldr	r3, [r3, #4]
 800713e:	009b      	lsls	r3, r3, #2
 8007140:	429a      	cmp	r2, r3
 8007142:	d1eb      	bne.n	800711c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	f003 0302 	and.w	r3, r3, #2
 800714c:	2b00      	cmp	r3, #0
 800714e:	d010      	beq.n	8007172 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	689a      	ldr	r2, [r3, #8]
 8007154:	4b31      	ldr	r3, [pc, #196]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 8007156:	689b      	ldr	r3, [r3, #8]
 8007158:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800715c:	429a      	cmp	r2, r3
 800715e:	d208      	bcs.n	8007172 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007160:	4b2e      	ldr	r3, [pc, #184]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 8007162:	689b      	ldr	r3, [r3, #8]
 8007164:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	689b      	ldr	r3, [r3, #8]
 800716c:	492b      	ldr	r1, [pc, #172]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 800716e:	4313      	orrs	r3, r2
 8007170:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007172:	4b29      	ldr	r3, [pc, #164]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	429a      	cmp	r2, r3
 800717e:	d210      	bcs.n	80071a2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007180:	4b25      	ldr	r3, [pc, #148]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f023 0207 	bic.w	r2, r3, #7
 8007188:	4923      	ldr	r1, [pc, #140]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	4313      	orrs	r3, r2
 800718e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007190:	4b21      	ldr	r3, [pc, #132]	@ (8007218 <HAL_RCC_ClockConfig+0x1ec>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 0307 	and.w	r3, r3, #7
 8007198:	683a      	ldr	r2, [r7, #0]
 800719a:	429a      	cmp	r2, r3
 800719c:	d001      	beq.n	80071a2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 800719e:	2301      	movs	r3, #1
 80071a0:	e036      	b.n	8007210 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f003 0304 	and.w	r3, r3, #4
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d008      	beq.n	80071c0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071ae:	4b1b      	ldr	r3, [pc, #108]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80071b0:	689b      	ldr	r3, [r3, #8]
 80071b2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	68db      	ldr	r3, [r3, #12]
 80071ba:	4918      	ldr	r1, [pc, #96]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80071bc:	4313      	orrs	r3, r2
 80071be:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f003 0308 	and.w	r3, r3, #8
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d009      	beq.n	80071e0 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071cc:	4b13      	ldr	r3, [pc, #76]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80071ce:	689b      	ldr	r3, [r3, #8]
 80071d0:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	691b      	ldr	r3, [r3, #16]
 80071d8:	00db      	lsls	r3, r3, #3
 80071da:	4910      	ldr	r1, [pc, #64]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80071dc:	4313      	orrs	r3, r2
 80071de:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80071e0:	f000 f824 	bl	800722c <HAL_RCC_GetSysClockFreq>
 80071e4:	4602      	mov	r2, r0
 80071e6:	4b0d      	ldr	r3, [pc, #52]	@ (800721c <HAL_RCC_ClockConfig+0x1f0>)
 80071e8:	689b      	ldr	r3, [r3, #8]
 80071ea:	091b      	lsrs	r3, r3, #4
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	490b      	ldr	r1, [pc, #44]	@ (8007220 <HAL_RCC_ClockConfig+0x1f4>)
 80071f2:	5ccb      	ldrb	r3, [r1, r3]
 80071f4:	f003 031f 	and.w	r3, r3, #31
 80071f8:	fa22 f303 	lsr.w	r3, r2, r3
 80071fc:	4a09      	ldr	r2, [pc, #36]	@ (8007224 <HAL_RCC_ClockConfig+0x1f8>)
 80071fe:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007200:	4b09      	ldr	r3, [pc, #36]	@ (8007228 <HAL_RCC_ClockConfig+0x1fc>)
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd fcf9 	bl	8004bfc <HAL_InitTick>
 800720a:	4603      	mov	r3, r0
 800720c:	72fb      	strb	r3, [r7, #11]

  return status;
 800720e:	7afb      	ldrb	r3, [r7, #11]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3710      	adds	r7, #16
 8007214:	46bd      	mov	sp, r7
 8007216:	bd80      	pop	{r7, pc}
 8007218:	40022000 	.word	0x40022000
 800721c:	40021000 	.word	0x40021000
 8007220:	0800e140 	.word	0x0800e140
 8007224:	20000004 	.word	0x20000004
 8007228:	20000008 	.word	0x20000008

0800722c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800722c:	b480      	push	{r7}
 800722e:	b089      	sub	sp, #36	@ 0x24
 8007230:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007232:	2300      	movs	r3, #0
 8007234:	61fb      	str	r3, [r7, #28]
 8007236:	2300      	movs	r3, #0
 8007238:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800723a:	4b3e      	ldr	r3, [pc, #248]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 800723c:	689b      	ldr	r3, [r3, #8]
 800723e:	f003 030c 	and.w	r3, r3, #12
 8007242:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007244:	4b3b      	ldr	r3, [pc, #236]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 8007246:	68db      	ldr	r3, [r3, #12]
 8007248:	f003 0303 	and.w	r3, r3, #3
 800724c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d005      	beq.n	8007260 <HAL_RCC_GetSysClockFreq+0x34>
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	2b0c      	cmp	r3, #12
 8007258:	d121      	bne.n	800729e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	2b01      	cmp	r3, #1
 800725e:	d11e      	bne.n	800729e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007260:	4b34      	ldr	r3, [pc, #208]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f003 0308 	and.w	r3, r3, #8
 8007268:	2b00      	cmp	r3, #0
 800726a:	d107      	bne.n	800727c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800726c:	4b31      	ldr	r3, [pc, #196]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 800726e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8007272:	0a1b      	lsrs	r3, r3, #8
 8007274:	f003 030f 	and.w	r3, r3, #15
 8007278:	61fb      	str	r3, [r7, #28]
 800727a:	e005      	b.n	8007288 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800727c:	4b2d      	ldr	r3, [pc, #180]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	091b      	lsrs	r3, r3, #4
 8007282:	f003 030f 	and.w	r3, r3, #15
 8007286:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007288:	4a2b      	ldr	r2, [pc, #172]	@ (8007338 <HAL_RCC_GetSysClockFreq+0x10c>)
 800728a:	69fb      	ldr	r3, [r7, #28]
 800728c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007290:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007292:	693b      	ldr	r3, [r7, #16]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d10d      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007298:	69fb      	ldr	r3, [r7, #28]
 800729a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800729c:	e00a      	b.n	80072b4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	2b04      	cmp	r3, #4
 80072a2:	d102      	bne.n	80072aa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072a4:	4b25      	ldr	r3, [pc, #148]	@ (800733c <HAL_RCC_GetSysClockFreq+0x110>)
 80072a6:	61bb      	str	r3, [r7, #24]
 80072a8:	e004      	b.n	80072b4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80072aa:	693b      	ldr	r3, [r7, #16]
 80072ac:	2b08      	cmp	r3, #8
 80072ae:	d101      	bne.n	80072b4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072b0:	4b23      	ldr	r3, [pc, #140]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x114>)
 80072b2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80072b4:	693b      	ldr	r3, [r7, #16]
 80072b6:	2b0c      	cmp	r3, #12
 80072b8:	d134      	bne.n	8007324 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072ba:	4b1e      	ldr	r3, [pc, #120]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 80072bc:	68db      	ldr	r3, [r3, #12]
 80072be:	f003 0303 	and.w	r3, r3, #3
 80072c2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	2b02      	cmp	r3, #2
 80072c8:	d003      	beq.n	80072d2 <HAL_RCC_GetSysClockFreq+0xa6>
 80072ca:	68bb      	ldr	r3, [r7, #8]
 80072cc:	2b03      	cmp	r3, #3
 80072ce:	d003      	beq.n	80072d8 <HAL_RCC_GetSysClockFreq+0xac>
 80072d0:	e005      	b.n	80072de <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80072d2:	4b1a      	ldr	r3, [pc, #104]	@ (800733c <HAL_RCC_GetSysClockFreq+0x110>)
 80072d4:	617b      	str	r3, [r7, #20]
      break;
 80072d6:	e005      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80072d8:	4b19      	ldr	r3, [pc, #100]	@ (8007340 <HAL_RCC_GetSysClockFreq+0x114>)
 80072da:	617b      	str	r3, [r7, #20]
      break;
 80072dc:	e002      	b.n	80072e4 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	617b      	str	r3, [r7, #20]
      break;
 80072e2:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80072e4:	4b13      	ldr	r3, [pc, #76]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 80072e6:	68db      	ldr	r3, [r3, #12]
 80072e8:	091b      	lsrs	r3, r3, #4
 80072ea:	f003 0307 	and.w	r3, r3, #7
 80072ee:	3301      	adds	r3, #1
 80072f0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80072f2:	4b10      	ldr	r3, [pc, #64]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 80072f4:	68db      	ldr	r3, [r3, #12]
 80072f6:	0a1b      	lsrs	r3, r3, #8
 80072f8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80072fc:	697a      	ldr	r2, [r7, #20]
 80072fe:	fb03 f202 	mul.w	r2, r3, r2
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	fbb2 f3f3 	udiv	r3, r2, r3
 8007308:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800730a:	4b0a      	ldr	r3, [pc, #40]	@ (8007334 <HAL_RCC_GetSysClockFreq+0x108>)
 800730c:	68db      	ldr	r3, [r3, #12]
 800730e:	0e5b      	lsrs	r3, r3, #25
 8007310:	f003 0303 	and.w	r3, r3, #3
 8007314:	3301      	adds	r3, #1
 8007316:	005b      	lsls	r3, r3, #1
 8007318:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800731a:	697a      	ldr	r2, [r7, #20]
 800731c:	683b      	ldr	r3, [r7, #0]
 800731e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007322:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007324:	69bb      	ldr	r3, [r7, #24]
}
 8007326:	4618      	mov	r0, r3
 8007328:	3724      	adds	r7, #36	@ 0x24
 800732a:	46bd      	mov	sp, r7
 800732c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007330:	4770      	bx	lr
 8007332:	bf00      	nop
 8007334:	40021000 	.word	0x40021000
 8007338:	0800e158 	.word	0x0800e158
 800733c:	00f42400 	.word	0x00f42400
 8007340:	007a1200 	.word	0x007a1200

08007344 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007344:	b480      	push	{r7}
 8007346:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007348:	4b03      	ldr	r3, [pc, #12]	@ (8007358 <HAL_RCC_GetHCLKFreq+0x14>)
 800734a:	681b      	ldr	r3, [r3, #0]
}
 800734c:	4618      	mov	r0, r3
 800734e:	46bd      	mov	sp, r7
 8007350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007354:	4770      	bx	lr
 8007356:	bf00      	nop
 8007358:	20000004 	.word	0x20000004

0800735c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007360:	f7ff fff0 	bl	8007344 <HAL_RCC_GetHCLKFreq>
 8007364:	4602      	mov	r2, r0
 8007366:	4b06      	ldr	r3, [pc, #24]	@ (8007380 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	0a1b      	lsrs	r3, r3, #8
 800736c:	f003 0307 	and.w	r3, r3, #7
 8007370:	4904      	ldr	r1, [pc, #16]	@ (8007384 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007372:	5ccb      	ldrb	r3, [r1, r3]
 8007374:	f003 031f 	and.w	r3, r3, #31
 8007378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800737c:	4618      	mov	r0, r3
 800737e:	bd80      	pop	{r7, pc}
 8007380:	40021000 	.word	0x40021000
 8007384:	0800e150 	.word	0x0800e150

08007388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800738c:	f7ff ffda 	bl	8007344 <HAL_RCC_GetHCLKFreq>
 8007390:	4602      	mov	r2, r0
 8007392:	4b06      	ldr	r3, [pc, #24]	@ (80073ac <HAL_RCC_GetPCLK2Freq+0x24>)
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	0adb      	lsrs	r3, r3, #11
 8007398:	f003 0307 	and.w	r3, r3, #7
 800739c:	4904      	ldr	r1, [pc, #16]	@ (80073b0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800739e:	5ccb      	ldrb	r3, [r1, r3]
 80073a0:	f003 031f 	and.w	r3, r3, #31
 80073a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	40021000 	.word	0x40021000
 80073b0:	0800e150 	.word	0x0800e150

080073b4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b086      	sub	sp, #24
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80073bc:	2300      	movs	r3, #0
 80073be:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80073c0:	4b2a      	ldr	r3, [pc, #168]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073c8:	2b00      	cmp	r3, #0
 80073ca:	d003      	beq.n	80073d4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80073cc:	f7ff f9ee 	bl	80067ac <HAL_PWREx_GetVoltageRange>
 80073d0:	6178      	str	r0, [r7, #20]
 80073d2:	e014      	b.n	80073fe <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80073d4:	4b25      	ldr	r3, [pc, #148]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073d8:	4a24      	ldr	r2, [pc, #144]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073da:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80073de:	6593      	str	r3, [r2, #88]	@ 0x58
 80073e0:	4b22      	ldr	r3, [pc, #136]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073e2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073e4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80073e8:	60fb      	str	r3, [r7, #12]
 80073ea:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80073ec:	f7ff f9de 	bl	80067ac <HAL_PWREx_GetVoltageRange>
 80073f0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80073f2:	4b1e      	ldr	r3, [pc, #120]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073f6:	4a1d      	ldr	r2, [pc, #116]	@ (800746c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80073f8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80073fc:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80073fe:	697b      	ldr	r3, [r7, #20]
 8007400:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007404:	d10b      	bne.n	800741e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2b80      	cmp	r3, #128	@ 0x80
 800740a:	d919      	bls.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2ba0      	cmp	r3, #160	@ 0xa0
 8007410:	d902      	bls.n	8007418 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007412:	2302      	movs	r3, #2
 8007414:	613b      	str	r3, [r7, #16]
 8007416:	e013      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007418:	2301      	movs	r3, #1
 800741a:	613b      	str	r3, [r7, #16]
 800741c:	e010      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b80      	cmp	r3, #128	@ 0x80
 8007422:	d902      	bls.n	800742a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007424:	2303      	movs	r3, #3
 8007426:	613b      	str	r3, [r7, #16]
 8007428:	e00a      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2b80      	cmp	r3, #128	@ 0x80
 800742e:	d102      	bne.n	8007436 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8007430:	2302      	movs	r3, #2
 8007432:	613b      	str	r3, [r7, #16]
 8007434:	e004      	b.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2b70      	cmp	r3, #112	@ 0x70
 800743a:	d101      	bne.n	8007440 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800743c:	2301      	movs	r3, #1
 800743e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007440:	4b0b      	ldr	r3, [pc, #44]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	f023 0207 	bic.w	r2, r3, #7
 8007448:	4909      	ldr	r1, [pc, #36]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800744a:	693b      	ldr	r3, [r7, #16]
 800744c:	4313      	orrs	r3, r2
 800744e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007450:	4b07      	ldr	r3, [pc, #28]	@ (8007470 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	693a      	ldr	r2, [r7, #16]
 800745a:	429a      	cmp	r2, r3
 800745c:	d001      	beq.n	8007462 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800745e:	2301      	movs	r3, #1
 8007460:	e000      	b.n	8007464 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3718      	adds	r7, #24
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	40021000 	.word	0x40021000
 8007470:	40022000 	.word	0x40022000

08007474 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b086      	sub	sp, #24
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800747c:	2300      	movs	r3, #0
 800747e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007480:	2300      	movs	r3, #0
 8007482:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800748c:	2b00      	cmp	r3, #0
 800748e:	d041      	beq.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007494:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8007498:	d02a      	beq.n	80074f0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800749a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800749e:	d824      	bhi.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074a4:	d008      	beq.n	80074b8 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80074a6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80074aa:	d81e      	bhi.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x76>
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d00a      	beq.n	80074c6 <HAL_RCCEx_PeriphCLKConfig+0x52>
 80074b0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80074b4:	d010      	beq.n	80074d8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80074b6:	e018      	b.n	80074ea <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80074b8:	4b86      	ldr	r3, [pc, #536]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074ba:	68db      	ldr	r3, [r3, #12]
 80074bc:	4a85      	ldr	r2, [pc, #532]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074be:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80074c2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074c4:	e015      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	3304      	adds	r3, #4
 80074ca:	2100      	movs	r1, #0
 80074cc:	4618      	mov	r0, r3
 80074ce:	f000 fabb 	bl	8007a48 <RCCEx_PLLSAI1_Config>
 80074d2:	4603      	mov	r3, r0
 80074d4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074d6:	e00c      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	3320      	adds	r3, #32
 80074dc:	2100      	movs	r1, #0
 80074de:	4618      	mov	r0, r3
 80074e0:	f000 fba6 	bl	8007c30 <RCCEx_PLLSAI2_Config>
 80074e4:	4603      	mov	r3, r0
 80074e6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80074e8:	e003      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	74fb      	strb	r3, [r7, #19]
      break;
 80074ee:	e000      	b.n	80074f2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80074f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80074f2:	7cfb      	ldrb	r3, [r7, #19]
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d10b      	bne.n	8007510 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80074f8:	4b76      	ldr	r3, [pc, #472]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80074fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80074fe:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8007506:	4973      	ldr	r1, [pc, #460]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007508:	4313      	orrs	r3, r2
 800750a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800750e:	e001      	b.n	8007514 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007510:	7cfb      	ldrb	r3, [r7, #19]
 8007512:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800751c:	2b00      	cmp	r3, #0
 800751e:	d041      	beq.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007524:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8007528:	d02a      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 800752a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800752e:	d824      	bhi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x106>
 8007530:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8007534:	d008      	beq.n	8007548 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8007536:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800753a:	d81e      	bhi.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x106>
 800753c:	2b00      	cmp	r3, #0
 800753e:	d00a      	beq.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8007540:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007544:	d010      	beq.n	8007568 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8007546:	e018      	b.n	800757a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8007548:	4b62      	ldr	r3, [pc, #392]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	4a61      	ldr	r2, [pc, #388]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800754e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007552:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007554:	e015      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	3304      	adds	r3, #4
 800755a:	2100      	movs	r1, #0
 800755c:	4618      	mov	r0, r3
 800755e:	f000 fa73 	bl	8007a48 <RCCEx_PLLSAI1_Config>
 8007562:	4603      	mov	r3, r0
 8007564:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007566:	e00c      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	3320      	adds	r3, #32
 800756c:	2100      	movs	r1, #0
 800756e:	4618      	mov	r0, r3
 8007570:	f000 fb5e 	bl	8007c30 <RCCEx_PLLSAI2_Config>
 8007574:	4603      	mov	r3, r0
 8007576:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8007578:	e003      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800757a:	2301      	movs	r3, #1
 800757c:	74fb      	strb	r3, [r7, #19]
      break;
 800757e:	e000      	b.n	8007582 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8007580:	bf00      	nop
    }

    if(ret == HAL_OK)
 8007582:	7cfb      	ldrb	r3, [r7, #19]
 8007584:	2b00      	cmp	r3, #0
 8007586:	d10b      	bne.n	80075a0 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007588:	4b52      	ldr	r3, [pc, #328]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800758a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800758e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8007596:	494f      	ldr	r1, [pc, #316]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007598:	4313      	orrs	r3, r2
 800759a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800759e:	e001      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80075a0:	7cfb      	ldrb	r3, [r7, #19]
 80075a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	f000 80a0 	beq.w	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80075b2:	2300      	movs	r3, #0
 80075b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80075b6:	4b47      	ldr	r3, [pc, #284]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d101      	bne.n	80075c6 <HAL_RCCEx_PeriphCLKConfig+0x152>
 80075c2:	2301      	movs	r3, #1
 80075c4:	e000      	b.n	80075c8 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80075c6:	2300      	movs	r3, #0
 80075c8:	2b00      	cmp	r3, #0
 80075ca:	d00d      	beq.n	80075e8 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075cc:	4b41      	ldr	r3, [pc, #260]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075d0:	4a40      	ldr	r2, [pc, #256]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80075d6:	6593      	str	r3, [r2, #88]	@ 0x58
 80075d8:	4b3e      	ldr	r3, [pc, #248]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80075da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80075dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80075e0:	60bb      	str	r3, [r7, #8]
 80075e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075e4:	2301      	movs	r3, #1
 80075e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075e8:	4b3b      	ldr	r3, [pc, #236]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	4a3a      	ldr	r2, [pc, #232]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80075ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80075f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075f4:	f7fd fb52 	bl	8004c9c <HAL_GetTick>
 80075f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075fa:	e009      	b.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075fc:	f7fd fb4e 	bl	8004c9c <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d902      	bls.n	8007610 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	74fb      	strb	r3, [r7, #19]
        break;
 800760e:	e005      	b.n	800761c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007610:	4b31      	ldr	r3, [pc, #196]	@ (80076d8 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007618:	2b00      	cmp	r3, #0
 800761a:	d0ef      	beq.n	80075fc <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 800761c:	7cfb      	ldrb	r3, [r7, #19]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d15c      	bne.n	80076dc <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007622:	4b2c      	ldr	r3, [pc, #176]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007624:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007628:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800762c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800762e:	697b      	ldr	r3, [r7, #20]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d01f      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800763a:	697a      	ldr	r2, [r7, #20]
 800763c:	429a      	cmp	r2, r3
 800763e:	d019      	beq.n	8007674 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007640:	4b24      	ldr	r3, [pc, #144]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007646:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800764a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800764c:	4b21      	ldr	r3, [pc, #132]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800764e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007652:	4a20      	ldr	r2, [pc, #128]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007654:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007658:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800765c:	4b1d      	ldr	r3, [pc, #116]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800765e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007662:	4a1c      	ldr	r2, [pc, #112]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8007664:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007668:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800766c:	4a19      	ldr	r2, [pc, #100]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f003 0301 	and.w	r3, r3, #1
 800767a:	2b00      	cmp	r3, #0
 800767c:	d016      	beq.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800767e:	f7fd fb0d 	bl	8004c9c <HAL_GetTick>
 8007682:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007684:	e00b      	b.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007686:	f7fd fb09 	bl	8004c9c <HAL_GetTick>
 800768a:	4602      	mov	r2, r0
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	1ad3      	subs	r3, r2, r3
 8007690:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007694:	4293      	cmp	r3, r2
 8007696:	d902      	bls.n	800769e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8007698:	2303      	movs	r3, #3
 800769a:	74fb      	strb	r3, [r7, #19]
            break;
 800769c:	e006      	b.n	80076ac <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800769e:	4b0d      	ldr	r3, [pc, #52]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076a4:	f003 0302 	and.w	r3, r3, #2
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d0ec      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80076ac:	7cfb      	ldrb	r3, [r7, #19]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d10c      	bne.n	80076cc <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80076b2:	4b08      	ldr	r3, [pc, #32]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80076c2:	4904      	ldr	r1, [pc, #16]	@ (80076d4 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80076c4:	4313      	orrs	r3, r2
 80076c6:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80076ca:	e009      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076cc:	7cfb      	ldrb	r3, [r7, #19]
 80076ce:	74bb      	strb	r3, [r7, #18]
 80076d0:	e006      	b.n	80076e0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80076d2:	bf00      	nop
 80076d4:	40021000 	.word	0x40021000
 80076d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076dc:	7cfb      	ldrb	r3, [r7, #19]
 80076de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076e0:	7c7b      	ldrb	r3, [r7, #17]
 80076e2:	2b01      	cmp	r3, #1
 80076e4:	d105      	bne.n	80076f2 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076e6:	4b9e      	ldr	r3, [pc, #632]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80076ea:	4a9d      	ldr	r2, [pc, #628]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80076ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80076f0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	f003 0301 	and.w	r3, r3, #1
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d00a      	beq.n	8007714 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076fe:	4b98      	ldr	r3, [pc, #608]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007704:	f023 0203 	bic.w	r2, r3, #3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800770c:	4994      	ldr	r1, [pc, #592]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800770e:	4313      	orrs	r3, r2
 8007710:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	f003 0302 	and.w	r3, r3, #2
 800771c:	2b00      	cmp	r3, #0
 800771e:	d00a      	beq.n	8007736 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007720:	4b8f      	ldr	r3, [pc, #572]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007722:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007726:	f023 020c 	bic.w	r2, r3, #12
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800772e:	498c      	ldr	r1, [pc, #560]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007730:	4313      	orrs	r3, r2
 8007732:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	f003 0304 	and.w	r3, r3, #4
 800773e:	2b00      	cmp	r3, #0
 8007740:	d00a      	beq.n	8007758 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8007742:	4b87      	ldr	r3, [pc, #540]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007744:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007748:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007750:	4983      	ldr	r1, [pc, #524]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007752:	4313      	orrs	r3, r2
 8007754:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f003 0308 	and.w	r3, r3, #8
 8007760:	2b00      	cmp	r3, #0
 8007762:	d00a      	beq.n	800777a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8007764:	4b7e      	ldr	r3, [pc, #504]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007766:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800776a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007772:	497b      	ldr	r1, [pc, #492]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007774:	4313      	orrs	r3, r2
 8007776:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f003 0310 	and.w	r3, r3, #16
 8007782:	2b00      	cmp	r3, #0
 8007784:	d00a      	beq.n	800779c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8007786:	4b76      	ldr	r3, [pc, #472]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007788:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800778c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007794:	4972      	ldr	r1, [pc, #456]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007796:	4313      	orrs	r3, r2
 8007798:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f003 0320 	and.w	r3, r3, #32
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d00a      	beq.n	80077be <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80077a8:	4b6d      	ldr	r3, [pc, #436]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077ae:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80077b6:	496a      	ldr	r1, [pc, #424]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077b8:	4313      	orrs	r3, r2
 80077ba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d00a      	beq.n	80077e0 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80077ca:	4b65      	ldr	r3, [pc, #404]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077d0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80077d8:	4961      	ldr	r1, [pc, #388]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077da:	4313      	orrs	r3, r2
 80077dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80077e8:	2b00      	cmp	r3, #0
 80077ea:	d00a      	beq.n	8007802 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80077ec:	4b5c      	ldr	r3, [pc, #368]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80077f2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80077fa:	4959      	ldr	r1, [pc, #356]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80077fc:	4313      	orrs	r3, r2
 80077fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00a      	beq.n	8007824 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800780e:	4b54      	ldr	r3, [pc, #336]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007810:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007814:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800781c:	4950      	ldr	r1, [pc, #320]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800781e:	4313      	orrs	r3, r2
 8007820:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800782c:	2b00      	cmp	r3, #0
 800782e:	d00a      	beq.n	8007846 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8007830:	4b4b      	ldr	r3, [pc, #300]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007832:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007836:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800783e:	4948      	ldr	r1, [pc, #288]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007840:	4313      	orrs	r3, r2
 8007842:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800784e:	2b00      	cmp	r3, #0
 8007850:	d00a      	beq.n	8007868 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007852:	4b43      	ldr	r3, [pc, #268]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007854:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007858:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007860:	493f      	ldr	r1, [pc, #252]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007862:	4313      	orrs	r3, r2
 8007864:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8007870:	2b00      	cmp	r3, #0
 8007872:	d028      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007874:	4b3a      	ldr	r3, [pc, #232]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007876:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800787a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007882:	4937      	ldr	r1, [pc, #220]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007884:	4313      	orrs	r3, r2
 8007886:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800788e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8007892:	d106      	bne.n	80078a2 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007894:	4b32      	ldr	r3, [pc, #200]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007896:	68db      	ldr	r3, [r3, #12]
 8007898:	4a31      	ldr	r2, [pc, #196]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800789a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800789e:	60d3      	str	r3, [r2, #12]
 80078a0:	e011      	b.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80078a6:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80078aa:	d10c      	bne.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	3304      	adds	r3, #4
 80078b0:	2101      	movs	r1, #1
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f8c8 	bl	8007a48 <RCCEx_PLLSAI1_Config>
 80078b8:	4603      	mov	r3, r0
 80078ba:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80078bc:	7cfb      	ldrb	r3, [r7, #19]
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d001      	beq.n	80078c6 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80078c2:	7cfb      	ldrb	r3, [r7, #19]
 80078c4:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d028      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80078d2:	4b23      	ldr	r3, [pc, #140]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80078d8:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078e0:	491f      	ldr	r1, [pc, #124]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078e2:	4313      	orrs	r3, r2
 80078e4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80078ec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80078f0:	d106      	bne.n	8007900 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80078f2:	4b1b      	ldr	r3, [pc, #108]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f4:	68db      	ldr	r3, [r3, #12]
 80078f6:	4a1a      	ldr	r2, [pc, #104]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80078f8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80078fc:	60d3      	str	r3, [r2, #12]
 80078fe:	e011      	b.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007904:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8007908:	d10c      	bne.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	3304      	adds	r3, #4
 800790e:	2101      	movs	r1, #1
 8007910:	4618      	mov	r0, r3
 8007912:	f000 f899 	bl	8007a48 <RCCEx_PLLSAI1_Config>
 8007916:	4603      	mov	r3, r0
 8007918:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800791a:	7cfb      	ldrb	r3, [r7, #19]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d001      	beq.n	8007924 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8007920:	7cfb      	ldrb	r3, [r7, #19]
 8007922:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800792c:	2b00      	cmp	r3, #0
 800792e:	d02b      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007930:	4b0b      	ldr	r3, [pc, #44]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007932:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007936:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800793e:	4908      	ldr	r1, [pc, #32]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007940:	4313      	orrs	r3, r2
 8007942:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800794a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800794e:	d109      	bne.n	8007964 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007950:	4b03      	ldr	r3, [pc, #12]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	4a02      	ldr	r2, [pc, #8]	@ (8007960 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8007956:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800795a:	60d3      	str	r3, [r2, #12]
 800795c:	e014      	b.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x514>
 800795e:	bf00      	nop
 8007960:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007968:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800796c:	d10c      	bne.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	3304      	adds	r3, #4
 8007972:	2101      	movs	r1, #1
 8007974:	4618      	mov	r0, r3
 8007976:	f000 f867 	bl	8007a48 <RCCEx_PLLSAI1_Config>
 800797a:	4603      	mov	r3, r0
 800797c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800797e:	7cfb      	ldrb	r3, [r7, #19]
 8007980:	2b00      	cmp	r3, #0
 8007982:	d001      	beq.n	8007988 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8007984:	7cfb      	ldrb	r3, [r7, #19]
 8007986:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007990:	2b00      	cmp	r3, #0
 8007992:	d02f      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007994:	4b2b      	ldr	r3, [pc, #172]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007996:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800799a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079a2:	4928      	ldr	r1, [pc, #160]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80079a4:	4313      	orrs	r3, r2
 80079a6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079ae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80079b2:	d10d      	bne.n	80079d0 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	3304      	adds	r3, #4
 80079b8:	2102      	movs	r1, #2
 80079ba:	4618      	mov	r0, r3
 80079bc:	f000 f844 	bl	8007a48 <RCCEx_PLLSAI1_Config>
 80079c0:	4603      	mov	r3, r0
 80079c2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079c4:	7cfb      	ldrb	r3, [r7, #19]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d014      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80079ca:	7cfb      	ldrb	r3, [r7, #19]
 80079cc:	74bb      	strb	r3, [r7, #18]
 80079ce:	e011      	b.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80079d4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80079d8:	d10c      	bne.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	3320      	adds	r3, #32
 80079de:	2102      	movs	r1, #2
 80079e0:	4618      	mov	r0, r3
 80079e2:	f000 f925 	bl	8007c30 <RCCEx_PLLSAI2_Config>
 80079e6:	4603      	mov	r3, r0
 80079e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80079ea:	7cfb      	ldrb	r3, [r7, #19]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d001      	beq.n	80079f4 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80079f0:	7cfb      	ldrb	r3, [r7, #19]
 80079f2:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00a      	beq.n	8007a16 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007a00:	4b10      	ldr	r3, [pc, #64]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a06:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8007a0e:	490d      	ldr	r1, [pc, #52]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a10:	4313      	orrs	r3, r2
 8007a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d00b      	beq.n	8007a3a <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8007a22:	4b08      	ldr	r3, [pc, #32]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007a28:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a32:	4904      	ldr	r1, [pc, #16]	@ (8007a44 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8007a34:	4313      	orrs	r3, r2
 8007a36:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007a3a:	7cbb      	ldrb	r3, [r7, #18]
}
 8007a3c:	4618      	mov	r0, r3
 8007a3e:	3718      	adds	r7, #24
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}
 8007a44:	40021000 	.word	0x40021000

08007a48 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b084      	sub	sp, #16
 8007a4c:	af00      	add	r7, sp, #0
 8007a4e:	6078      	str	r0, [r7, #4]
 8007a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007a52:	2300      	movs	r3, #0
 8007a54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007a56:	4b75      	ldr	r3, [pc, #468]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f003 0303 	and.w	r3, r3, #3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d018      	beq.n	8007a94 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007a62:	4b72      	ldr	r3, [pc, #456]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a64:	68db      	ldr	r3, [r3, #12]
 8007a66:	f003 0203 	and.w	r2, r3, #3
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	429a      	cmp	r2, r3
 8007a70:	d10d      	bne.n	8007a8e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
       ||
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d009      	beq.n	8007a8e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007a7a:	4b6c      	ldr	r3, [pc, #432]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007a7c:	68db      	ldr	r3, [r3, #12]
 8007a7e:	091b      	lsrs	r3, r3, #4
 8007a80:	f003 0307 	and.w	r3, r3, #7
 8007a84:	1c5a      	adds	r2, r3, #1
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
       ||
 8007a8a:	429a      	cmp	r2, r3
 8007a8c:	d047      	beq.n	8007b1e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	73fb      	strb	r3, [r7, #15]
 8007a92:	e044      	b.n	8007b1e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d018      	beq.n	8007ace <RCCEx_PLLSAI1_Config+0x86>
 8007a9c:	2b03      	cmp	r3, #3
 8007a9e:	d825      	bhi.n	8007aec <RCCEx_PLLSAI1_Config+0xa4>
 8007aa0:	2b01      	cmp	r3, #1
 8007aa2:	d002      	beq.n	8007aaa <RCCEx_PLLSAI1_Config+0x62>
 8007aa4:	2b02      	cmp	r3, #2
 8007aa6:	d009      	beq.n	8007abc <RCCEx_PLLSAI1_Config+0x74>
 8007aa8:	e020      	b.n	8007aec <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007aaa:	4b60      	ldr	r3, [pc, #384]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0302 	and.w	r3, r3, #2
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d11d      	bne.n	8007af2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007aba:	e01a      	b.n	8007af2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007abc:	4b5b      	ldr	r3, [pc, #364]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d116      	bne.n	8007af6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007acc:	e013      	b.n	8007af6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007ace:	4b57      	ldr	r3, [pc, #348]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d10f      	bne.n	8007afa <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007ada:	4b54      	ldr	r3, [pc, #336]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d109      	bne.n	8007afa <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007aea:	e006      	b.n	8007afa <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007aec:	2301      	movs	r3, #1
 8007aee:	73fb      	strb	r3, [r7, #15]
      break;
 8007af0:	e004      	b.n	8007afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007af2:	bf00      	nop
 8007af4:	e002      	b.n	8007afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007af6:	bf00      	nop
 8007af8:	e000      	b.n	8007afc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007afa:	bf00      	nop
    }

    if(status == HAL_OK)
 8007afc:	7bfb      	ldrb	r3, [r7, #15]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10d      	bne.n	8007b1e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007b02:	4b4a      	ldr	r3, [pc, #296]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	6819      	ldr	r1, [r3, #0]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	685b      	ldr	r3, [r3, #4]
 8007b12:	3b01      	subs	r3, #1
 8007b14:	011b      	lsls	r3, r3, #4
 8007b16:	430b      	orrs	r3, r1
 8007b18:	4944      	ldr	r1, [pc, #272]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b1a:	4313      	orrs	r3, r2
 8007b1c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007b1e:	7bfb      	ldrb	r3, [r7, #15]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d17d      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007b24:	4b41      	ldr	r3, [pc, #260]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a40      	ldr	r2, [pc, #256]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b2a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b2e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007b30:	f7fd f8b4 	bl	8004c9c <HAL_GetTick>
 8007b34:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b36:	e009      	b.n	8007b4c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007b38:	f7fd f8b0 	bl	8004c9c <HAL_GetTick>
 8007b3c:	4602      	mov	r2, r0
 8007b3e:	68bb      	ldr	r3, [r7, #8]
 8007b40:	1ad3      	subs	r3, r2, r3
 8007b42:	2b02      	cmp	r3, #2
 8007b44:	d902      	bls.n	8007b4c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007b46:	2303      	movs	r3, #3
 8007b48:	73fb      	strb	r3, [r7, #15]
        break;
 8007b4a:	e005      	b.n	8007b58 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007b4c:	4b37      	ldr	r3, [pc, #220]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d1ef      	bne.n	8007b38 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007b58:	7bfb      	ldrb	r3, [r7, #15]
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d160      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007b5e:	683b      	ldr	r3, [r7, #0]
 8007b60:	2b00      	cmp	r3, #0
 8007b62:	d111      	bne.n	8007b88 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b64:	4b31      	ldr	r3, [pc, #196]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b66:	691b      	ldr	r3, [r3, #16]
 8007b68:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007b6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007b70:	687a      	ldr	r2, [r7, #4]
 8007b72:	6892      	ldr	r2, [r2, #8]
 8007b74:	0211      	lsls	r1, r2, #8
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	68d2      	ldr	r2, [r2, #12]
 8007b7a:	0912      	lsrs	r2, r2, #4
 8007b7c:	0452      	lsls	r2, r2, #17
 8007b7e:	430a      	orrs	r2, r1
 8007b80:	492a      	ldr	r1, [pc, #168]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b82:	4313      	orrs	r3, r2
 8007b84:	610b      	str	r3, [r1, #16]
 8007b86:	e027      	b.n	8007bd8 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	2b01      	cmp	r3, #1
 8007b8c:	d112      	bne.n	8007bb4 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007b8e:	4b27      	ldr	r3, [pc, #156]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007b90:	691b      	ldr	r3, [r3, #16]
 8007b92:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8007b96:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007b9a:	687a      	ldr	r2, [r7, #4]
 8007b9c:	6892      	ldr	r2, [r2, #8]
 8007b9e:	0211      	lsls	r1, r2, #8
 8007ba0:	687a      	ldr	r2, [r7, #4]
 8007ba2:	6912      	ldr	r2, [r2, #16]
 8007ba4:	0852      	lsrs	r2, r2, #1
 8007ba6:	3a01      	subs	r2, #1
 8007ba8:	0552      	lsls	r2, r2, #21
 8007baa:	430a      	orrs	r2, r1
 8007bac:	491f      	ldr	r1, [pc, #124]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bae:	4313      	orrs	r3, r2
 8007bb0:	610b      	str	r3, [r1, #16]
 8007bb2:	e011      	b.n	8007bd8 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007bb4:	4b1d      	ldr	r3, [pc, #116]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bb6:	691b      	ldr	r3, [r3, #16]
 8007bb8:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007bbc:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007bc0:	687a      	ldr	r2, [r7, #4]
 8007bc2:	6892      	ldr	r2, [r2, #8]
 8007bc4:	0211      	lsls	r1, r2, #8
 8007bc6:	687a      	ldr	r2, [r7, #4]
 8007bc8:	6952      	ldr	r2, [r2, #20]
 8007bca:	0852      	lsrs	r2, r2, #1
 8007bcc:	3a01      	subs	r2, #1
 8007bce:	0652      	lsls	r2, r2, #25
 8007bd0:	430a      	orrs	r2, r1
 8007bd2:	4916      	ldr	r1, [pc, #88]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007bd8:	4b14      	ldr	r3, [pc, #80]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4a13      	ldr	r2, [pc, #76]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007bde:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8007be2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be4:	f7fd f85a 	bl	8004c9c <HAL_GetTick>
 8007be8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007bea:	e009      	b.n	8007c00 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007bec:	f7fd f856 	bl	8004c9c <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	68bb      	ldr	r3, [r7, #8]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	2b02      	cmp	r3, #2
 8007bf8:	d902      	bls.n	8007c00 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8007bfa:	2303      	movs	r3, #3
 8007bfc:	73fb      	strb	r3, [r7, #15]
          break;
 8007bfe:	e005      	b.n	8007c0c <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007c00:	4b0a      	ldr	r3, [pc, #40]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d0ef      	beq.n	8007bec <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8007c0c:	7bfb      	ldrb	r3, [r7, #15]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d106      	bne.n	8007c20 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007c12:	4b06      	ldr	r3, [pc, #24]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c14:	691a      	ldr	r2, [r3, #16]
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	699b      	ldr	r3, [r3, #24]
 8007c1a:	4904      	ldr	r1, [pc, #16]	@ (8007c2c <RCCEx_PLLSAI1_Config+0x1e4>)
 8007c1c:	4313      	orrs	r3, r2
 8007c1e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}
 8007c2a:	bf00      	nop
 8007c2c:	40021000 	.word	0x40021000

08007c30 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8007c30:	b580      	push	{r7, lr}
 8007c32:	b084      	sub	sp, #16
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
 8007c38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c3e:	4b6a      	ldr	r3, [pc, #424]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c40:	68db      	ldr	r3, [r3, #12]
 8007c42:	f003 0303 	and.w	r3, r3, #3
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d018      	beq.n	8007c7c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8007c4a:	4b67      	ldr	r3, [pc, #412]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c4c:	68db      	ldr	r3, [r3, #12]
 8007c4e:	f003 0203 	and.w	r2, r3, #3
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d10d      	bne.n	8007c76 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	681b      	ldr	r3, [r3, #0]
       ||
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d009      	beq.n	8007c76 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8007c62:	4b61      	ldr	r3, [pc, #388]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c64:	68db      	ldr	r3, [r3, #12]
 8007c66:	091b      	lsrs	r3, r3, #4
 8007c68:	f003 0307 	and.w	r3, r3, #7
 8007c6c:	1c5a      	adds	r2, r3, #1
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	685b      	ldr	r3, [r3, #4]
       ||
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d047      	beq.n	8007d06 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
 8007c7a:	e044      	b.n	8007d06 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b03      	cmp	r3, #3
 8007c82:	d018      	beq.n	8007cb6 <RCCEx_PLLSAI2_Config+0x86>
 8007c84:	2b03      	cmp	r3, #3
 8007c86:	d825      	bhi.n	8007cd4 <RCCEx_PLLSAI2_Config+0xa4>
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d002      	beq.n	8007c92 <RCCEx_PLLSAI2_Config+0x62>
 8007c8c:	2b02      	cmp	r3, #2
 8007c8e:	d009      	beq.n	8007ca4 <RCCEx_PLLSAI2_Config+0x74>
 8007c90:	e020      	b.n	8007cd4 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c92:	4b55      	ldr	r3, [pc, #340]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	f003 0302 	and.w	r3, r3, #2
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d11d      	bne.n	8007cda <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007ca2:	e01a      	b.n	8007cda <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007ca4:	4b50      	ldr	r3, [pc, #320]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d116      	bne.n	8007cde <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8007cb0:	2301      	movs	r3, #1
 8007cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007cb4:	e013      	b.n	8007cde <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007cb6:	4b4c      	ldr	r3, [pc, #304]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10f      	bne.n	8007ce2 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007cc2:	4b49      	ldr	r3, [pc, #292]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d109      	bne.n	8007ce2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 8007cce:	2301      	movs	r3, #1
 8007cd0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007cd2:	e006      	b.n	8007ce2 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007cd4:	2301      	movs	r3, #1
 8007cd6:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd8:	e004      	b.n	8007ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cda:	bf00      	nop
 8007cdc:	e002      	b.n	8007ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007cde:	bf00      	nop
 8007ce0:	e000      	b.n	8007ce4 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8007ce2:	bf00      	nop
    }

    if(status == HAL_OK)
 8007ce4:	7bfb      	ldrb	r3, [r7, #15]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d10d      	bne.n	8007d06 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007cea:	4b3f      	ldr	r3, [pc, #252]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007cec:	68db      	ldr	r3, [r3, #12]
 8007cee:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6819      	ldr	r1, [r3, #0]
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	685b      	ldr	r3, [r3, #4]
 8007cfa:	3b01      	subs	r3, #1
 8007cfc:	011b      	lsls	r3, r3, #4
 8007cfe:	430b      	orrs	r3, r1
 8007d00:	4939      	ldr	r1, [pc, #228]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d02:	4313      	orrs	r3, r2
 8007d04:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007d06:	7bfb      	ldrb	r3, [r7, #15]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d167      	bne.n	8007ddc <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8007d0c:	4b36      	ldr	r3, [pc, #216]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a35      	ldr	r2, [pc, #212]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d12:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d16:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007d18:	f7fc ffc0 	bl	8004c9c <HAL_GetTick>
 8007d1c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d1e:	e009      	b.n	8007d34 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007d20:	f7fc ffbc 	bl	8004c9c <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d902      	bls.n	8007d34 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	73fb      	strb	r3, [r7, #15]
        break;
 8007d32:	e005      	b.n	8007d40 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8007d34:	4b2c      	ldr	r3, [pc, #176]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d36:	681b      	ldr	r3, [r3, #0]
 8007d38:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d1ef      	bne.n	8007d20 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007d40:	7bfb      	ldrb	r3, [r7, #15]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d14a      	bne.n	8007ddc <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d111      	bne.n	8007d70 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d4c:	4b26      	ldr	r3, [pc, #152]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d4e:	695b      	ldr	r3, [r3, #20]
 8007d50:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 8007d54:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6892      	ldr	r2, [r2, #8]
 8007d5c:	0211      	lsls	r1, r2, #8
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	68d2      	ldr	r2, [r2, #12]
 8007d62:	0912      	lsrs	r2, r2, #4
 8007d64:	0452      	lsls	r2, r2, #17
 8007d66:	430a      	orrs	r2, r1
 8007d68:	491f      	ldr	r1, [pc, #124]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d6a:	4313      	orrs	r3, r2
 8007d6c:	614b      	str	r3, [r1, #20]
 8007d6e:	e011      	b.n	8007d94 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8007d70:	4b1d      	ldr	r3, [pc, #116]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d72:	695b      	ldr	r3, [r3, #20]
 8007d74:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8007d78:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8007d7c:	687a      	ldr	r2, [r7, #4]
 8007d7e:	6892      	ldr	r2, [r2, #8]
 8007d80:	0211      	lsls	r1, r2, #8
 8007d82:	687a      	ldr	r2, [r7, #4]
 8007d84:	6912      	ldr	r2, [r2, #16]
 8007d86:	0852      	lsrs	r2, r2, #1
 8007d88:	3a01      	subs	r2, #1
 8007d8a:	0652      	lsls	r2, r2, #25
 8007d8c:	430a      	orrs	r2, r1
 8007d8e:	4916      	ldr	r1, [pc, #88]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8007d94:	4b14      	ldr	r3, [pc, #80]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a13      	ldr	r2, [pc, #76]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007d9a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007d9e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da0:	f7fc ff7c 	bl	8004c9c <HAL_GetTick>
 8007da4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007da6:	e009      	b.n	8007dbc <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8007da8:	f7fc ff78 	bl	8004c9c <HAL_GetTick>
 8007dac:	4602      	mov	r2, r0
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	1ad3      	subs	r3, r2, r3
 8007db2:	2b02      	cmp	r3, #2
 8007db4:	d902      	bls.n	8007dbc <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8007db6:	2303      	movs	r3, #3
 8007db8:	73fb      	strb	r3, [r7, #15]
          break;
 8007dba:	e005      	b.n	8007dc8 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8007dbc:	4b0a      	ldr	r3, [pc, #40]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d0ef      	beq.n	8007da8 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8007dc8:	7bfb      	ldrb	r3, [r7, #15]
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d106      	bne.n	8007ddc <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8007dce:	4b06      	ldr	r3, [pc, #24]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dd0:	695a      	ldr	r2, [r3, #20]
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	695b      	ldr	r3, [r3, #20]
 8007dd6:	4904      	ldr	r1, [pc, #16]	@ (8007de8 <RCCEx_PLLSAI2_Config+0x1b8>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8007ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dde:	4618      	mov	r0, r3
 8007de0:	3710      	adds	r7, #16
 8007de2:	46bd      	mov	sp, r7
 8007de4:	bd80      	pop	{r7, pc}
 8007de6:	bf00      	nop
 8007de8:	40021000 	.word	0x40021000

08007dec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b084      	sub	sp, #16
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e095      	b.n	8007f2a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d108      	bne.n	8007e18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	685b      	ldr	r3, [r3, #4]
 8007e0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007e0e:	d009      	beq.n	8007e24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	2200      	movs	r2, #0
 8007e14:	61da      	str	r2, [r3, #28]
 8007e16:	e005      	b.n	8007e24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2200      	movs	r2, #0
 8007e1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2200      	movs	r2, #0
 8007e22:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	2200      	movs	r2, #0
 8007e28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d106      	bne.n	8007e44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8007e3e:	6878      	ldr	r0, [r7, #4]
 8007e40:	f7fc f86a 	bl	8003f18 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2202      	movs	r2, #2
 8007e48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	681a      	ldr	r2, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007e5a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e64:	d902      	bls.n	8007e6c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8007e66:	2300      	movs	r3, #0
 8007e68:	60fb      	str	r3, [r7, #12]
 8007e6a:	e002      	b.n	8007e72 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8007e6c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007e70:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	68db      	ldr	r3, [r3, #12]
 8007e76:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8007e7a:	d007      	beq.n	8007e8c <HAL_SPI_Init+0xa0>
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	68db      	ldr	r3, [r3, #12]
 8007e80:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8007e84:	d002      	beq.n	8007e8c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	685b      	ldr	r3, [r3, #4]
 8007e90:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	689b      	ldr	r3, [r3, #8]
 8007e98:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	687b      	ldr	r3, [r7, #4]
 8007ea0:	691b      	ldr	r3, [r3, #16]
 8007ea2:	f003 0302 	and.w	r3, r3, #2
 8007ea6:	431a      	orrs	r2, r3
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	695b      	ldr	r3, [r3, #20]
 8007eac:	f003 0301 	and.w	r3, r3, #1
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	699b      	ldr	r3, [r3, #24]
 8007eb6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	69db      	ldr	r3, [r3, #28]
 8007ec0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8007ec4:	431a      	orrs	r2, r3
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	6a1b      	ldr	r3, [r3, #32]
 8007eca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ece:	ea42 0103 	orr.w	r1, r2, r3
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007ed6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	430a      	orrs	r2, r1
 8007ee0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	699b      	ldr	r3, [r3, #24]
 8007ee6:	0c1b      	lsrs	r3, r3, #16
 8007ee8:	f003 0204 	and.w	r2, r3, #4
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007ef0:	f003 0310 	and.w	r3, r3, #16
 8007ef4:	431a      	orrs	r2, r3
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efa:	f003 0308 	and.w	r3, r3, #8
 8007efe:	431a      	orrs	r2, r3
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	68db      	ldr	r3, [r3, #12]
 8007f04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007f08:	ea42 0103 	orr.w	r1, r2, r3
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	430a      	orrs	r2, r1
 8007f18:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	2200      	movs	r2, #0
 8007f1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2201      	movs	r2, #1
 8007f24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8007f28:	2300      	movs	r3, #0
}
 8007f2a:	4618      	mov	r0, r3
 8007f2c:	3710      	adds	r7, #16
 8007f2e:	46bd      	mov	sp, r7
 8007f30:	bd80      	pop	{r7, pc}

08007f32 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007f32:	b580      	push	{r7, lr}
 8007f34:	b088      	sub	sp, #32
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	60f8      	str	r0, [r7, #12]
 8007f3a:	60b9      	str	r1, [r7, #8]
 8007f3c:	603b      	str	r3, [r7, #0]
 8007f3e:	4613      	mov	r3, r2
 8007f40:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007f42:	f7fc feab 	bl	8004c9c <HAL_GetTick>
 8007f46:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8007f48:	88fb      	ldrh	r3, [r7, #6]
 8007f4a:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8007f52:	b2db      	uxtb	r3, r3
 8007f54:	2b01      	cmp	r3, #1
 8007f56:	d001      	beq.n	8007f5c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8007f58:	2302      	movs	r3, #2
 8007f5a:	e15c      	b.n	8008216 <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8007f5c:	68bb      	ldr	r3, [r7, #8]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d002      	beq.n	8007f68 <HAL_SPI_Transmit+0x36>
 8007f62:	88fb      	ldrh	r3, [r7, #6]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d101      	bne.n	8007f6c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8007f68:	2301      	movs	r3, #1
 8007f6a:	e154      	b.n	8008216 <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d101      	bne.n	8007f7a <HAL_SPI_Transmit+0x48>
 8007f76:	2302      	movs	r3, #2
 8007f78:	e14d      	b.n	8008216 <HAL_SPI_Transmit+0x2e4>
 8007f7a:	68fb      	ldr	r3, [r7, #12]
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	2203      	movs	r2, #3
 8007f86:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	68ba      	ldr	r2, [r7, #8]
 8007f94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	88fa      	ldrh	r2, [r7, #6]
 8007f9a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	88fa      	ldrh	r2, [r7, #6]
 8007fa0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	2200      	movs	r2, #0
 8007fa6:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	2200      	movs	r2, #0
 8007fac:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	2200      	movs	r2, #0
 8007fb4:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	2200      	movs	r2, #0
 8007fbc:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007fcc:	d10f      	bne.n	8007fee <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	681a      	ldr	r2, [r3, #0]
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007fdc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	681a      	ldr	r2, [r3, #0]
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007fec:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007ff8:	2b40      	cmp	r3, #64	@ 0x40
 8007ffa:	d007      	beq.n	800800c <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800800a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	68db      	ldr	r3, [r3, #12]
 8008010:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8008014:	d952      	bls.n	80080bc <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	2b00      	cmp	r3, #0
 800801c:	d002      	beq.n	8008024 <HAL_SPI_Transmit+0xf2>
 800801e:	8b7b      	ldrh	r3, [r7, #26]
 8008020:	2b01      	cmp	r3, #1
 8008022:	d145      	bne.n	80080b0 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008028:	881a      	ldrh	r2, [r3, #0]
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	681b      	ldr	r3, [r3, #0]
 800802e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800803e:	b29b      	uxth	r3, r3
 8008040:	3b01      	subs	r3, #1
 8008042:	b29a      	uxth	r2, r3
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8008048:	e032      	b.n	80080b0 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	689b      	ldr	r3, [r3, #8]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b02      	cmp	r3, #2
 8008056:	d112      	bne.n	800807e <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800805c:	881a      	ldrh	r2, [r3, #0]
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008068:	1c9a      	adds	r2, r3, #2
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008072:	b29b      	uxth	r3, r3
 8008074:	3b01      	subs	r3, #1
 8008076:	b29a      	uxth	r2, r3
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800807c:	e018      	b.n	80080b0 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800807e:	f7fc fe0d 	bl	8004c9c <HAL_GetTick>
 8008082:	4602      	mov	r2, r0
 8008084:	69fb      	ldr	r3, [r7, #28]
 8008086:	1ad3      	subs	r3, r2, r3
 8008088:	683a      	ldr	r2, [r7, #0]
 800808a:	429a      	cmp	r2, r3
 800808c:	d803      	bhi.n	8008096 <HAL_SPI_Transmit+0x164>
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008094:	d102      	bne.n	800809c <HAL_SPI_Transmit+0x16a>
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	2b00      	cmp	r3, #0
 800809a:	d109      	bne.n	80080b0 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2201      	movs	r2, #1
 80080a0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	2200      	movs	r2, #0
 80080a8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80080ac:	2303      	movs	r3, #3
 80080ae:	e0b2      	b.n	8008216 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080b4:	b29b      	uxth	r3, r3
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d1c7      	bne.n	800804a <HAL_SPI_Transmit+0x118>
 80080ba:	e083      	b.n	80081c4 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d002      	beq.n	80080ca <HAL_SPI_Transmit+0x198>
 80080c4:	8b7b      	ldrh	r3, [r7, #26]
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d177      	bne.n	80081ba <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ce:	b29b      	uxth	r3, r3
 80080d0:	2b01      	cmp	r3, #1
 80080d2:	d912      	bls.n	80080fa <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080d8:	881a      	ldrh	r2, [r3, #0]
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80080e4:	1c9a      	adds	r2, r3, #2
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80080ee:	b29b      	uxth	r3, r3
 80080f0:	3b02      	subs	r3, #2
 80080f2:	b29a      	uxth	r2, r3
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80080f8:	e05f      	b.n	80081ba <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	330c      	adds	r3, #12
 8008104:	7812      	ldrb	r2, [r2, #0]
 8008106:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800810c:	1c5a      	adds	r2, r3, #1
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008116:	b29b      	uxth	r3, r3
 8008118:	3b01      	subs	r3, #1
 800811a:	b29a      	uxth	r2, r3
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8008120:	e04b      	b.n	80081ba <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	689b      	ldr	r3, [r3, #8]
 8008128:	f003 0302 	and.w	r3, r3, #2
 800812c:	2b02      	cmp	r3, #2
 800812e:	d12b      	bne.n	8008188 <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008134:	b29b      	uxth	r3, r3
 8008136:	2b01      	cmp	r3, #1
 8008138:	d912      	bls.n	8008160 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800813e:	881a      	ldrh	r2, [r3, #0]
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800814a:	1c9a      	adds	r2, r3, #2
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8008154:	b29b      	uxth	r3, r3
 8008156:	3b02      	subs	r3, #2
 8008158:	b29a      	uxth	r2, r3
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800815e:	e02c      	b.n	80081ba <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8008160:	68fb      	ldr	r3, [r7, #12]
 8008162:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	330c      	adds	r3, #12
 800816a:	7812      	ldrb	r2, [r2, #0]
 800816c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008172:	1c5a      	adds	r2, r3, #1
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800817c:	b29b      	uxth	r3, r3
 800817e:	3b01      	subs	r3, #1
 8008180:	b29a      	uxth	r2, r3
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8008186:	e018      	b.n	80081ba <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8008188:	f7fc fd88 	bl	8004c9c <HAL_GetTick>
 800818c:	4602      	mov	r2, r0
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	1ad3      	subs	r3, r2, r3
 8008192:	683a      	ldr	r2, [r7, #0]
 8008194:	429a      	cmp	r2, r3
 8008196:	d803      	bhi.n	80081a0 <HAL_SPI_Transmit+0x26e>
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800819e:	d102      	bne.n	80081a6 <HAL_SPI_Transmit+0x274>
 80081a0:	683b      	ldr	r3, [r7, #0]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d109      	bne.n	80081ba <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	2201      	movs	r2, #1
 80081aa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 80081b6:	2303      	movs	r3, #3
 80081b8:	e02d      	b.n	8008216 <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 80081ba:	68fb      	ldr	r3, [r7, #12]
 80081bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80081be:	b29b      	uxth	r3, r3
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d1ae      	bne.n	8008122 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80081c4:	69fa      	ldr	r2, [r7, #28]
 80081c6:	6839      	ldr	r1, [r7, #0]
 80081c8:	68f8      	ldr	r0, [r7, #12]
 80081ca:	f000 f947 	bl	800845c <SPI_EndRxTxTransaction>
 80081ce:	4603      	mov	r3, r0
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d002      	beq.n	80081da <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	2220      	movs	r2, #32
 80081d8:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80081da:	68fb      	ldr	r3, [r7, #12]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d10a      	bne.n	80081f8 <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80081e2:	2300      	movs	r3, #0
 80081e4:	617b      	str	r3, [r7, #20]
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	68db      	ldr	r3, [r3, #12]
 80081ec:	617b      	str	r3, [r7, #20]
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	689b      	ldr	r3, [r3, #8]
 80081f4:	617b      	str	r3, [r7, #20]
 80081f6:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80081f8:	68fb      	ldr	r3, [r7, #12]
 80081fa:	2201      	movs	r2, #1
 80081fc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8008200:	68fb      	ldr	r3, [r7, #12]
 8008202:	2200      	movs	r2, #0
 8008204:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800820c:	2b00      	cmp	r3, #0
 800820e:	d001      	beq.n	8008214 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8008210:	2301      	movs	r3, #1
 8008212:	e000      	b.n	8008216 <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8008214:	2300      	movs	r3, #0
  }
}
 8008216:	4618      	mov	r0, r3
 8008218:	3720      	adds	r7, #32
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}
	...

08008220 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008220:	b580      	push	{r7, lr}
 8008222:	b088      	sub	sp, #32
 8008224:	af00      	add	r7, sp, #0
 8008226:	60f8      	str	r0, [r7, #12]
 8008228:	60b9      	str	r1, [r7, #8]
 800822a:	603b      	str	r3, [r7, #0]
 800822c:	4613      	mov	r3, r2
 800822e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8008230:	f7fc fd34 	bl	8004c9c <HAL_GetTick>
 8008234:	4602      	mov	r2, r0
 8008236:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	683a      	ldr	r2, [r7, #0]
 800823c:	4413      	add	r3, r2
 800823e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8008240:	f7fc fd2c 	bl	8004c9c <HAL_GetTick>
 8008244:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008246:	4b39      	ldr	r3, [pc, #228]	@ (800832c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	015b      	lsls	r3, r3, #5
 800824c:	0d1b      	lsrs	r3, r3, #20
 800824e:	69fa      	ldr	r2, [r7, #28]
 8008250:	fb02 f303 	mul.w	r3, r2, r3
 8008254:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008256:	e054      	b.n	8008302 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800825e:	d050      	beq.n	8008302 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8008260:	f7fc fd1c 	bl	8004c9c <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	69bb      	ldr	r3, [r7, #24]
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	69fa      	ldr	r2, [r7, #28]
 800826c:	429a      	cmp	r2, r3
 800826e:	d902      	bls.n	8008276 <SPI_WaitFlagStateUntilTimeout+0x56>
 8008270:	69fb      	ldr	r3, [r7, #28]
 8008272:	2b00      	cmp	r3, #0
 8008274:	d13d      	bne.n	80082f2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	685a      	ldr	r2, [r3, #4]
 800827c:	68fb      	ldr	r3, [r7, #12]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8008284:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	685b      	ldr	r3, [r3, #4]
 800828a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800828e:	d111      	bne.n	80082b4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008298:	d004      	beq.n	80082a4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	689b      	ldr	r3, [r3, #8]
 800829e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80082a2:	d107      	bne.n	80082b4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	681a      	ldr	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80082b2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80082b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80082bc:	d10f      	bne.n	80082de <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80082cc:	601a      	str	r2, [r3, #0]
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80082dc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2201      	movs	r2, #1
 80082e2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80082e6:	68fb      	ldr	r3, [r7, #12]
 80082e8:	2200      	movs	r2, #0
 80082ea:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80082ee:	2303      	movs	r3, #3
 80082f0:	e017      	b.n	8008322 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80082f2:	697b      	ldr	r3, [r7, #20]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d101      	bne.n	80082fc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80082f8:	2300      	movs	r3, #0
 80082fa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	3b01      	subs	r3, #1
 8008300:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	689a      	ldr	r2, [r3, #8]
 8008308:	68bb      	ldr	r3, [r7, #8]
 800830a:	4013      	ands	r3, r2
 800830c:	68ba      	ldr	r2, [r7, #8]
 800830e:	429a      	cmp	r2, r3
 8008310:	bf0c      	ite	eq
 8008312:	2301      	moveq	r3, #1
 8008314:	2300      	movne	r3, #0
 8008316:	b2db      	uxtb	r3, r3
 8008318:	461a      	mov	r2, r3
 800831a:	79fb      	ldrb	r3, [r7, #7]
 800831c:	429a      	cmp	r2, r3
 800831e:	d19b      	bne.n	8008258 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8008320:	2300      	movs	r3, #0
}
 8008322:	4618      	mov	r0, r3
 8008324:	3720      	adds	r7, #32
 8008326:	46bd      	mov	sp, r7
 8008328:	bd80      	pop	{r7, pc}
 800832a:	bf00      	nop
 800832c:	20000004 	.word	0x20000004

08008330 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8008330:	b580      	push	{r7, lr}
 8008332:	b08a      	sub	sp, #40	@ 0x28
 8008334:	af00      	add	r7, sp, #0
 8008336:	60f8      	str	r0, [r7, #12]
 8008338:	60b9      	str	r1, [r7, #8]
 800833a:	607a      	str	r2, [r7, #4]
 800833c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800833e:	2300      	movs	r3, #0
 8008340:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8008342:	f7fc fcab 	bl	8004c9c <HAL_GetTick>
 8008346:	4602      	mov	r2, r0
 8008348:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800834a:	1a9b      	subs	r3, r3, r2
 800834c:	683a      	ldr	r2, [r7, #0]
 800834e:	4413      	add	r3, r2
 8008350:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8008352:	f7fc fca3 	bl	8004c9c <HAL_GetTick>
 8008356:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8008358:	68fb      	ldr	r3, [r7, #12]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	330c      	adds	r3, #12
 800835e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8008360:	4b3d      	ldr	r3, [pc, #244]	@ (8008458 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	4613      	mov	r3, r2
 8008366:	009b      	lsls	r3, r3, #2
 8008368:	4413      	add	r3, r2
 800836a:	00da      	lsls	r2, r3, #3
 800836c:	1ad3      	subs	r3, r2, r3
 800836e:	0d1b      	lsrs	r3, r3, #20
 8008370:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008372:	fb02 f303 	mul.w	r3, r2, r3
 8008376:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8008378:	e060      	b.n	800843c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008380:	d107      	bne.n	8008392 <SPI_WaitFifoStateUntilTimeout+0x62>
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d104      	bne.n	8008392 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8008388:	69fb      	ldr	r3, [r7, #28]
 800838a:	781b      	ldrb	r3, [r3, #0]
 800838c:	b2db      	uxtb	r3, r3
 800838e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8008390:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8008392:	683b      	ldr	r3, [r7, #0]
 8008394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008398:	d050      	beq.n	800843c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800839a:	f7fc fc7f 	bl	8004c9c <HAL_GetTick>
 800839e:	4602      	mov	r2, r0
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	1ad3      	subs	r3, r2, r3
 80083a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80083a6:	429a      	cmp	r2, r3
 80083a8:	d902      	bls.n	80083b0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80083aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	d13d      	bne.n	800842c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685a      	ldr	r2, [r3, #4]
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80083be:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80083c0:	68fb      	ldr	r3, [r7, #12]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80083c8:	d111      	bne.n	80083ee <SPI_WaitFifoStateUntilTimeout+0xbe>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80083d2:	d004      	beq.n	80083de <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	689b      	ldr	r3, [r3, #8]
 80083d8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80083dc:	d107      	bne.n	80083ee <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80083de:	68fb      	ldr	r3, [r7, #12]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80083ec:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80083f6:	d10f      	bne.n	8008418 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	681a      	ldr	r2, [r3, #0]
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008406:	601a      	str	r2, [r3, #0]
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681a      	ldr	r2, [r3, #0]
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8008416:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	2201      	movs	r2, #1
 800841c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	2200      	movs	r2, #0
 8008424:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8008428:	2303      	movs	r3, #3
 800842a:	e010      	b.n	800844e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800842c:	69bb      	ldr	r3, [r7, #24]
 800842e:	2b00      	cmp	r3, #0
 8008430:	d101      	bne.n	8008436 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8008432:	2300      	movs	r3, #0
 8008434:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 8008436:	69bb      	ldr	r3, [r7, #24]
 8008438:	3b01      	subs	r3, #1
 800843a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	689a      	ldr	r2, [r3, #8]
 8008442:	68bb      	ldr	r3, [r7, #8]
 8008444:	4013      	ands	r3, r2
 8008446:	687a      	ldr	r2, [r7, #4]
 8008448:	429a      	cmp	r2, r3
 800844a:	d196      	bne.n	800837a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3728      	adds	r7, #40	@ 0x28
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}
 8008456:	bf00      	nop
 8008458:	20000004 	.word	0x20000004

0800845c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800845c:	b580      	push	{r7, lr}
 800845e:	b086      	sub	sp, #24
 8008460:	af02      	add	r7, sp, #8
 8008462:	60f8      	str	r0, [r7, #12]
 8008464:	60b9      	str	r1, [r7, #8]
 8008466:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	68bb      	ldr	r3, [r7, #8]
 800846e:	2200      	movs	r2, #0
 8008470:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8008474:	68f8      	ldr	r0, [r7, #12]
 8008476:	f7ff ff5b 	bl	8008330 <SPI_WaitFifoStateUntilTimeout>
 800847a:	4603      	mov	r3, r0
 800847c:	2b00      	cmp	r3, #0
 800847e:	d007      	beq.n	8008490 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008484:	f043 0220 	orr.w	r2, r3, #32
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800848c:	2303      	movs	r3, #3
 800848e:	e027      	b.n	80084e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	9300      	str	r3, [sp, #0]
 8008494:	68bb      	ldr	r3, [r7, #8]
 8008496:	2200      	movs	r2, #0
 8008498:	2180      	movs	r1, #128	@ 0x80
 800849a:	68f8      	ldr	r0, [r7, #12]
 800849c:	f7ff fec0 	bl	8008220 <SPI_WaitFlagStateUntilTimeout>
 80084a0:	4603      	mov	r3, r0
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d007      	beq.n	80084b6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084aa:	f043 0220 	orr.w	r2, r3, #32
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e014      	b.n	80084e0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	9300      	str	r3, [sp, #0]
 80084ba:	68bb      	ldr	r3, [r7, #8]
 80084bc:	2200      	movs	r2, #0
 80084be:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80084c2:	68f8      	ldr	r0, [r7, #12]
 80084c4:	f7ff ff34 	bl	8008330 <SPI_WaitFifoStateUntilTimeout>
 80084c8:	4603      	mov	r3, r0
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d007      	beq.n	80084de <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80084d2:	f043 0220 	orr.w	r2, r3, #32
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80084da:	2303      	movs	r3, #3
 80084dc:	e000      	b.n	80084e0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80084de:	2300      	movs	r3, #0
}
 80084e0:	4618      	mov	r0, r3
 80084e2:	3710      	adds	r7, #16
 80084e4:	46bd      	mov	sp, r7
 80084e6:	bd80      	pop	{r7, pc}

080084e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80084e8:	b580      	push	{r7, lr}
 80084ea:	b082      	sub	sp, #8
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	d101      	bne.n	80084fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80084f6:	2301      	movs	r3, #1
 80084f8:	e049      	b.n	800858e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008500:	b2db      	uxtb	r3, r3
 8008502:	2b00      	cmp	r3, #0
 8008504:	d106      	bne.n	8008514 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2200      	movs	r2, #0
 800850a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800850e:	6878      	ldr	r0, [r7, #4]
 8008510:	f7fc fa20 	bl	8004954 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	2202      	movs	r2, #2
 8008518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	3304      	adds	r3, #4
 8008524:	4619      	mov	r1, r3
 8008526:	4610      	mov	r0, r2
 8008528:	f000 fcf0 	bl	8008f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2201      	movs	r2, #1
 8008538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2201      	movs	r2, #1
 8008540:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2201      	movs	r2, #1
 8008548:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2201      	movs	r2, #1
 8008550:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2201      	movs	r2, #1
 8008558:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	2201      	movs	r2, #1
 8008560:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2201      	movs	r2, #1
 8008568:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	2201      	movs	r2, #1
 8008570:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	2201      	movs	r2, #1
 8008578:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	2201      	movs	r2, #1
 8008580:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2201      	movs	r2, #1
 8008588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800858c:	2300      	movs	r3, #0
}
 800858e:	4618      	mov	r0, r3
 8008590:	3708      	adds	r7, #8
 8008592:	46bd      	mov	sp, r7
 8008594:	bd80      	pop	{r7, pc}

08008596 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008596:	b580      	push	{r7, lr}
 8008598:	b082      	sub	sp, #8
 800859a:	af00      	add	r7, sp, #0
 800859c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d101      	bne.n	80085a8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80085a4:	2301      	movs	r3, #1
 80085a6:	e049      	b.n	800863c <HAL_TIM_IC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80085ae:	b2db      	uxtb	r3, r3
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d106      	bne.n	80085c2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	2200      	movs	r2, #0
 80085b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80085bc:	6878      	ldr	r0, [r7, #4]
 80085be:	f7fc f97d 	bl	80048bc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	2202      	movs	r2, #2
 80085c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681a      	ldr	r2, [r3, #0]
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	3304      	adds	r3, #4
 80085d2:	4619      	mov	r1, r3
 80085d4:	4610      	mov	r0, r2
 80085d6:	f000 fc99 	bl	8008f0c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2201      	movs	r2, #1
 80085de:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	2201      	movs	r2, #1
 80085e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	2201      	movs	r2, #1
 80085ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	2201      	movs	r2, #1
 80085f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2201      	movs	r2, #1
 8008606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	2201      	movs	r2, #1
 800860e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2201      	movs	r2, #1
 800861e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	2201      	movs	r2, #1
 8008626:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	2201      	movs	r2, #1
 8008636:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800863a:	2300      	movs	r3, #0
}
 800863c:	4618      	mov	r0, r3
 800863e:	3708      	adds	r7, #8
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}

08008644 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008644:	b580      	push	{r7, lr}
 8008646:	b084      	sub	sp, #16
 8008648:	af00      	add	r7, sp, #0
 800864a:	6078      	str	r0, [r7, #4]
 800864c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800864e:	2300      	movs	r3, #0
 8008650:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8008652:	683b      	ldr	r3, [r7, #0]
 8008654:	2b00      	cmp	r3, #0
 8008656:	d104      	bne.n	8008662 <HAL_TIM_IC_Start_IT+0x1e>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800865e:	b2db      	uxtb	r3, r3
 8008660:	e023      	b.n	80086aa <HAL_TIM_IC_Start_IT+0x66>
 8008662:	683b      	ldr	r3, [r7, #0]
 8008664:	2b04      	cmp	r3, #4
 8008666:	d104      	bne.n	8008672 <HAL_TIM_IC_Start_IT+0x2e>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800866e:	b2db      	uxtb	r3, r3
 8008670:	e01b      	b.n	80086aa <HAL_TIM_IC_Start_IT+0x66>
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	2b08      	cmp	r3, #8
 8008676:	d104      	bne.n	8008682 <HAL_TIM_IC_Start_IT+0x3e>
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800867e:	b2db      	uxtb	r3, r3
 8008680:	e013      	b.n	80086aa <HAL_TIM_IC_Start_IT+0x66>
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	2b0c      	cmp	r3, #12
 8008686:	d104      	bne.n	8008692 <HAL_TIM_IC_Start_IT+0x4e>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800868e:	b2db      	uxtb	r3, r3
 8008690:	e00b      	b.n	80086aa <HAL_TIM_IC_Start_IT+0x66>
 8008692:	683b      	ldr	r3, [r7, #0]
 8008694:	2b10      	cmp	r3, #16
 8008696:	d104      	bne.n	80086a2 <HAL_TIM_IC_Start_IT+0x5e>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800869e:	b2db      	uxtb	r3, r3
 80086a0:	e003      	b.n	80086aa <HAL_TIM_IC_Start_IT+0x66>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80086a8:	b2db      	uxtb	r3, r3
 80086aa:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d104      	bne.n	80086bc <HAL_TIM_IC_Start_IT+0x78>
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80086b8:	b2db      	uxtb	r3, r3
 80086ba:	e013      	b.n	80086e4 <HAL_TIM_IC_Start_IT+0xa0>
 80086bc:	683b      	ldr	r3, [r7, #0]
 80086be:	2b04      	cmp	r3, #4
 80086c0:	d104      	bne.n	80086cc <HAL_TIM_IC_Start_IT+0x88>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80086c8:	b2db      	uxtb	r3, r3
 80086ca:	e00b      	b.n	80086e4 <HAL_TIM_IC_Start_IT+0xa0>
 80086cc:	683b      	ldr	r3, [r7, #0]
 80086ce:	2b08      	cmp	r3, #8
 80086d0:	d104      	bne.n	80086dc <HAL_TIM_IC_Start_IT+0x98>
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 80086d8:	b2db      	uxtb	r3, r3
 80086da:	e003      	b.n	80086e4 <HAL_TIM_IC_Start_IT+0xa0>
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 80086e2:	b2db      	uxtb	r3, r3
 80086e4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_CHANNEL(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80086e6:	7bbb      	ldrb	r3, [r7, #14]
 80086e8:	2b01      	cmp	r3, #1
 80086ea:	d102      	bne.n	80086f2 <HAL_TIM_IC_Start_IT+0xae>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80086ec:	7b7b      	ldrb	r3, [r7, #13]
 80086ee:	2b01      	cmp	r3, #1
 80086f0:	d001      	beq.n	80086f6 <HAL_TIM_IC_Start_IT+0xb2>
  {
    return HAL_ERROR;
 80086f2:	2301      	movs	r3, #1
 80086f4:	e0dd      	b.n	80088b2 <HAL_TIM_IC_Start_IT+0x26e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80086f6:	683b      	ldr	r3, [r7, #0]
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	d104      	bne.n	8008706 <HAL_TIM_IC_Start_IT+0xc2>
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	2202      	movs	r2, #2
 8008700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008704:	e023      	b.n	800874e <HAL_TIM_IC_Start_IT+0x10a>
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	2b04      	cmp	r3, #4
 800870a:	d104      	bne.n	8008716 <HAL_TIM_IC_Start_IT+0xd2>
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2202      	movs	r2, #2
 8008710:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008714:	e01b      	b.n	800874e <HAL_TIM_IC_Start_IT+0x10a>
 8008716:	683b      	ldr	r3, [r7, #0]
 8008718:	2b08      	cmp	r3, #8
 800871a:	d104      	bne.n	8008726 <HAL_TIM_IC_Start_IT+0xe2>
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	2202      	movs	r2, #2
 8008720:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008724:	e013      	b.n	800874e <HAL_TIM_IC_Start_IT+0x10a>
 8008726:	683b      	ldr	r3, [r7, #0]
 8008728:	2b0c      	cmp	r3, #12
 800872a:	d104      	bne.n	8008736 <HAL_TIM_IC_Start_IT+0xf2>
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2202      	movs	r2, #2
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8008734:	e00b      	b.n	800874e <HAL_TIM_IC_Start_IT+0x10a>
 8008736:	683b      	ldr	r3, [r7, #0]
 8008738:	2b10      	cmp	r3, #16
 800873a:	d104      	bne.n	8008746 <HAL_TIM_IC_Start_IT+0x102>
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2202      	movs	r2, #2
 8008740:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008744:	e003      	b.n	800874e <HAL_TIM_IC_Start_IT+0x10a>
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2202      	movs	r2, #2
 800874a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800874e:	683b      	ldr	r3, [r7, #0]
 8008750:	2b00      	cmp	r3, #0
 8008752:	d104      	bne.n	800875e <HAL_TIM_IC_Start_IT+0x11a>
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	2202      	movs	r2, #2
 8008758:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800875c:	e013      	b.n	8008786 <HAL_TIM_IC_Start_IT+0x142>
 800875e:	683b      	ldr	r3, [r7, #0]
 8008760:	2b04      	cmp	r3, #4
 8008762:	d104      	bne.n	800876e <HAL_TIM_IC_Start_IT+0x12a>
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800876c:	e00b      	b.n	8008786 <HAL_TIM_IC_Start_IT+0x142>
 800876e:	683b      	ldr	r3, [r7, #0]
 8008770:	2b08      	cmp	r3, #8
 8008772:	d104      	bne.n	800877e <HAL_TIM_IC_Start_IT+0x13a>
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2202      	movs	r2, #2
 8008778:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 800877c:	e003      	b.n	8008786 <HAL_TIM_IC_Start_IT+0x142>
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	2202      	movs	r2, #2
 8008782:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  switch (Channel)
 8008786:	683b      	ldr	r3, [r7, #0]
 8008788:	2b0c      	cmp	r3, #12
 800878a:	d841      	bhi.n	8008810 <HAL_TIM_IC_Start_IT+0x1cc>
 800878c:	a201      	add	r2, pc, #4	@ (adr r2, 8008794 <HAL_TIM_IC_Start_IT+0x150>)
 800878e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008792:	bf00      	nop
 8008794:	080087c9 	.word	0x080087c9
 8008798:	08008811 	.word	0x08008811
 800879c:	08008811 	.word	0x08008811
 80087a0:	08008811 	.word	0x08008811
 80087a4:	080087db 	.word	0x080087db
 80087a8:	08008811 	.word	0x08008811
 80087ac:	08008811 	.word	0x08008811
 80087b0:	08008811 	.word	0x08008811
 80087b4:	080087ed 	.word	0x080087ed
 80087b8:	08008811 	.word	0x08008811
 80087bc:	08008811 	.word	0x08008811
 80087c0:	08008811 	.word	0x08008811
 80087c4:	080087ff 	.word	0x080087ff
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f042 0202 	orr.w	r2, r2, #2
 80087d6:	60da      	str	r2, [r3, #12]
      break;
 80087d8:	e01d      	b.n	8008816 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	68da      	ldr	r2, [r3, #12]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f042 0204 	orr.w	r2, r2, #4
 80087e8:	60da      	str	r2, [r3, #12]
      break;
 80087ea:	e014      	b.n	8008816 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	68da      	ldr	r2, [r3, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f042 0208 	orr.w	r2, r2, #8
 80087fa:	60da      	str	r2, [r3, #12]
      break;
 80087fc:	e00b      	b.n	8008816 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	68da      	ldr	r2, [r3, #12]
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f042 0210 	orr.w	r2, r2, #16
 800880c:	60da      	str	r2, [r3, #12]
      break;
 800880e:	e002      	b.n	8008816 <HAL_TIM_IC_Start_IT+0x1d2>
    }

    default:
      status = HAL_ERROR;
 8008810:	2301      	movs	r3, #1
 8008812:	73fb      	strb	r3, [r7, #15]
      break;
 8008814:	bf00      	nop
  }

  if (status == HAL_OK)
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d149      	bne.n	80088b0 <HAL_TIM_IC_Start_IT+0x26c>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	681b      	ldr	r3, [r3, #0]
 8008820:	2201      	movs	r2, #1
 8008822:	6839      	ldr	r1, [r7, #0]
 8008824:	4618      	mov	r0, r3
 8008826:	f001 f811 	bl	800984c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	4a23      	ldr	r2, [pc, #140]	@ (80088bc <HAL_TIM_IC_Start_IT+0x278>)
 8008830:	4293      	cmp	r3, r2
 8008832:	d01d      	beq.n	8008870 <HAL_TIM_IC_Start_IT+0x22c>
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800883c:	d018      	beq.n	8008870 <HAL_TIM_IC_Start_IT+0x22c>
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	4a1f      	ldr	r2, [pc, #124]	@ (80088c0 <HAL_TIM_IC_Start_IT+0x27c>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d013      	beq.n	8008870 <HAL_TIM_IC_Start_IT+0x22c>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	4a1d      	ldr	r2, [pc, #116]	@ (80088c4 <HAL_TIM_IC_Start_IT+0x280>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d00e      	beq.n	8008870 <HAL_TIM_IC_Start_IT+0x22c>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	4a1c      	ldr	r2, [pc, #112]	@ (80088c8 <HAL_TIM_IC_Start_IT+0x284>)
 8008858:	4293      	cmp	r3, r2
 800885a:	d009      	beq.n	8008870 <HAL_TIM_IC_Start_IT+0x22c>
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a1a      	ldr	r2, [pc, #104]	@ (80088cc <HAL_TIM_IC_Start_IT+0x288>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d004      	beq.n	8008870 <HAL_TIM_IC_Start_IT+0x22c>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	4a19      	ldr	r2, [pc, #100]	@ (80088d0 <HAL_TIM_IC_Start_IT+0x28c>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d115      	bne.n	800889c <HAL_TIM_IC_Start_IT+0x258>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	689a      	ldr	r2, [r3, #8]
 8008876:	4b17      	ldr	r3, [pc, #92]	@ (80088d4 <HAL_TIM_IC_Start_IT+0x290>)
 8008878:	4013      	ands	r3, r2
 800887a:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	2b06      	cmp	r3, #6
 8008880:	d015      	beq.n	80088ae <HAL_TIM_IC_Start_IT+0x26a>
 8008882:	68bb      	ldr	r3, [r7, #8]
 8008884:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8008888:	d011      	beq.n	80088ae <HAL_TIM_IC_Start_IT+0x26a>
      {
        __HAL_TIM_ENABLE(htim);
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	681a      	ldr	r2, [r3, #0]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f042 0201 	orr.w	r2, r2, #1
 8008898:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800889a:	e008      	b.n	80088ae <HAL_TIM_IC_Start_IT+0x26a>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681a      	ldr	r2, [r3, #0]
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	f042 0201 	orr.w	r2, r2, #1
 80088aa:	601a      	str	r2, [r3, #0]
 80088ac:	e000      	b.n	80088b0 <HAL_TIM_IC_Start_IT+0x26c>
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088ae:	bf00      	nop
    }
  }

  /* Return function status */
  return status;
 80088b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80088b2:	4618      	mov	r0, r3
 80088b4:	3710      	adds	r7, #16
 80088b6:	46bd      	mov	sp, r7
 80088b8:	bd80      	pop	{r7, pc}
 80088ba:	bf00      	nop
 80088bc:	40012c00 	.word	0x40012c00
 80088c0:	40000400 	.word	0x40000400
 80088c4:	40000800 	.word	0x40000800
 80088c8:	40000c00 	.word	0x40000c00
 80088cc:	40013400 	.word	0x40013400
 80088d0:	40014000 	.word	0x40014000
 80088d4:	00010007 	.word	0x00010007

080088d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b084      	sub	sp, #16
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	68db      	ldr	r3, [r3, #12]
 80088e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80088f0:	68bb      	ldr	r3, [r7, #8]
 80088f2:	f003 0302 	and.w	r3, r3, #2
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d020      	beq.n	800893c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b00      	cmp	r3, #0
 8008902:	d01b      	beq.n	800893c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0202 	mvn.w	r2, #2
 800890c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f7f8 fccc 	bl	80012c0 <HAL_TIM_IC_CaptureCallback>
 8008928:	e005      	b.n	8008936 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fada 	bl	8008ee4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f7fa f94b 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	f003 0304 	and.w	r3, r3, #4
 8008942:	2b00      	cmp	r3, #0
 8008944:	d020      	beq.n	8008988 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	f003 0304 	and.w	r3, r3, #4
 800894c:	2b00      	cmp	r3, #0
 800894e:	d01b      	beq.n	8008988 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f06f 0204 	mvn.w	r2, #4
 8008958:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	2202      	movs	r2, #2
 800895e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	699b      	ldr	r3, [r3, #24]
 8008966:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800896a:	2b00      	cmp	r3, #0
 800896c:	d003      	beq.n	8008976 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f7f8 fca6 	bl	80012c0 <HAL_TIM_IC_CaptureCallback>
 8008974:	e005      	b.n	8008982 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fab4 	bl	8008ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800897c:	6878      	ldr	r0, [r7, #4]
 800897e:	f7fa f925 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2200      	movs	r2, #0
 8008986:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	f003 0308 	and.w	r3, r3, #8
 800898e:	2b00      	cmp	r3, #0
 8008990:	d020      	beq.n	80089d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	f003 0308 	and.w	r3, r3, #8
 8008998:	2b00      	cmp	r3, #0
 800899a:	d01b      	beq.n	80089d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	681b      	ldr	r3, [r3, #0]
 80089a0:	f06f 0208 	mvn.w	r2, #8
 80089a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2204      	movs	r2, #4
 80089aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	69db      	ldr	r3, [r3, #28]
 80089b2:	f003 0303 	and.w	r3, r3, #3
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d003      	beq.n	80089c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7f8 fc80 	bl	80012c0 <HAL_TIM_IC_CaptureCallback>
 80089c0:	e005      	b.n	80089ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089c2:	6878      	ldr	r0, [r7, #4]
 80089c4:	f000 fa8e 	bl	8008ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089c8:	6878      	ldr	r0, [r7, #4]
 80089ca:	f7fa f8ff 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	2200      	movs	r2, #0
 80089d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80089d4:	68bb      	ldr	r3, [r7, #8]
 80089d6:	f003 0310 	and.w	r3, r3, #16
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d020      	beq.n	8008a20 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	f003 0310 	and.w	r3, r3, #16
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d01b      	beq.n	8008a20 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	f06f 0210 	mvn.w	r2, #16
 80089f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	2208      	movs	r2, #8
 80089f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	69db      	ldr	r3, [r3, #28]
 80089fe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d003      	beq.n	8008a0e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a06:	6878      	ldr	r0, [r7, #4]
 8008a08:	f7f8 fc5a 	bl	80012c0 <HAL_TIM_IC_CaptureCallback>
 8008a0c:	e005      	b.n	8008a1a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fa68 	bl	8008ee4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a14:	6878      	ldr	r0, [r7, #4]
 8008a16:	f7fa f8d9 	bl	8002bcc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	2200      	movs	r2, #0
 8008a1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008a20:	68bb      	ldr	r3, [r7, #8]
 8008a22:	f003 0301 	and.w	r3, r3, #1
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d00c      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	f003 0301 	and.w	r3, r3, #1
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d007      	beq.n	8008a44 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f06f 0201 	mvn.w	r2, #1
 8008a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a3e:	6878      	ldr	r0, [r7, #4]
 8008a40:	f000 fa46 	bl	8008ed0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a44:	68bb      	ldr	r3, [r7, #8]
 8008a46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d104      	bne.n	8008a58 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8008a4e:	68bb      	ldr	r3, [r7, #8]
 8008a50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d00c      	beq.n	8008a72 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d007      	beq.n	8008a72 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8008a6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008a6c:	6878      	ldr	r0, [r7, #4]
 8008a6e:	f001 f841 	bl	8009af4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8008a72:	68bb      	ldr	r3, [r7, #8]
 8008a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d00c      	beq.n	8008a96 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d007      	beq.n	8008a96 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8008a8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008a90:	6878      	ldr	r0, [r7, #4]
 8008a92:	f001 f839 	bl	8009b08 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	d00c      	beq.n	8008aba <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008aa6:	2b00      	cmp	r3, #0
 8008aa8:	d007      	beq.n	8008aba <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008ab2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f000 fa1f 	bl	8008ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	f003 0320 	and.w	r3, r3, #32
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d00c      	beq.n	8008ade <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	f003 0320 	and.w	r3, r3, #32
 8008aca:	2b00      	cmp	r3, #0
 8008acc:	d007      	beq.n	8008ade <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f06f 0220 	mvn.w	r2, #32
 8008ad6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ad8:	6878      	ldr	r0, [r7, #4]
 8008ada:	f001 f801 	bl	8009ae0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ade:	bf00      	nop
 8008ae0:	3710      	adds	r7, #16
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	bd80      	pop	{r7, pc}

08008ae6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008ae6:	b580      	push	{r7, lr}
 8008ae8:	b086      	sub	sp, #24
 8008aea:	af00      	add	r7, sp, #0
 8008aec:	60f8      	str	r0, [r7, #12]
 8008aee:	60b9      	str	r1, [r7, #8]
 8008af0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008af2:	2300      	movs	r3, #0
 8008af4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008afc:	2b01      	cmp	r3, #1
 8008afe:	d101      	bne.n	8008b04 <HAL_TIM_IC_ConfigChannel+0x1e>
 8008b00:	2302      	movs	r3, #2
 8008b02:	e088      	b.n	8008c16 <HAL_TIM_IC_ConfigChannel+0x130>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	2201      	movs	r2, #1
 8008b08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d11b      	bne.n	8008b4a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008b16:	68bb      	ldr	r3, [r7, #8]
 8008b18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008b1a:	68bb      	ldr	r3, [r7, #8]
 8008b1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008b1e:	68bb      	ldr	r3, [r7, #8]
 8008b20:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8008b22:	f000 fd6f 	bl	8009604 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	68fb      	ldr	r3, [r7, #12]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	f022 020c 	bic.w	r2, r2, #12
 8008b34:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	6999      	ldr	r1, [r3, #24]
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	689a      	ldr	r2, [r3, #8]
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	681b      	ldr	r3, [r3, #0]
 8008b44:	430a      	orrs	r2, r1
 8008b46:	619a      	str	r2, [r3, #24]
 8008b48:	e060      	b.n	8008c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	2b04      	cmp	r3, #4
 8008b4e:	d11c      	bne.n	8008b8a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008b5c:	68bb      	ldr	r3, [r7, #8]
 8008b5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8008b60:	f000 fdbe 	bl	80096e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008b64:	68fb      	ldr	r3, [r7, #12]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	699a      	ldr	r2, [r3, #24]
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008b72:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	6999      	ldr	r1, [r3, #24]
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	021a      	lsls	r2, r3, #8
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	430a      	orrs	r2, r1
 8008b86:	619a      	str	r2, [r3, #24]
 8008b88:	e040      	b.n	8008c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2b08      	cmp	r3, #8
 8008b8e:	d11b      	bne.n	8008bc8 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8008ba0:	f000 fddb 	bl	800975a <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	69da      	ldr	r2, [r3, #28]
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 020c 	bic.w	r2, r2, #12
 8008bb2:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	69d9      	ldr	r1, [r3, #28]
 8008bba:	68bb      	ldr	r3, [r7, #8]
 8008bbc:	689a      	ldr	r2, [r3, #8]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	430a      	orrs	r2, r1
 8008bc4:	61da      	str	r2, [r3, #28]
 8008bc6:	e021      	b.n	8008c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b0c      	cmp	r3, #12
 8008bcc:	d11c      	bne.n	8008c08 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8008bd6:	68bb      	ldr	r3, [r7, #8]
 8008bd8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8008bda:	68bb      	ldr	r3, [r7, #8]
 8008bdc:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8008bde:	f000 fdf8 	bl	80097d2 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	69da      	ldr	r2, [r3, #28]
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8008bf0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	69d9      	ldr	r1, [r3, #28]
 8008bf8:	68bb      	ldr	r3, [r7, #8]
 8008bfa:	689b      	ldr	r3, [r3, #8]
 8008bfc:	021a      	lsls	r2, r3, #8
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	61da      	str	r2, [r3, #28]
 8008c06:	e001      	b.n	8008c0c <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008c08:	2301      	movs	r3, #1
 8008c0a:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008c0c:	68fb      	ldr	r3, [r7, #12]
 8008c0e:	2200      	movs	r2, #0
 8008c10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3718      	adds	r7, #24
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008c20:	b580      	push	{r7, lr}
 8008c22:	b086      	sub	sp, #24
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	60f8      	str	r0, [r7, #12]
 8008c28:	60b9      	str	r1, [r7, #8]
 8008c2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008c2c:	2300      	movs	r3, #0
 8008c2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d101      	bne.n	8008c3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8008c3a:	2302      	movs	r3, #2
 8008c3c:	e0ff      	b.n	8008e3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	2201      	movs	r2, #1
 8008c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	2b14      	cmp	r3, #20
 8008c4a:	f200 80f0 	bhi.w	8008e2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8008c4e:	a201      	add	r2, pc, #4	@ (adr r2, 8008c54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8008c50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c54:	08008ca9 	.word	0x08008ca9
 8008c58:	08008e2f 	.word	0x08008e2f
 8008c5c:	08008e2f 	.word	0x08008e2f
 8008c60:	08008e2f 	.word	0x08008e2f
 8008c64:	08008ce9 	.word	0x08008ce9
 8008c68:	08008e2f 	.word	0x08008e2f
 8008c6c:	08008e2f 	.word	0x08008e2f
 8008c70:	08008e2f 	.word	0x08008e2f
 8008c74:	08008d2b 	.word	0x08008d2b
 8008c78:	08008e2f 	.word	0x08008e2f
 8008c7c:	08008e2f 	.word	0x08008e2f
 8008c80:	08008e2f 	.word	0x08008e2f
 8008c84:	08008d6b 	.word	0x08008d6b
 8008c88:	08008e2f 	.word	0x08008e2f
 8008c8c:	08008e2f 	.word	0x08008e2f
 8008c90:	08008e2f 	.word	0x08008e2f
 8008c94:	08008dad 	.word	0x08008dad
 8008c98:	08008e2f 	.word	0x08008e2f
 8008c9c:	08008e2f 	.word	0x08008e2f
 8008ca0:	08008e2f 	.word	0x08008e2f
 8008ca4:	08008ded 	.word	0x08008ded
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008ca8:	68fb      	ldr	r3, [r7, #12]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68b9      	ldr	r1, [r7, #8]
 8008cae:	4618      	mov	r0, r3
 8008cb0:	f000 f9d2 	bl	8009058 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	699a      	ldr	r2, [r3, #24]
 8008cba:	68fb      	ldr	r3, [r7, #12]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	f042 0208 	orr.w	r2, r2, #8
 8008cc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	699a      	ldr	r2, [r3, #24]
 8008cca:	68fb      	ldr	r3, [r7, #12]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	f022 0204 	bic.w	r2, r2, #4
 8008cd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008cd4:	68fb      	ldr	r3, [r7, #12]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	6999      	ldr	r1, [r3, #24]
 8008cda:	68bb      	ldr	r3, [r7, #8]
 8008cdc:	691a      	ldr	r2, [r3, #16]
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	430a      	orrs	r2, r1
 8008ce4:	619a      	str	r2, [r3, #24]
      break;
 8008ce6:	e0a5      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68b9      	ldr	r1, [r7, #8]
 8008cee:	4618      	mov	r0, r3
 8008cf0:	f000 fa42 	bl	8009178 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	699a      	ldr	r2, [r3, #24]
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	699a      	ldr	r2, [r3, #24]
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	6999      	ldr	r1, [r3, #24]
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	691b      	ldr	r3, [r3, #16]
 8008d1e:	021a      	lsls	r2, r3, #8
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	430a      	orrs	r2, r1
 8008d26:	619a      	str	r2, [r3, #24]
      break;
 8008d28:	e084      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008d2a:	68fb      	ldr	r3, [r7, #12]
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	68b9      	ldr	r1, [r7, #8]
 8008d30:	4618      	mov	r0, r3
 8008d32:	f000 faab 	bl	800928c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	69da      	ldr	r2, [r3, #28]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	f042 0208 	orr.w	r2, r2, #8
 8008d44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	69da      	ldr	r2, [r3, #28]
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f022 0204 	bic.w	r2, r2, #4
 8008d54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	69d9      	ldr	r1, [r3, #28]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	68fb      	ldr	r3, [r7, #12]
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	430a      	orrs	r2, r1
 8008d66:	61da      	str	r2, [r3, #28]
      break;
 8008d68:	e064      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fb13 	bl	800939c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	69da      	ldr	r2, [r3, #28]
 8008d7c:	68fb      	ldr	r3, [r7, #12]
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008d84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	69da      	ldr	r2, [r3, #28]
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008d94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	69d9      	ldr	r1, [r3, #28]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	691b      	ldr	r3, [r3, #16]
 8008da0:	021a      	lsls	r2, r3, #8
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	430a      	orrs	r2, r1
 8008da8:	61da      	str	r2, [r3, #28]
      break;
 8008daa:	e043      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	68b9      	ldr	r1, [r7, #8]
 8008db2:	4618      	mov	r0, r3
 8008db4:	f000 fb5c 	bl	8009470 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008db8:	68fb      	ldr	r3, [r7, #12]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f042 0208 	orr.w	r2, r2, #8
 8008dc6:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	f022 0204 	bic.w	r2, r2, #4
 8008dd6:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008dde:	68bb      	ldr	r3, [r7, #8]
 8008de0:	691a      	ldr	r2, [r3, #16]
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	430a      	orrs	r2, r1
 8008de8:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008dea:	e023      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	68b9      	ldr	r1, [r7, #8]
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fba0 	bl	8009538 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8008e06:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8008e16:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8008e1e:	68bb      	ldr	r3, [r7, #8]
 8008e20:	691b      	ldr	r3, [r3, #16]
 8008e22:	021a      	lsls	r2, r3, #8
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	430a      	orrs	r2, r1
 8008e2a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 8008e2c:	e002      	b.n	8008e34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	75fb      	strb	r3, [r7, #23]
      break;
 8008e32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	2200      	movs	r2, #0
 8008e38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8008e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e3e:	4618      	mov	r0, r3
 8008e40:	3718      	adds	r7, #24
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop

08008e48 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b085      	sub	sp, #20
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
 8008e50:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8008e56:	683b      	ldr	r3, [r7, #0]
 8008e58:	2b0c      	cmp	r3, #12
 8008e5a:	d831      	bhi.n	8008ec0 <HAL_TIM_ReadCapturedValue+0x78>
 8008e5c:	a201      	add	r2, pc, #4	@ (adr r2, 8008e64 <HAL_TIM_ReadCapturedValue+0x1c>)
 8008e5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e62:	bf00      	nop
 8008e64:	08008e99 	.word	0x08008e99
 8008e68:	08008ec1 	.word	0x08008ec1
 8008e6c:	08008ec1 	.word	0x08008ec1
 8008e70:	08008ec1 	.word	0x08008ec1
 8008e74:	08008ea3 	.word	0x08008ea3
 8008e78:	08008ec1 	.word	0x08008ec1
 8008e7c:	08008ec1 	.word	0x08008ec1
 8008e80:	08008ec1 	.word	0x08008ec1
 8008e84:	08008ead 	.word	0x08008ead
 8008e88:	08008ec1 	.word	0x08008ec1
 8008e8c:	08008ec1 	.word	0x08008ec1
 8008e90:	08008ec1 	.word	0x08008ec1
 8008e94:	08008eb7 	.word	0x08008eb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008e9e:	60fb      	str	r3, [r7, #12]

      break;
 8008ea0:	e00f      	b.n	8008ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008ea8:	60fb      	str	r3, [r7, #12]

      break;
 8008eaa:	e00a      	b.n	8008ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008eb2:	60fb      	str	r3, [r7, #12]

      break;
 8008eb4:	e005      	b.n	8008ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ebc:	60fb      	str	r3, [r7, #12]

      break;
 8008ebe:	e000      	b.n	8008ec2 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8008ec0:	bf00      	nop
  }

  return tmpreg;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
}
 8008ec4:	4618      	mov	r0, r3
 8008ec6:	3714      	adds	r7, #20
 8008ec8:	46bd      	mov	sp, r7
 8008eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ece:	4770      	bx	lr

08008ed0 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ed0:	b480      	push	{r7}
 8008ed2:	b083      	sub	sp, #12
 8008ed4:	af00      	add	r7, sp, #0
 8008ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008ed8:	bf00      	nop
 8008eda:	370c      	adds	r7, #12
 8008edc:	46bd      	mov	sp, r7
 8008ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee2:	4770      	bx	lr

08008ee4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ee4:	b480      	push	{r7}
 8008ee6:	b083      	sub	sp, #12
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008eec:	bf00      	nop
 8008eee:	370c      	adds	r7, #12
 8008ef0:	46bd      	mov	sp, r7
 8008ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef6:	4770      	bx	lr

08008ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008ef8:	b480      	push	{r7}
 8008efa:	b083      	sub	sp, #12
 8008efc:	af00      	add	r7, sp, #0
 8008efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f00:	bf00      	nop
 8008f02:	370c      	adds	r7, #12
 8008f04:	46bd      	mov	sp, r7
 8008f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0a:	4770      	bx	lr

08008f0c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f0c:	b480      	push	{r7}
 8008f0e:	b085      	sub	sp, #20
 8008f10:	af00      	add	r7, sp, #0
 8008f12:	6078      	str	r0, [r7, #4]
 8008f14:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	4a46      	ldr	r2, [pc, #280]	@ (8009038 <TIM_Base_SetConfig+0x12c>)
 8008f20:	4293      	cmp	r3, r2
 8008f22:	d013      	beq.n	8008f4c <TIM_Base_SetConfig+0x40>
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f2a:	d00f      	beq.n	8008f4c <TIM_Base_SetConfig+0x40>
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	4a43      	ldr	r2, [pc, #268]	@ (800903c <TIM_Base_SetConfig+0x130>)
 8008f30:	4293      	cmp	r3, r2
 8008f32:	d00b      	beq.n	8008f4c <TIM_Base_SetConfig+0x40>
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	4a42      	ldr	r2, [pc, #264]	@ (8009040 <TIM_Base_SetConfig+0x134>)
 8008f38:	4293      	cmp	r3, r2
 8008f3a:	d007      	beq.n	8008f4c <TIM_Base_SetConfig+0x40>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	4a41      	ldr	r2, [pc, #260]	@ (8009044 <TIM_Base_SetConfig+0x138>)
 8008f40:	4293      	cmp	r3, r2
 8008f42:	d003      	beq.n	8008f4c <TIM_Base_SetConfig+0x40>
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	4a40      	ldr	r2, [pc, #256]	@ (8009048 <TIM_Base_SetConfig+0x13c>)
 8008f48:	4293      	cmp	r3, r2
 8008f4a:	d108      	bne.n	8008f5e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	68fa      	ldr	r2, [r7, #12]
 8008f5a:	4313      	orrs	r3, r2
 8008f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	4a35      	ldr	r2, [pc, #212]	@ (8009038 <TIM_Base_SetConfig+0x12c>)
 8008f62:	4293      	cmp	r3, r2
 8008f64:	d01f      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f6c:	d01b      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	4a32      	ldr	r2, [pc, #200]	@ (800903c <TIM_Base_SetConfig+0x130>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d017      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	4a31      	ldr	r2, [pc, #196]	@ (8009040 <TIM_Base_SetConfig+0x134>)
 8008f7a:	4293      	cmp	r3, r2
 8008f7c:	d013      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	4a30      	ldr	r2, [pc, #192]	@ (8009044 <TIM_Base_SetConfig+0x138>)
 8008f82:	4293      	cmp	r3, r2
 8008f84:	d00f      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	4a2f      	ldr	r2, [pc, #188]	@ (8009048 <TIM_Base_SetConfig+0x13c>)
 8008f8a:	4293      	cmp	r3, r2
 8008f8c:	d00b      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	4a2e      	ldr	r2, [pc, #184]	@ (800904c <TIM_Base_SetConfig+0x140>)
 8008f92:	4293      	cmp	r3, r2
 8008f94:	d007      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	4a2d      	ldr	r2, [pc, #180]	@ (8009050 <TIM_Base_SetConfig+0x144>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d003      	beq.n	8008fa6 <TIM_Base_SetConfig+0x9a>
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4a2c      	ldr	r2, [pc, #176]	@ (8009054 <TIM_Base_SetConfig+0x148>)
 8008fa2:	4293      	cmp	r3, r2
 8008fa4:	d108      	bne.n	8008fb8 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	68db      	ldr	r3, [r3, #12]
 8008fb2:	68fa      	ldr	r2, [r7, #12]
 8008fb4:	4313      	orrs	r3, r2
 8008fb6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	695b      	ldr	r3, [r3, #20]
 8008fc2:	4313      	orrs	r3, r2
 8008fc4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	68fa      	ldr	r2, [r7, #12]
 8008fca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	689a      	ldr	r2, [r3, #8]
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008fd4:	683b      	ldr	r3, [r7, #0]
 8008fd6:	681a      	ldr	r2, [r3, #0]
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	4a16      	ldr	r2, [pc, #88]	@ (8009038 <TIM_Base_SetConfig+0x12c>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d00f      	beq.n	8009004 <TIM_Base_SetConfig+0xf8>
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	4a18      	ldr	r2, [pc, #96]	@ (8009048 <TIM_Base_SetConfig+0x13c>)
 8008fe8:	4293      	cmp	r3, r2
 8008fea:	d00b      	beq.n	8009004 <TIM_Base_SetConfig+0xf8>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	4a17      	ldr	r2, [pc, #92]	@ (800904c <TIM_Base_SetConfig+0x140>)
 8008ff0:	4293      	cmp	r3, r2
 8008ff2:	d007      	beq.n	8009004 <TIM_Base_SetConfig+0xf8>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	4a16      	ldr	r2, [pc, #88]	@ (8009050 <TIM_Base_SetConfig+0x144>)
 8008ff8:	4293      	cmp	r3, r2
 8008ffa:	d003      	beq.n	8009004 <TIM_Base_SetConfig+0xf8>
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	4a15      	ldr	r2, [pc, #84]	@ (8009054 <TIM_Base_SetConfig+0x148>)
 8009000:	4293      	cmp	r3, r2
 8009002:	d103      	bne.n	800900c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009004:	683b      	ldr	r3, [r7, #0]
 8009006:	691a      	ldr	r2, [r3, #16]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2201      	movs	r2, #1
 8009010:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	691b      	ldr	r3, [r3, #16]
 8009016:	f003 0301 	and.w	r3, r3, #1
 800901a:	2b01      	cmp	r3, #1
 800901c:	d105      	bne.n	800902a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	691b      	ldr	r3, [r3, #16]
 8009022:	f023 0201 	bic.w	r2, r3, #1
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	611a      	str	r2, [r3, #16]
  }
}
 800902a:	bf00      	nop
 800902c:	3714      	adds	r7, #20
 800902e:	46bd      	mov	sp, r7
 8009030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009034:	4770      	bx	lr
 8009036:	bf00      	nop
 8009038:	40012c00 	.word	0x40012c00
 800903c:	40000400 	.word	0x40000400
 8009040:	40000800 	.word	0x40000800
 8009044:	40000c00 	.word	0x40000c00
 8009048:	40013400 	.word	0x40013400
 800904c:	40014000 	.word	0x40014000
 8009050:	40014400 	.word	0x40014400
 8009054:	40014800 	.word	0x40014800

08009058 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009058:	b480      	push	{r7}
 800905a:	b087      	sub	sp, #28
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
 8009060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	6a1b      	ldr	r3, [r3, #32]
 800906c:	f023 0201 	bic.w	r2, r3, #1
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	685b      	ldr	r3, [r3, #4]
 8009078:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	699b      	ldr	r3, [r3, #24]
 800907e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009086:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800908a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	f023 0303 	bic.w	r3, r3, #3
 8009092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009094:	683b      	ldr	r3, [r7, #0]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	68fa      	ldr	r2, [r7, #12]
 800909a:	4313      	orrs	r3, r2
 800909c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800909e:	697b      	ldr	r3, [r7, #20]
 80090a0:	f023 0302 	bic.w	r3, r3, #2
 80090a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80090a6:	683b      	ldr	r3, [r7, #0]
 80090a8:	689b      	ldr	r3, [r3, #8]
 80090aa:	697a      	ldr	r2, [r7, #20]
 80090ac:	4313      	orrs	r3, r2
 80090ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80090b0:	687b      	ldr	r3, [r7, #4]
 80090b2:	4a2c      	ldr	r2, [pc, #176]	@ (8009164 <TIM_OC1_SetConfig+0x10c>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d00f      	beq.n	80090d8 <TIM_OC1_SetConfig+0x80>
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	4a2b      	ldr	r2, [pc, #172]	@ (8009168 <TIM_OC1_SetConfig+0x110>)
 80090bc:	4293      	cmp	r3, r2
 80090be:	d00b      	beq.n	80090d8 <TIM_OC1_SetConfig+0x80>
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	4a2a      	ldr	r2, [pc, #168]	@ (800916c <TIM_OC1_SetConfig+0x114>)
 80090c4:	4293      	cmp	r3, r2
 80090c6:	d007      	beq.n	80090d8 <TIM_OC1_SetConfig+0x80>
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	4a29      	ldr	r2, [pc, #164]	@ (8009170 <TIM_OC1_SetConfig+0x118>)
 80090cc:	4293      	cmp	r3, r2
 80090ce:	d003      	beq.n	80090d8 <TIM_OC1_SetConfig+0x80>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	4a28      	ldr	r2, [pc, #160]	@ (8009174 <TIM_OC1_SetConfig+0x11c>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d10c      	bne.n	80090f2 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80090d8:	697b      	ldr	r3, [r7, #20]
 80090da:	f023 0308 	bic.w	r3, r3, #8
 80090de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	68db      	ldr	r3, [r3, #12]
 80090e4:	697a      	ldr	r2, [r7, #20]
 80090e6:	4313      	orrs	r3, r2
 80090e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80090ea:	697b      	ldr	r3, [r7, #20]
 80090ec:	f023 0304 	bic.w	r3, r3, #4
 80090f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	4a1b      	ldr	r2, [pc, #108]	@ (8009164 <TIM_OC1_SetConfig+0x10c>)
 80090f6:	4293      	cmp	r3, r2
 80090f8:	d00f      	beq.n	800911a <TIM_OC1_SetConfig+0xc2>
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	4a1a      	ldr	r2, [pc, #104]	@ (8009168 <TIM_OC1_SetConfig+0x110>)
 80090fe:	4293      	cmp	r3, r2
 8009100:	d00b      	beq.n	800911a <TIM_OC1_SetConfig+0xc2>
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	4a19      	ldr	r2, [pc, #100]	@ (800916c <TIM_OC1_SetConfig+0x114>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d007      	beq.n	800911a <TIM_OC1_SetConfig+0xc2>
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	4a18      	ldr	r2, [pc, #96]	@ (8009170 <TIM_OC1_SetConfig+0x118>)
 800910e:	4293      	cmp	r3, r2
 8009110:	d003      	beq.n	800911a <TIM_OC1_SetConfig+0xc2>
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	4a17      	ldr	r2, [pc, #92]	@ (8009174 <TIM_OC1_SetConfig+0x11c>)
 8009116:	4293      	cmp	r3, r2
 8009118:	d111      	bne.n	800913e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009120:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009122:	693b      	ldr	r3, [r7, #16]
 8009124:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8009128:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	695b      	ldr	r3, [r3, #20]
 800912e:	693a      	ldr	r2, [r7, #16]
 8009130:	4313      	orrs	r3, r2
 8009132:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	699b      	ldr	r3, [r3, #24]
 8009138:	693a      	ldr	r2, [r7, #16]
 800913a:	4313      	orrs	r3, r2
 800913c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	693a      	ldr	r2, [r7, #16]
 8009142:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	68fa      	ldr	r2, [r7, #12]
 8009148:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800914a:	683b      	ldr	r3, [r7, #0]
 800914c:	685a      	ldr	r2, [r3, #4]
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	697a      	ldr	r2, [r7, #20]
 8009156:	621a      	str	r2, [r3, #32]
}
 8009158:	bf00      	nop
 800915a:	371c      	adds	r7, #28
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	40012c00 	.word	0x40012c00
 8009168:	40013400 	.word	0x40013400
 800916c:	40014000 	.word	0x40014000
 8009170:	40014400 	.word	0x40014400
 8009174:	40014800 	.word	0x40014800

08009178 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8009178:	b480      	push	{r7}
 800917a:	b087      	sub	sp, #28
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	6a1b      	ldr	r3, [r3, #32]
 8009186:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	6a1b      	ldr	r3, [r3, #32]
 800918c:	f023 0210 	bic.w	r2, r3, #16
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	685b      	ldr	r3, [r3, #4]
 8009198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	699b      	ldr	r3, [r3, #24]
 800919e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80091a6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80091aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80091b2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80091b4:	683b      	ldr	r3, [r7, #0]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	021b      	lsls	r3, r3, #8
 80091ba:	68fa      	ldr	r2, [r7, #12]
 80091bc:	4313      	orrs	r3, r2
 80091be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80091c0:	697b      	ldr	r3, [r7, #20]
 80091c2:	f023 0320 	bic.w	r3, r3, #32
 80091c6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	689b      	ldr	r3, [r3, #8]
 80091cc:	011b      	lsls	r3, r3, #4
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	4a28      	ldr	r2, [pc, #160]	@ (8009278 <TIM_OC2_SetConfig+0x100>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d003      	beq.n	80091e4 <TIM_OC2_SetConfig+0x6c>
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	4a27      	ldr	r2, [pc, #156]	@ (800927c <TIM_OC2_SetConfig+0x104>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d10d      	bne.n	8009200 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80091e4:	697b      	ldr	r3, [r7, #20]
 80091e6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80091ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	011b      	lsls	r3, r3, #4
 80091f2:	697a      	ldr	r2, [r7, #20]
 80091f4:	4313      	orrs	r3, r2
 80091f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80091f8:	697b      	ldr	r3, [r7, #20]
 80091fa:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80091fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	4a1d      	ldr	r2, [pc, #116]	@ (8009278 <TIM_OC2_SetConfig+0x100>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d00f      	beq.n	8009228 <TIM_OC2_SetConfig+0xb0>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a1c      	ldr	r2, [pc, #112]	@ (800927c <TIM_OC2_SetConfig+0x104>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d00b      	beq.n	8009228 <TIM_OC2_SetConfig+0xb0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a1b      	ldr	r2, [pc, #108]	@ (8009280 <TIM_OC2_SetConfig+0x108>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d007      	beq.n	8009228 <TIM_OC2_SetConfig+0xb0>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a1a      	ldr	r2, [pc, #104]	@ (8009284 <TIM_OC2_SetConfig+0x10c>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d003      	beq.n	8009228 <TIM_OC2_SetConfig+0xb0>
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	4a19      	ldr	r2, [pc, #100]	@ (8009288 <TIM_OC2_SetConfig+0x110>)
 8009224:	4293      	cmp	r3, r2
 8009226:	d113      	bne.n	8009250 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009228:	693b      	ldr	r3, [r7, #16]
 800922a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800922e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009230:	693b      	ldr	r3, [r7, #16]
 8009232:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8009236:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009238:	683b      	ldr	r3, [r7, #0]
 800923a:	695b      	ldr	r3, [r3, #20]
 800923c:	009b      	lsls	r3, r3, #2
 800923e:	693a      	ldr	r2, [r7, #16]
 8009240:	4313      	orrs	r3, r2
 8009242:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	699b      	ldr	r3, [r3, #24]
 8009248:	009b      	lsls	r3, r3, #2
 800924a:	693a      	ldr	r2, [r7, #16]
 800924c:	4313      	orrs	r3, r2
 800924e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	693a      	ldr	r2, [r7, #16]
 8009254:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	68fa      	ldr	r2, [r7, #12]
 800925a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800925c:	683b      	ldr	r3, [r7, #0]
 800925e:	685a      	ldr	r2, [r3, #4]
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	697a      	ldr	r2, [r7, #20]
 8009268:	621a      	str	r2, [r3, #32]
}
 800926a:	bf00      	nop
 800926c:	371c      	adds	r7, #28
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	40012c00 	.word	0x40012c00
 800927c:	40013400 	.word	0x40013400
 8009280:	40014000 	.word	0x40014000
 8009284:	40014400 	.word	0x40014400
 8009288:	40014800 	.word	0x40014800

0800928c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800928c:	b480      	push	{r7}
 800928e:	b087      	sub	sp, #28
 8009290:	af00      	add	r7, sp, #0
 8009292:	6078      	str	r0, [r7, #4]
 8009294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a1b      	ldr	r3, [r3, #32]
 800929a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6a1b      	ldr	r3, [r3, #32]
 80092a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	685b      	ldr	r3, [r3, #4]
 80092ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	69db      	ldr	r3, [r3, #28]
 80092b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80092be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80092c0:	68fb      	ldr	r3, [r7, #12]
 80092c2:	f023 0303 	bic.w	r3, r3, #3
 80092c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	68fa      	ldr	r2, [r7, #12]
 80092ce:	4313      	orrs	r3, r2
 80092d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80092d2:	697b      	ldr	r3, [r7, #20]
 80092d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80092d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80092da:	683b      	ldr	r3, [r7, #0]
 80092dc:	689b      	ldr	r3, [r3, #8]
 80092de:	021b      	lsls	r3, r3, #8
 80092e0:	697a      	ldr	r2, [r7, #20]
 80092e2:	4313      	orrs	r3, r2
 80092e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	4a27      	ldr	r2, [pc, #156]	@ (8009388 <TIM_OC3_SetConfig+0xfc>)
 80092ea:	4293      	cmp	r3, r2
 80092ec:	d003      	beq.n	80092f6 <TIM_OC3_SetConfig+0x6a>
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	4a26      	ldr	r2, [pc, #152]	@ (800938c <TIM_OC3_SetConfig+0x100>)
 80092f2:	4293      	cmp	r3, r2
 80092f4:	d10d      	bne.n	8009312 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80092f6:	697b      	ldr	r3, [r7, #20]
 80092f8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80092fc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80092fe:	683b      	ldr	r3, [r7, #0]
 8009300:	68db      	ldr	r3, [r3, #12]
 8009302:	021b      	lsls	r3, r3, #8
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	4313      	orrs	r3, r2
 8009308:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800930a:	697b      	ldr	r3, [r7, #20]
 800930c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8009310:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	4a1c      	ldr	r2, [pc, #112]	@ (8009388 <TIM_OC3_SetConfig+0xfc>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d00f      	beq.n	800933a <TIM_OC3_SetConfig+0xae>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	4a1b      	ldr	r2, [pc, #108]	@ (800938c <TIM_OC3_SetConfig+0x100>)
 800931e:	4293      	cmp	r3, r2
 8009320:	d00b      	beq.n	800933a <TIM_OC3_SetConfig+0xae>
 8009322:	687b      	ldr	r3, [r7, #4]
 8009324:	4a1a      	ldr	r2, [pc, #104]	@ (8009390 <TIM_OC3_SetConfig+0x104>)
 8009326:	4293      	cmp	r3, r2
 8009328:	d007      	beq.n	800933a <TIM_OC3_SetConfig+0xae>
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	4a19      	ldr	r2, [pc, #100]	@ (8009394 <TIM_OC3_SetConfig+0x108>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d003      	beq.n	800933a <TIM_OC3_SetConfig+0xae>
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4a18      	ldr	r2, [pc, #96]	@ (8009398 <TIM_OC3_SetConfig+0x10c>)
 8009336:	4293      	cmp	r3, r2
 8009338:	d113      	bne.n	8009362 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800933a:	693b      	ldr	r3, [r7, #16]
 800933c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009340:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009348:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800934a:	683b      	ldr	r3, [r7, #0]
 800934c:	695b      	ldr	r3, [r3, #20]
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	4313      	orrs	r3, r2
 8009354:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009356:	683b      	ldr	r3, [r7, #0]
 8009358:	699b      	ldr	r3, [r3, #24]
 800935a:	011b      	lsls	r3, r3, #4
 800935c:	693a      	ldr	r2, [r7, #16]
 800935e:	4313      	orrs	r3, r2
 8009360:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	693a      	ldr	r2, [r7, #16]
 8009366:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	68fa      	ldr	r2, [r7, #12]
 800936c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800936e:	683b      	ldr	r3, [r7, #0]
 8009370:	685a      	ldr	r2, [r3, #4]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	621a      	str	r2, [r3, #32]
}
 800937c:	bf00      	nop
 800937e:	371c      	adds	r7, #28
 8009380:	46bd      	mov	sp, r7
 8009382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009386:	4770      	bx	lr
 8009388:	40012c00 	.word	0x40012c00
 800938c:	40013400 	.word	0x40013400
 8009390:	40014000 	.word	0x40014000
 8009394:	40014400 	.word	0x40014400
 8009398:	40014800 	.word	0x40014800

0800939c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800939c:	b480      	push	{r7}
 800939e:	b087      	sub	sp, #28
 80093a0:	af00      	add	r7, sp, #0
 80093a2:	6078      	str	r0, [r7, #4]
 80093a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6a1b      	ldr	r3, [r3, #32]
 80093aa:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	6a1b      	ldr	r3, [r3, #32]
 80093b0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	685b      	ldr	r3, [r3, #4]
 80093bc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	69db      	ldr	r3, [r3, #28]
 80093c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80093ca:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80093ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	021b      	lsls	r3, r3, #8
 80093de:	68fa      	ldr	r2, [r7, #12]
 80093e0:	4313      	orrs	r3, r2
 80093e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80093e4:	693b      	ldr	r3, [r7, #16]
 80093e6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80093ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	689b      	ldr	r3, [r3, #8]
 80093f0:	031b      	lsls	r3, r3, #12
 80093f2:	693a      	ldr	r2, [r7, #16]
 80093f4:	4313      	orrs	r3, r2
 80093f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	4a18      	ldr	r2, [pc, #96]	@ (800945c <TIM_OC4_SetConfig+0xc0>)
 80093fc:	4293      	cmp	r3, r2
 80093fe:	d00f      	beq.n	8009420 <TIM_OC4_SetConfig+0x84>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	4a17      	ldr	r2, [pc, #92]	@ (8009460 <TIM_OC4_SetConfig+0xc4>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d00b      	beq.n	8009420 <TIM_OC4_SetConfig+0x84>
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	4a16      	ldr	r2, [pc, #88]	@ (8009464 <TIM_OC4_SetConfig+0xc8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d007      	beq.n	8009420 <TIM_OC4_SetConfig+0x84>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	4a15      	ldr	r2, [pc, #84]	@ (8009468 <TIM_OC4_SetConfig+0xcc>)
 8009414:	4293      	cmp	r3, r2
 8009416:	d003      	beq.n	8009420 <TIM_OC4_SetConfig+0x84>
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	4a14      	ldr	r2, [pc, #80]	@ (800946c <TIM_OC4_SetConfig+0xd0>)
 800941c:	4293      	cmp	r3, r2
 800941e:	d109      	bne.n	8009434 <TIM_OC4_SetConfig+0x98>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8009426:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009428:	683b      	ldr	r3, [r7, #0]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	019b      	lsls	r3, r3, #6
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	697a      	ldr	r2, [r7, #20]
 8009438:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	68fa      	ldr	r2, [r7, #12]
 800943e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009440:	683b      	ldr	r3, [r7, #0]
 8009442:	685a      	ldr	r2, [r3, #4]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	693a      	ldr	r2, [r7, #16]
 800944c:	621a      	str	r2, [r3, #32]
}
 800944e:	bf00      	nop
 8009450:	371c      	adds	r7, #28
 8009452:	46bd      	mov	sp, r7
 8009454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009458:	4770      	bx	lr
 800945a:	bf00      	nop
 800945c:	40012c00 	.word	0x40012c00
 8009460:	40013400 	.word	0x40013400
 8009464:	40014000 	.word	0x40014000
 8009468:	40014400 	.word	0x40014400
 800946c:	40014800 	.word	0x40014800

08009470 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009470:	b480      	push	{r7}
 8009472:	b087      	sub	sp, #28
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
 8009478:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a1b      	ldr	r3, [r3, #32]
 800947e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	6a1b      	ldr	r3, [r3, #32]
 8009484:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	685b      	ldr	r3, [r3, #4]
 8009490:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009496:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800949e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80094a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	4313      	orrs	r3, r2
 80094ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80094ae:	693b      	ldr	r3, [r7, #16]
 80094b0:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80094b4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80094b6:	683b      	ldr	r3, [r7, #0]
 80094b8:	689b      	ldr	r3, [r3, #8]
 80094ba:	041b      	lsls	r3, r3, #16
 80094bc:	693a      	ldr	r2, [r7, #16]
 80094be:	4313      	orrs	r3, r2
 80094c0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	4a17      	ldr	r2, [pc, #92]	@ (8009524 <TIM_OC5_SetConfig+0xb4>)
 80094c6:	4293      	cmp	r3, r2
 80094c8:	d00f      	beq.n	80094ea <TIM_OC5_SetConfig+0x7a>
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	4a16      	ldr	r2, [pc, #88]	@ (8009528 <TIM_OC5_SetConfig+0xb8>)
 80094ce:	4293      	cmp	r3, r2
 80094d0:	d00b      	beq.n	80094ea <TIM_OC5_SetConfig+0x7a>
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	4a15      	ldr	r2, [pc, #84]	@ (800952c <TIM_OC5_SetConfig+0xbc>)
 80094d6:	4293      	cmp	r3, r2
 80094d8:	d007      	beq.n	80094ea <TIM_OC5_SetConfig+0x7a>
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	4a14      	ldr	r2, [pc, #80]	@ (8009530 <TIM_OC5_SetConfig+0xc0>)
 80094de:	4293      	cmp	r3, r2
 80094e0:	d003      	beq.n	80094ea <TIM_OC5_SetConfig+0x7a>
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	4a13      	ldr	r2, [pc, #76]	@ (8009534 <TIM_OC5_SetConfig+0xc4>)
 80094e6:	4293      	cmp	r3, r2
 80094e8:	d109      	bne.n	80094fe <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80094ea:	697b      	ldr	r3, [r7, #20]
 80094ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80094f0:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80094f2:	683b      	ldr	r3, [r7, #0]
 80094f4:	695b      	ldr	r3, [r3, #20]
 80094f6:	021b      	lsls	r3, r3, #8
 80094f8:	697a      	ldr	r2, [r7, #20]
 80094fa:	4313      	orrs	r3, r2
 80094fc:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	697a      	ldr	r2, [r7, #20]
 8009502:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	68fa      	ldr	r2, [r7, #12]
 8009508:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	685a      	ldr	r2, [r3, #4]
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	693a      	ldr	r2, [r7, #16]
 8009516:	621a      	str	r2, [r3, #32]
}
 8009518:	bf00      	nop
 800951a:	371c      	adds	r7, #28
 800951c:	46bd      	mov	sp, r7
 800951e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009522:	4770      	bx	lr
 8009524:	40012c00 	.word	0x40012c00
 8009528:	40013400 	.word	0x40013400
 800952c:	40014000 	.word	0x40014000
 8009530:	40014400 	.word	0x40014400
 8009534:	40014800 	.word	0x40014800

08009538 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8009538:	b480      	push	{r7}
 800953a:	b087      	sub	sp, #28
 800953c:	af00      	add	r7, sp, #0
 800953e:	6078      	str	r0, [r7, #4]
 8009540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	6a1b      	ldr	r3, [r3, #32]
 8009546:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6a1b      	ldr	r3, [r3, #32]
 800954c:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	685b      	ldr	r3, [r3, #4]
 8009558:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800955e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009566:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800956a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800956c:	683b      	ldr	r3, [r7, #0]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	021b      	lsls	r3, r3, #8
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4313      	orrs	r3, r2
 8009576:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009578:	693b      	ldr	r3, [r7, #16]
 800957a:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800957e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	689b      	ldr	r3, [r3, #8]
 8009584:	051b      	lsls	r3, r3, #20
 8009586:	693a      	ldr	r2, [r7, #16]
 8009588:	4313      	orrs	r3, r2
 800958a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	4a18      	ldr	r2, [pc, #96]	@ (80095f0 <TIM_OC6_SetConfig+0xb8>)
 8009590:	4293      	cmp	r3, r2
 8009592:	d00f      	beq.n	80095b4 <TIM_OC6_SetConfig+0x7c>
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a17      	ldr	r2, [pc, #92]	@ (80095f4 <TIM_OC6_SetConfig+0xbc>)
 8009598:	4293      	cmp	r3, r2
 800959a:	d00b      	beq.n	80095b4 <TIM_OC6_SetConfig+0x7c>
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	4a16      	ldr	r2, [pc, #88]	@ (80095f8 <TIM_OC6_SetConfig+0xc0>)
 80095a0:	4293      	cmp	r3, r2
 80095a2:	d007      	beq.n	80095b4 <TIM_OC6_SetConfig+0x7c>
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	4a15      	ldr	r2, [pc, #84]	@ (80095fc <TIM_OC6_SetConfig+0xc4>)
 80095a8:	4293      	cmp	r3, r2
 80095aa:	d003      	beq.n	80095b4 <TIM_OC6_SetConfig+0x7c>
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	4a14      	ldr	r2, [pc, #80]	@ (8009600 <TIM_OC6_SetConfig+0xc8>)
 80095b0:	4293      	cmp	r3, r2
 80095b2:	d109      	bne.n	80095c8 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80095b4:	697b      	ldr	r3, [r7, #20]
 80095b6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80095ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80095bc:	683b      	ldr	r3, [r7, #0]
 80095be:	695b      	ldr	r3, [r3, #20]
 80095c0:	029b      	lsls	r3, r3, #10
 80095c2:	697a      	ldr	r2, [r7, #20]
 80095c4:	4313      	orrs	r3, r2
 80095c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	697a      	ldr	r2, [r7, #20]
 80095cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	68fa      	ldr	r2, [r7, #12]
 80095d2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80095d4:	683b      	ldr	r3, [r7, #0]
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	693a      	ldr	r2, [r7, #16]
 80095e0:	621a      	str	r2, [r3, #32]
}
 80095e2:	bf00      	nop
 80095e4:	371c      	adds	r7, #28
 80095e6:	46bd      	mov	sp, r7
 80095e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ec:	4770      	bx	lr
 80095ee:	bf00      	nop
 80095f0:	40012c00 	.word	0x40012c00
 80095f4:	40013400 	.word	0x40013400
 80095f8:	40014000 	.word	0x40014000
 80095fc:	40014400 	.word	0x40014400
 8009600:	40014800 	.word	0x40014800

08009604 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8009604:	b480      	push	{r7}
 8009606:	b087      	sub	sp, #28
 8009608:	af00      	add	r7, sp, #0
 800960a:	60f8      	str	r0, [r7, #12]
 800960c:	60b9      	str	r1, [r7, #8]
 800960e:	607a      	str	r2, [r7, #4]
 8009610:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	6a1b      	ldr	r3, [r3, #32]
 8009616:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	6a1b      	ldr	r3, [r3, #32]
 800961c:	f023 0201 	bic.w	r2, r3, #1
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009624:	68fb      	ldr	r3, [r7, #12]
 8009626:	699b      	ldr	r3, [r3, #24]
 8009628:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	4a26      	ldr	r2, [pc, #152]	@ (80096c8 <TIM_TI1_SetConfig+0xc4>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d017      	beq.n	8009662 <TIM_TI1_SetConfig+0x5e>
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009638:	d013      	beq.n	8009662 <TIM_TI1_SetConfig+0x5e>
 800963a:	68fb      	ldr	r3, [r7, #12]
 800963c:	4a23      	ldr	r2, [pc, #140]	@ (80096cc <TIM_TI1_SetConfig+0xc8>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00f      	beq.n	8009662 <TIM_TI1_SetConfig+0x5e>
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	4a22      	ldr	r2, [pc, #136]	@ (80096d0 <TIM_TI1_SetConfig+0xcc>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d00b      	beq.n	8009662 <TIM_TI1_SetConfig+0x5e>
 800964a:	68fb      	ldr	r3, [r7, #12]
 800964c:	4a21      	ldr	r2, [pc, #132]	@ (80096d4 <TIM_TI1_SetConfig+0xd0>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d007      	beq.n	8009662 <TIM_TI1_SetConfig+0x5e>
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	4a20      	ldr	r2, [pc, #128]	@ (80096d8 <TIM_TI1_SetConfig+0xd4>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d003      	beq.n	8009662 <TIM_TI1_SetConfig+0x5e>
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	4a1f      	ldr	r2, [pc, #124]	@ (80096dc <TIM_TI1_SetConfig+0xd8>)
 800965e:	4293      	cmp	r3, r2
 8009660:	d101      	bne.n	8009666 <TIM_TI1_SetConfig+0x62>
 8009662:	2301      	movs	r3, #1
 8009664:	e000      	b.n	8009668 <TIM_TI1_SetConfig+0x64>
 8009666:	2300      	movs	r3, #0
 8009668:	2b00      	cmp	r3, #0
 800966a:	d008      	beq.n	800967e <TIM_TI1_SetConfig+0x7a>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	f023 0303 	bic.w	r3, r3, #3
 8009672:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009674:	697a      	ldr	r2, [r7, #20]
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	4313      	orrs	r3, r2
 800967a:	617b      	str	r3, [r7, #20]
 800967c:	e003      	b.n	8009686 <TIM_TI1_SetConfig+0x82>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800967e:	697b      	ldr	r3, [r7, #20]
 8009680:	f043 0301 	orr.w	r3, r3, #1
 8009684:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800968c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800968e:	683b      	ldr	r3, [r7, #0]
 8009690:	011b      	lsls	r3, r3, #4
 8009692:	b2db      	uxtb	r3, r3
 8009694:	697a      	ldr	r2, [r7, #20]
 8009696:	4313      	orrs	r3, r2
 8009698:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800969a:	693b      	ldr	r3, [r7, #16]
 800969c:	f023 030a 	bic.w	r3, r3, #10
 80096a0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	f003 030a 	and.w	r3, r3, #10
 80096a8:	693a      	ldr	r2, [r7, #16]
 80096aa:	4313      	orrs	r3, r2
 80096ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	697a      	ldr	r2, [r7, #20]
 80096b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	693a      	ldr	r2, [r7, #16]
 80096b8:	621a      	str	r2, [r3, #32]
}
 80096ba:	bf00      	nop
 80096bc:	371c      	adds	r7, #28
 80096be:	46bd      	mov	sp, r7
 80096c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c4:	4770      	bx	lr
 80096c6:	bf00      	nop
 80096c8:	40012c00 	.word	0x40012c00
 80096cc:	40000400 	.word	0x40000400
 80096d0:	40000800 	.word	0x40000800
 80096d4:	40000c00 	.word	0x40000c00
 80096d8:	40013400 	.word	0x40013400
 80096dc:	40014000 	.word	0x40014000

080096e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b087      	sub	sp, #28
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	60f8      	str	r0, [r7, #12]
 80096e8:	60b9      	str	r1, [r7, #8]
 80096ea:	607a      	str	r2, [r7, #4]
 80096ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	6a1b      	ldr	r3, [r3, #32]
 80096f2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	6a1b      	ldr	r3, [r3, #32]
 80096f8:	f023 0210 	bic.w	r2, r3, #16
 80096fc:	68fb      	ldr	r3, [r7, #12]
 80096fe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009700:	68fb      	ldr	r3, [r7, #12]
 8009702:	699b      	ldr	r3, [r3, #24]
 8009704:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009706:	693b      	ldr	r3, [r7, #16]
 8009708:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800970c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	021b      	lsls	r3, r3, #8
 8009712:	693a      	ldr	r2, [r7, #16]
 8009714:	4313      	orrs	r3, r2
 8009716:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009718:	693b      	ldr	r3, [r7, #16]
 800971a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800971e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009720:	683b      	ldr	r3, [r7, #0]
 8009722:	031b      	lsls	r3, r3, #12
 8009724:	b29b      	uxth	r3, r3
 8009726:	693a      	ldr	r2, [r7, #16]
 8009728:	4313      	orrs	r3, r2
 800972a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8009732:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009734:	68bb      	ldr	r3, [r7, #8]
 8009736:	011b      	lsls	r3, r3, #4
 8009738:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800973c:	697a      	ldr	r2, [r7, #20]
 800973e:	4313      	orrs	r3, r2
 8009740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009742:	68fb      	ldr	r3, [r7, #12]
 8009744:	693a      	ldr	r2, [r7, #16]
 8009746:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	697a      	ldr	r2, [r7, #20]
 800974c:	621a      	str	r2, [r3, #32]
}
 800974e:	bf00      	nop
 8009750:	371c      	adds	r7, #28
 8009752:	46bd      	mov	sp, r7
 8009754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009758:	4770      	bx	lr

0800975a <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800975a:	b480      	push	{r7}
 800975c:	b087      	sub	sp, #28
 800975e:	af00      	add	r7, sp, #0
 8009760:	60f8      	str	r0, [r7, #12]
 8009762:	60b9      	str	r1, [r7, #8]
 8009764:	607a      	str	r2, [r7, #4]
 8009766:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	6a1b      	ldr	r3, [r3, #32]
 800976c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	6a1b      	ldr	r3, [r3, #32]
 8009772:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8009776:	68fb      	ldr	r3, [r7, #12]
 8009778:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	69db      	ldr	r3, [r3, #28]
 800977e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	f023 0303 	bic.w	r3, r3, #3
 8009786:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8009788:	693a      	ldr	r2, [r7, #16]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	4313      	orrs	r3, r2
 800978e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009790:	693b      	ldr	r3, [r7, #16]
 8009792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8009796:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	011b      	lsls	r3, r3, #4
 800979c:	b2db      	uxtb	r3, r3
 800979e:	693a      	ldr	r2, [r7, #16]
 80097a0:	4313      	orrs	r3, r2
 80097a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80097a4:	697b      	ldr	r3, [r7, #20]
 80097a6:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 80097aa:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80097ac:	68bb      	ldr	r3, [r7, #8]
 80097ae:	021b      	lsls	r3, r3, #8
 80097b0:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 80097b4:	697a      	ldr	r2, [r7, #20]
 80097b6:	4313      	orrs	r3, r2
 80097b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	693a      	ldr	r2, [r7, #16]
 80097be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	697a      	ldr	r2, [r7, #20]
 80097c4:	621a      	str	r2, [r3, #32]
}
 80097c6:	bf00      	nop
 80097c8:	371c      	adds	r7, #28
 80097ca:	46bd      	mov	sp, r7
 80097cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097d0:	4770      	bx	lr

080097d2 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80097d2:	b480      	push	{r7}
 80097d4:	b087      	sub	sp, #28
 80097d6:	af00      	add	r7, sp, #0
 80097d8:	60f8      	str	r0, [r7, #12]
 80097da:	60b9      	str	r1, [r7, #8]
 80097dc:	607a      	str	r2, [r7, #4]
 80097de:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80097e0:	68fb      	ldr	r3, [r7, #12]
 80097e2:	6a1b      	ldr	r3, [r3, #32]
 80097e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80097e6:	68fb      	ldr	r3, [r7, #12]
 80097e8:	6a1b      	ldr	r3, [r3, #32]
 80097ea:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	69db      	ldr	r3, [r3, #28]
 80097f6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80097fe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	021b      	lsls	r3, r3, #8
 8009804:	693a      	ldr	r2, [r7, #16]
 8009806:	4313      	orrs	r3, r2
 8009808:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800980a:	693b      	ldr	r3, [r7, #16]
 800980c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8009810:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	031b      	lsls	r3, r3, #12
 8009816:	b29b      	uxth	r3, r3
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	4313      	orrs	r3, r2
 800981c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800981e:	697b      	ldr	r3, [r7, #20]
 8009820:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 8009824:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	031b      	lsls	r3, r3, #12
 800982a:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 800982e:	697a      	ldr	r2, [r7, #20]
 8009830:	4313      	orrs	r3, r2
 8009832:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	693a      	ldr	r2, [r7, #16]
 8009838:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	697a      	ldr	r2, [r7, #20]
 800983e:	621a      	str	r2, [r3, #32]
}
 8009840:	bf00      	nop
 8009842:	371c      	adds	r7, #28
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800984c:	b480      	push	{r7}
 800984e:	b087      	sub	sp, #28
 8009850:	af00      	add	r7, sp, #0
 8009852:	60f8      	str	r0, [r7, #12]
 8009854:	60b9      	str	r1, [r7, #8]
 8009856:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	f003 031f 	and.w	r3, r3, #31
 800985e:	2201      	movs	r2, #1
 8009860:	fa02 f303 	lsl.w	r3, r2, r3
 8009864:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009866:	68fb      	ldr	r3, [r7, #12]
 8009868:	6a1a      	ldr	r2, [r3, #32]
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	43db      	mvns	r3, r3
 800986e:	401a      	ands	r2, r3
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009874:	68fb      	ldr	r3, [r7, #12]
 8009876:	6a1a      	ldr	r2, [r3, #32]
 8009878:	68bb      	ldr	r3, [r7, #8]
 800987a:	f003 031f 	and.w	r3, r3, #31
 800987e:	6879      	ldr	r1, [r7, #4]
 8009880:	fa01 f303 	lsl.w	r3, r1, r3
 8009884:	431a      	orrs	r2, r3
 8009886:	68fb      	ldr	r3, [r7, #12]
 8009888:	621a      	str	r2, [r3, #32]
}
 800988a:	bf00      	nop
 800988c:	371c      	adds	r7, #28
 800988e:	46bd      	mov	sp, r7
 8009890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009894:	4770      	bx	lr

08009896 <HAL_TIMEx_PWMN_Stop_DMA>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009896:	b580      	push	{r7, lr}
 8009898:	b084      	sub	sp, #16
 800989a:	af00      	add	r7, sp, #0
 800989c:	6078      	str	r0, [r7, #4]
 800989e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80098a0:	2300      	movs	r3, #0
 80098a2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80098a4:	683b      	ldr	r3, [r7, #0]
 80098a6:	2b08      	cmp	r3, #8
 80098a8:	d025      	beq.n	80098f6 <HAL_TIMEx_PWMN_Stop_DMA+0x60>
 80098aa:	683b      	ldr	r3, [r7, #0]
 80098ac:	2b08      	cmp	r3, #8
 80098ae:	d830      	bhi.n	8009912 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
 80098b0:	683b      	ldr	r3, [r7, #0]
 80098b2:	2b00      	cmp	r3, #0
 80098b4:	d003      	beq.n	80098be <HAL_TIMEx_PWMN_Stop_DMA+0x28>
 80098b6:	683b      	ldr	r3, [r7, #0]
 80098b8:	2b04      	cmp	r3, #4
 80098ba:	d00e      	beq.n	80098da <HAL_TIMEx_PWMN_Stop_DMA+0x44>
 80098bc:	e029      	b.n	8009912 <HAL_TIMEx_PWMN_Stop_DMA+0x7c>
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	68da      	ldr	r2, [r3, #12]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80098cc:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80098d2:	4618      	mov	r0, r3
 80098d4:	f7fb fbe2 	bl	800509c <HAL_DMA_Abort_IT>
      break;
 80098d8:	e01e      	b.n	8009918 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	68da      	ldr	r2, [r3, #12]
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80098e8:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80098ee:	4618      	mov	r0, r3
 80098f0:	f7fb fbd4 	bl	800509c <HAL_DMA_Abort_IT>
      break;
 80098f4:	e010      	b.n	8009918 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	68da      	ldr	r2, [r3, #12]
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8009904:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800990a:	4618      	mov	r0, r3
 800990c:	f7fb fbc6 	bl	800509c <HAL_DMA_Abort_IT>
      break;
 8009910:	e002      	b.n	8009918 <HAL_TIMEx_PWMN_Stop_DMA+0x82>
    }

    default:
      status = HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	73fb      	strb	r3, [r7, #15]
      break;
 8009916:	bf00      	nop
  }

  if (status == HAL_OK)
 8009918:	7bfb      	ldrb	r3, [r7, #15]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d152      	bne.n	80099c4 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
  {
    /* Disable the complementary PWM output */
    TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	2200      	movs	r2, #0
 8009924:	6839      	ldr	r1, [r7, #0]
 8009926:	4618      	mov	r0, r3
 8009928:	f000 f8f8 	bl	8009b1c <TIM_CCxNChannelCmd>

    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	6a1a      	ldr	r2, [r3, #32]
 8009932:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009936:	4013      	ands	r3, r2
 8009938:	2b00      	cmp	r3, #0
 800993a:	d10f      	bne.n	800995c <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	681b      	ldr	r3, [r3, #0]
 8009940:	6a1a      	ldr	r2, [r3, #32]
 8009942:	f240 4344 	movw	r3, #1092	@ 0x444
 8009946:	4013      	ands	r3, r2
 8009948:	2b00      	cmp	r3, #0
 800994a:	d107      	bne.n	800995c <HAL_TIMEx_PWMN_Stop_DMA+0xc6>
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	681b      	ldr	r3, [r3, #0]
 8009950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800995a:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	6a1a      	ldr	r2, [r3, #32]
 8009962:	f241 1311 	movw	r3, #4369	@ 0x1111
 8009966:	4013      	ands	r3, r2
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10f      	bne.n	800998c <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	6a1a      	ldr	r2, [r3, #32]
 8009972:	f240 4344 	movw	r3, #1092	@ 0x444
 8009976:	4013      	ands	r3, r2
 8009978:	2b00      	cmp	r3, #0
 800997a:	d107      	bne.n	800998c <HAL_TIMEx_PWMN_Stop_DMA+0xf6>
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	681a      	ldr	r2, [r3, #0]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 0201 	bic.w	r2, r2, #1
 800998a:	601a      	str	r2, [r3, #0]

    /* Set the TIM complementary channel state */
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	2b00      	cmp	r3, #0
 8009990:	d104      	bne.n	800999c <HAL_TIMEx_PWMN_Stop_DMA+0x106>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2201      	movs	r2, #1
 8009996:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800999a:	e013      	b.n	80099c4 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	2b04      	cmp	r3, #4
 80099a0:	d104      	bne.n	80099ac <HAL_TIMEx_PWMN_Stop_DMA+0x116>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	2201      	movs	r2, #1
 80099a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80099aa:	e00b      	b.n	80099c4 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	2b08      	cmp	r3, #8
 80099b0:	d104      	bne.n	80099bc <HAL_TIMEx_PWMN_Stop_DMA+0x126>
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2201      	movs	r2, #1
 80099b6:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80099ba:	e003      	b.n	80099c4 <HAL_TIMEx_PWMN_Stop_DMA+0x12e>
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2201      	movs	r2, #1
 80099c0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
  }

  /* Return function status */
  return status;
 80099c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80099c6:	4618      	mov	r0, r3
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}
	...

080099d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80099d0:	b480      	push	{r7}
 80099d2:	b085      	sub	sp, #20
 80099d4:	af00      	add	r7, sp, #0
 80099d6:	6078      	str	r0, [r7, #4]
 80099d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80099e0:	2b01      	cmp	r3, #1
 80099e2:	d101      	bne.n	80099e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80099e4:	2302      	movs	r3, #2
 80099e6:	e068      	b.n	8009aba <HAL_TIMEx_MasterConfigSynchronization+0xea>
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	2201      	movs	r2, #1
 80099ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	2202      	movs	r2, #2
 80099f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	685b      	ldr	r3, [r3, #4]
 80099fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	681b      	ldr	r3, [r3, #0]
 8009a04:	689b      	ldr	r3, [r3, #8]
 8009a06:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	4a2e      	ldr	r2, [pc, #184]	@ (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a0e:	4293      	cmp	r3, r2
 8009a10:	d004      	beq.n	8009a1c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	4a2d      	ldr	r2, [pc, #180]	@ (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a18:	4293      	cmp	r3, r2
 8009a1a:	d108      	bne.n	8009a2e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 8009a22:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	685b      	ldr	r3, [r3, #4]
 8009a28:	68fa      	ldr	r2, [r7, #12]
 8009a2a:	4313      	orrs	r3, r2
 8009a2c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8009a34:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a36:	683b      	ldr	r3, [r7, #0]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	68fa      	ldr	r2, [r7, #12]
 8009a3c:	4313      	orrs	r3, r2
 8009a3e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	68fa      	ldr	r2, [r7, #12]
 8009a46:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a1e      	ldr	r2, [pc, #120]	@ (8009ac8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d01d      	beq.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009a5a:	d018      	beq.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a1b      	ldr	r2, [pc, #108]	@ (8009ad0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d013      	beq.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a1a      	ldr	r2, [pc, #104]	@ (8009ad4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d00e      	beq.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	4a18      	ldr	r2, [pc, #96]	@ (8009ad8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8009a76:	4293      	cmp	r3, r2
 8009a78:	d009      	beq.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a13      	ldr	r2, [pc, #76]	@ (8009acc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8009a80:	4293      	cmp	r3, r2
 8009a82:	d004      	beq.n	8009a8e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	4a14      	ldr	r2, [pc, #80]	@ (8009adc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d10c      	bne.n	8009aa8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009a8e:	68bb      	ldr	r3, [r7, #8]
 8009a90:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009a94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009a96:	683b      	ldr	r3, [r7, #0]
 8009a98:	689b      	ldr	r3, [r3, #8]
 8009a9a:	68ba      	ldr	r2, [r7, #8]
 8009a9c:	4313      	orrs	r3, r2
 8009a9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	68ba      	ldr	r2, [r7, #8]
 8009aa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	2201      	movs	r2, #1
 8009aac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	2200      	movs	r2, #0
 8009ab4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8009ab8:	2300      	movs	r3, #0
}
 8009aba:	4618      	mov	r0, r3
 8009abc:	3714      	adds	r7, #20
 8009abe:	46bd      	mov	sp, r7
 8009ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ac4:	4770      	bx	lr
 8009ac6:	bf00      	nop
 8009ac8:	40012c00 	.word	0x40012c00
 8009acc:	40013400 	.word	0x40013400
 8009ad0:	40000400 	.word	0x40000400
 8009ad4:	40000800 	.word	0x40000800
 8009ad8:	40000c00 	.word	0x40000c00
 8009adc:	40014000 	.word	0x40014000

08009ae0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009ae0:	b480      	push	{r7}
 8009ae2:	b083      	sub	sp, #12
 8009ae4:	af00      	add	r7, sp, #0
 8009ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009ae8:	bf00      	nop
 8009aea:	370c      	adds	r7, #12
 8009aec:	46bd      	mov	sp, r7
 8009aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af2:	4770      	bx	lr

08009af4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009af4:	b480      	push	{r7}
 8009af6:	b083      	sub	sp, #12
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009afc:	bf00      	nop
 8009afe:	370c      	adds	r7, #12
 8009b00:	46bd      	mov	sp, r7
 8009b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b06:	4770      	bx	lr

08009b08 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
 8009b0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009b10:	bf00      	nop
 8009b12:	370c      	adds	r7, #12
 8009b14:	46bd      	mov	sp, r7
 8009b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b1a:	4770      	bx	lr

08009b1c <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8009b1c:	b480      	push	{r7}
 8009b1e:	b087      	sub	sp, #28
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	60f8      	str	r0, [r7, #12]
 8009b24:	60b9      	str	r1, [r7, #8]
 8009b26:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0xFU); /* 0xFU = 15 bits max shift */
 8009b28:	68bb      	ldr	r3, [r7, #8]
 8009b2a:	f003 030f 	and.w	r3, r3, #15
 8009b2e:	2204      	movs	r2, #4
 8009b30:	fa02 f303 	lsl.w	r3, r2, r3
 8009b34:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	6a1a      	ldr	r2, [r3, #32]
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	43db      	mvns	r3, r3
 8009b3e:	401a      	ands	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0xFU)); /* 0xFU = 15 bits max shift */
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	6a1a      	ldr	r2, [r3, #32]
 8009b48:	68bb      	ldr	r3, [r7, #8]
 8009b4a:	f003 030f 	and.w	r3, r3, #15
 8009b4e:	6879      	ldr	r1, [r7, #4]
 8009b50:	fa01 f303 	lsl.w	r3, r1, r3
 8009b54:	431a      	orrs	r2, r3
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	621a      	str	r2, [r3, #32]
}
 8009b5a:	bf00      	nop
 8009b5c:	371c      	adds	r7, #28
 8009b5e:	46bd      	mov	sp, r7
 8009b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b64:	4770      	bx	lr

08009b66 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b66:	b580      	push	{r7, lr}
 8009b68:	b082      	sub	sp, #8
 8009b6a:	af00      	add	r7, sp, #0
 8009b6c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b6e:	687b      	ldr	r3, [r7, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d101      	bne.n	8009b78 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b74:	2301      	movs	r3, #1
 8009b76:	e040      	b.n	8009bfa <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d106      	bne.n	8009b8e <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b88:	6878      	ldr	r0, [r7, #4]
 8009b8a:	f7fa ff91 	bl	8004ab0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2224      	movs	r2, #36	@ 0x24
 8009b92:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	681b      	ldr	r3, [r3, #0]
 8009b98:	681a      	ldr	r2, [r3, #0]
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	f022 0201 	bic.w	r2, r2, #1
 8009ba2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d002      	beq.n	8009bb2 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fae1 	bl	800a174 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009bb2:	6878      	ldr	r0, [r7, #4]
 8009bb4:	f000 f826 	bl	8009c04 <UART_SetConfig>
 8009bb8:	4603      	mov	r3, r0
 8009bba:	2b01      	cmp	r3, #1
 8009bbc:	d101      	bne.n	8009bc2 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8009bbe:	2301      	movs	r3, #1
 8009bc0:	e01b      	b.n	8009bfa <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685a      	ldr	r2, [r3, #4]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8009bd0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689a      	ldr	r2, [r3, #8]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8009be0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	681a      	ldr	r2, [r3, #0]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f042 0201 	orr.w	r2, r2, #1
 8009bf0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009bf2:	6878      	ldr	r0, [r7, #4]
 8009bf4:	f000 fb60 	bl	800a2b8 <UART_CheckIdleState>
 8009bf8:	4603      	mov	r3, r0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}
	...

08009c04 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009c04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009c08:	b08a      	sub	sp, #40	@ 0x28
 8009c0a:	af00      	add	r7, sp, #0
 8009c0c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009c0e:	2300      	movs	r3, #0
 8009c10:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009c14:	68fb      	ldr	r3, [r7, #12]
 8009c16:	689a      	ldr	r2, [r3, #8]
 8009c18:	68fb      	ldr	r3, [r7, #12]
 8009c1a:	691b      	ldr	r3, [r3, #16]
 8009c1c:	431a      	orrs	r2, r3
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	695b      	ldr	r3, [r3, #20]
 8009c22:	431a      	orrs	r2, r3
 8009c24:	68fb      	ldr	r3, [r7, #12]
 8009c26:	69db      	ldr	r3, [r3, #28]
 8009c28:	4313      	orrs	r3, r2
 8009c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	681a      	ldr	r2, [r3, #0]
 8009c32:	4ba4      	ldr	r3, [pc, #656]	@ (8009ec4 <UART_SetConfig+0x2c0>)
 8009c34:	4013      	ands	r3, r2
 8009c36:	68fa      	ldr	r2, [r7, #12]
 8009c38:	6812      	ldr	r2, [r2, #0]
 8009c3a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c3c:	430b      	orrs	r3, r1
 8009c3e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	685b      	ldr	r3, [r3, #4]
 8009c46:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	68da      	ldr	r2, [r3, #12]
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	430a      	orrs	r2, r1
 8009c54:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	699b      	ldr	r3, [r3, #24]
 8009c5a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a99      	ldr	r2, [pc, #612]	@ (8009ec8 <UART_SetConfig+0x2c4>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d004      	beq.n	8009c70 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	6a1b      	ldr	r3, [r3, #32]
 8009c6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c6c:	4313      	orrs	r3, r2
 8009c6e:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	689b      	ldr	r3, [r3, #8]
 8009c76:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009c80:	430a      	orrs	r2, r1
 8009c82:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a90      	ldr	r2, [pc, #576]	@ (8009ecc <UART_SetConfig+0x2c8>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d126      	bne.n	8009cdc <UART_SetConfig+0xd8>
 8009c8e:	4b90      	ldr	r3, [pc, #576]	@ (8009ed0 <UART_SetConfig+0x2cc>)
 8009c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009c94:	f003 0303 	and.w	r3, r3, #3
 8009c98:	2b03      	cmp	r3, #3
 8009c9a:	d81b      	bhi.n	8009cd4 <UART_SetConfig+0xd0>
 8009c9c:	a201      	add	r2, pc, #4	@ (adr r2, 8009ca4 <UART_SetConfig+0xa0>)
 8009c9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ca2:	bf00      	nop
 8009ca4:	08009cb5 	.word	0x08009cb5
 8009ca8:	08009cc5 	.word	0x08009cc5
 8009cac:	08009cbd 	.word	0x08009cbd
 8009cb0:	08009ccd 	.word	0x08009ccd
 8009cb4:	2301      	movs	r3, #1
 8009cb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cba:	e116      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009cbc:	2302      	movs	r3, #2
 8009cbe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cc2:	e112      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009cc4:	2304      	movs	r3, #4
 8009cc6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cca:	e10e      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009ccc:	2308      	movs	r3, #8
 8009cce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cd2:	e10a      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009cd4:	2310      	movs	r3, #16
 8009cd6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009cda:	e106      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	4a7c      	ldr	r2, [pc, #496]	@ (8009ed4 <UART_SetConfig+0x2d0>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d138      	bne.n	8009d58 <UART_SetConfig+0x154>
 8009ce6:	4b7a      	ldr	r3, [pc, #488]	@ (8009ed0 <UART_SetConfig+0x2cc>)
 8009ce8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009cec:	f003 030c 	and.w	r3, r3, #12
 8009cf0:	2b0c      	cmp	r3, #12
 8009cf2:	d82d      	bhi.n	8009d50 <UART_SetConfig+0x14c>
 8009cf4:	a201      	add	r2, pc, #4	@ (adr r2, 8009cfc <UART_SetConfig+0xf8>)
 8009cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cfa:	bf00      	nop
 8009cfc:	08009d31 	.word	0x08009d31
 8009d00:	08009d51 	.word	0x08009d51
 8009d04:	08009d51 	.word	0x08009d51
 8009d08:	08009d51 	.word	0x08009d51
 8009d0c:	08009d41 	.word	0x08009d41
 8009d10:	08009d51 	.word	0x08009d51
 8009d14:	08009d51 	.word	0x08009d51
 8009d18:	08009d51 	.word	0x08009d51
 8009d1c:	08009d39 	.word	0x08009d39
 8009d20:	08009d51 	.word	0x08009d51
 8009d24:	08009d51 	.word	0x08009d51
 8009d28:	08009d51 	.word	0x08009d51
 8009d2c:	08009d49 	.word	0x08009d49
 8009d30:	2300      	movs	r3, #0
 8009d32:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d36:	e0d8      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d38:	2302      	movs	r3, #2
 8009d3a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d3e:	e0d4      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d40:	2304      	movs	r3, #4
 8009d42:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d46:	e0d0      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d48:	2308      	movs	r3, #8
 8009d4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d4e:	e0cc      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d50:	2310      	movs	r3, #16
 8009d52:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d56:	e0c8      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	4a5e      	ldr	r2, [pc, #376]	@ (8009ed8 <UART_SetConfig+0x2d4>)
 8009d5e:	4293      	cmp	r3, r2
 8009d60:	d125      	bne.n	8009dae <UART_SetConfig+0x1aa>
 8009d62:	4b5b      	ldr	r3, [pc, #364]	@ (8009ed0 <UART_SetConfig+0x2cc>)
 8009d64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009d68:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8009d6c:	2b30      	cmp	r3, #48	@ 0x30
 8009d6e:	d016      	beq.n	8009d9e <UART_SetConfig+0x19a>
 8009d70:	2b30      	cmp	r3, #48	@ 0x30
 8009d72:	d818      	bhi.n	8009da6 <UART_SetConfig+0x1a2>
 8009d74:	2b20      	cmp	r3, #32
 8009d76:	d00a      	beq.n	8009d8e <UART_SetConfig+0x18a>
 8009d78:	2b20      	cmp	r3, #32
 8009d7a:	d814      	bhi.n	8009da6 <UART_SetConfig+0x1a2>
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d002      	beq.n	8009d86 <UART_SetConfig+0x182>
 8009d80:	2b10      	cmp	r3, #16
 8009d82:	d008      	beq.n	8009d96 <UART_SetConfig+0x192>
 8009d84:	e00f      	b.n	8009da6 <UART_SetConfig+0x1a2>
 8009d86:	2300      	movs	r3, #0
 8009d88:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d8c:	e0ad      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d8e:	2302      	movs	r3, #2
 8009d90:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d94:	e0a9      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d96:	2304      	movs	r3, #4
 8009d98:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009d9c:	e0a5      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009d9e:	2308      	movs	r3, #8
 8009da0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009da4:	e0a1      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009da6:	2310      	movs	r3, #16
 8009da8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dac:	e09d      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	681b      	ldr	r3, [r3, #0]
 8009db2:	4a4a      	ldr	r2, [pc, #296]	@ (8009edc <UART_SetConfig+0x2d8>)
 8009db4:	4293      	cmp	r3, r2
 8009db6:	d125      	bne.n	8009e04 <UART_SetConfig+0x200>
 8009db8:	4b45      	ldr	r3, [pc, #276]	@ (8009ed0 <UART_SetConfig+0x2cc>)
 8009dba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009dbe:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8009dc2:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dc4:	d016      	beq.n	8009df4 <UART_SetConfig+0x1f0>
 8009dc6:	2bc0      	cmp	r3, #192	@ 0xc0
 8009dc8:	d818      	bhi.n	8009dfc <UART_SetConfig+0x1f8>
 8009dca:	2b80      	cmp	r3, #128	@ 0x80
 8009dcc:	d00a      	beq.n	8009de4 <UART_SetConfig+0x1e0>
 8009dce:	2b80      	cmp	r3, #128	@ 0x80
 8009dd0:	d814      	bhi.n	8009dfc <UART_SetConfig+0x1f8>
 8009dd2:	2b00      	cmp	r3, #0
 8009dd4:	d002      	beq.n	8009ddc <UART_SetConfig+0x1d8>
 8009dd6:	2b40      	cmp	r3, #64	@ 0x40
 8009dd8:	d008      	beq.n	8009dec <UART_SetConfig+0x1e8>
 8009dda:	e00f      	b.n	8009dfc <UART_SetConfig+0x1f8>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009de2:	e082      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009de4:	2302      	movs	r3, #2
 8009de6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dea:	e07e      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009dec:	2304      	movs	r3, #4
 8009dee:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009df2:	e07a      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009df4:	2308      	movs	r3, #8
 8009df6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009dfa:	e076      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009dfc:	2310      	movs	r3, #16
 8009dfe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e02:	e072      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009e04:	68fb      	ldr	r3, [r7, #12]
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	4a35      	ldr	r2, [pc, #212]	@ (8009ee0 <UART_SetConfig+0x2dc>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d12a      	bne.n	8009e64 <UART_SetConfig+0x260>
 8009e0e:	4b30      	ldr	r3, [pc, #192]	@ (8009ed0 <UART_SetConfig+0x2cc>)
 8009e10:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e14:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009e18:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e1c:	d01a      	beq.n	8009e54 <UART_SetConfig+0x250>
 8009e1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009e22:	d81b      	bhi.n	8009e5c <UART_SetConfig+0x258>
 8009e24:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e28:	d00c      	beq.n	8009e44 <UART_SetConfig+0x240>
 8009e2a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009e2e:	d815      	bhi.n	8009e5c <UART_SetConfig+0x258>
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d003      	beq.n	8009e3c <UART_SetConfig+0x238>
 8009e34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009e38:	d008      	beq.n	8009e4c <UART_SetConfig+0x248>
 8009e3a:	e00f      	b.n	8009e5c <UART_SetConfig+0x258>
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e42:	e052      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009e44:	2302      	movs	r3, #2
 8009e46:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e4a:	e04e      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009e4c:	2304      	movs	r3, #4
 8009e4e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e52:	e04a      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009e54:	2308      	movs	r3, #8
 8009e56:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e5a:	e046      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009e5c:	2310      	movs	r3, #16
 8009e5e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009e62:	e042      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	4a17      	ldr	r2, [pc, #92]	@ (8009ec8 <UART_SetConfig+0x2c4>)
 8009e6a:	4293      	cmp	r3, r2
 8009e6c:	d13a      	bne.n	8009ee4 <UART_SetConfig+0x2e0>
 8009e6e:	4b18      	ldr	r3, [pc, #96]	@ (8009ed0 <UART_SetConfig+0x2cc>)
 8009e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8009e74:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8009e78:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e7c:	d01a      	beq.n	8009eb4 <UART_SetConfig+0x2b0>
 8009e7e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8009e82:	d81b      	bhi.n	8009ebc <UART_SetConfig+0x2b8>
 8009e84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e88:	d00c      	beq.n	8009ea4 <UART_SetConfig+0x2a0>
 8009e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8009e8e:	d815      	bhi.n	8009ebc <UART_SetConfig+0x2b8>
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	d003      	beq.n	8009e9c <UART_SetConfig+0x298>
 8009e94:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009e98:	d008      	beq.n	8009eac <UART_SetConfig+0x2a8>
 8009e9a:	e00f      	b.n	8009ebc <UART_SetConfig+0x2b8>
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ea2:	e022      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009ea4:	2302      	movs	r3, #2
 8009ea6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eaa:	e01e      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009eac:	2304      	movs	r3, #4
 8009eae:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eb2:	e01a      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009eb4:	2308      	movs	r3, #8
 8009eb6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009eba:	e016      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009ebc:	2310      	movs	r3, #16
 8009ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8009ec2:	e012      	b.n	8009eea <UART_SetConfig+0x2e6>
 8009ec4:	efff69f3 	.word	0xefff69f3
 8009ec8:	40008000 	.word	0x40008000
 8009ecc:	40013800 	.word	0x40013800
 8009ed0:	40021000 	.word	0x40021000
 8009ed4:	40004400 	.word	0x40004400
 8009ed8:	40004800 	.word	0x40004800
 8009edc:	40004c00 	.word	0x40004c00
 8009ee0:	40005000 	.word	0x40005000
 8009ee4:	2310      	movs	r3, #16
 8009ee6:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a9f      	ldr	r2, [pc, #636]	@ (800a16c <UART_SetConfig+0x568>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d17a      	bne.n	8009fea <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8009ef4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ef8:	2b08      	cmp	r3, #8
 8009efa:	d824      	bhi.n	8009f46 <UART_SetConfig+0x342>
 8009efc:	a201      	add	r2, pc, #4	@ (adr r2, 8009f04 <UART_SetConfig+0x300>)
 8009efe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f02:	bf00      	nop
 8009f04:	08009f29 	.word	0x08009f29
 8009f08:	08009f47 	.word	0x08009f47
 8009f0c:	08009f31 	.word	0x08009f31
 8009f10:	08009f47 	.word	0x08009f47
 8009f14:	08009f37 	.word	0x08009f37
 8009f18:	08009f47 	.word	0x08009f47
 8009f1c:	08009f47 	.word	0x08009f47
 8009f20:	08009f47 	.word	0x08009f47
 8009f24:	08009f3f 	.word	0x08009f3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009f28:	f7fd fa18 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 8009f2c:	61f8      	str	r0, [r7, #28]
        break;
 8009f2e:	e010      	b.n	8009f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009f30:	4b8f      	ldr	r3, [pc, #572]	@ (800a170 <UART_SetConfig+0x56c>)
 8009f32:	61fb      	str	r3, [r7, #28]
        break;
 8009f34:	e00d      	b.n	8009f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009f36:	f7fd f979 	bl	800722c <HAL_RCC_GetSysClockFreq>
 8009f3a:	61f8      	str	r0, [r7, #28]
        break;
 8009f3c:	e009      	b.n	8009f52 <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009f3e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f42:	61fb      	str	r3, [r7, #28]
        break;
 8009f44:	e005      	b.n	8009f52 <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8009f46:	2300      	movs	r3, #0
 8009f48:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8009f50:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	f000 80fb 	beq.w	800a150 <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	685a      	ldr	r2, [r3, #4]
 8009f5e:	4613      	mov	r3, r2
 8009f60:	005b      	lsls	r3, r3, #1
 8009f62:	4413      	add	r3, r2
 8009f64:	69fa      	ldr	r2, [r7, #28]
 8009f66:	429a      	cmp	r2, r3
 8009f68:	d305      	bcc.n	8009f76 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009f6a:	68fb      	ldr	r3, [r7, #12]
 8009f6c:	685b      	ldr	r3, [r3, #4]
 8009f6e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009f70:	69fa      	ldr	r2, [r7, #28]
 8009f72:	429a      	cmp	r2, r3
 8009f74:	d903      	bls.n	8009f7e <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8009f76:	2301      	movs	r3, #1
 8009f78:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009f7c:	e0e8      	b.n	800a150 <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	2200      	movs	r2, #0
 8009f82:	461c      	mov	r4, r3
 8009f84:	4615      	mov	r5, r2
 8009f86:	f04f 0200 	mov.w	r2, #0
 8009f8a:	f04f 0300 	mov.w	r3, #0
 8009f8e:	022b      	lsls	r3, r5, #8
 8009f90:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8009f94:	0222      	lsls	r2, r4, #8
 8009f96:	68f9      	ldr	r1, [r7, #12]
 8009f98:	6849      	ldr	r1, [r1, #4]
 8009f9a:	0849      	lsrs	r1, r1, #1
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	4688      	mov	r8, r1
 8009fa0:	4681      	mov	r9, r0
 8009fa2:	eb12 0a08 	adds.w	sl, r2, r8
 8009fa6:	eb43 0b09 	adc.w	fp, r3, r9
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	685b      	ldr	r3, [r3, #4]
 8009fae:	2200      	movs	r2, #0
 8009fb0:	603b      	str	r3, [r7, #0]
 8009fb2:	607a      	str	r2, [r7, #4]
 8009fb4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fb8:	4650      	mov	r0, sl
 8009fba:	4659      	mov	r1, fp
 8009fbc:	f7f6 fe64 	bl	8000c88 <__aeabi_uldivmod>
 8009fc0:	4602      	mov	r2, r0
 8009fc2:	460b      	mov	r3, r1
 8009fc4:	4613      	mov	r3, r2
 8009fc6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8009fc8:	69bb      	ldr	r3, [r7, #24]
 8009fca:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8009fce:	d308      	bcc.n	8009fe2 <UART_SetConfig+0x3de>
 8009fd0:	69bb      	ldr	r3, [r7, #24]
 8009fd2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009fd6:	d204      	bcs.n	8009fe2 <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	69ba      	ldr	r2, [r7, #24]
 8009fde:	60da      	str	r2, [r3, #12]
 8009fe0:	e0b6      	b.n	800a150 <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 8009fe2:	2301      	movs	r3, #1
 8009fe4:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8009fe8:	e0b2      	b.n	800a150 <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	69db      	ldr	r3, [r3, #28]
 8009fee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8009ff2:	d15e      	bne.n	800a0b2 <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8009ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8009ff8:	2b08      	cmp	r3, #8
 8009ffa:	d828      	bhi.n	800a04e <UART_SetConfig+0x44a>
 8009ffc:	a201      	add	r2, pc, #4	@ (adr r2, 800a004 <UART_SetConfig+0x400>)
 8009ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a002:	bf00      	nop
 800a004:	0800a029 	.word	0x0800a029
 800a008:	0800a031 	.word	0x0800a031
 800a00c:	0800a039 	.word	0x0800a039
 800a010:	0800a04f 	.word	0x0800a04f
 800a014:	0800a03f 	.word	0x0800a03f
 800a018:	0800a04f 	.word	0x0800a04f
 800a01c:	0800a04f 	.word	0x0800a04f
 800a020:	0800a04f 	.word	0x0800a04f
 800a024:	0800a047 	.word	0x0800a047
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a028:	f7fd f998 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 800a02c:	61f8      	str	r0, [r7, #28]
        break;
 800a02e:	e014      	b.n	800a05a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a030:	f7fd f9aa 	bl	8007388 <HAL_RCC_GetPCLK2Freq>
 800a034:	61f8      	str	r0, [r7, #28]
        break;
 800a036:	e010      	b.n	800a05a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a038:	4b4d      	ldr	r3, [pc, #308]	@ (800a170 <UART_SetConfig+0x56c>)
 800a03a:	61fb      	str	r3, [r7, #28]
        break;
 800a03c:	e00d      	b.n	800a05a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a03e:	f7fd f8f5 	bl	800722c <HAL_RCC_GetSysClockFreq>
 800a042:	61f8      	str	r0, [r7, #28]
        break;
 800a044:	e009      	b.n	800a05a <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a046:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a04a:	61fb      	str	r3, [r7, #28]
        break;
 800a04c:	e005      	b.n	800a05a <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800a04e:	2300      	movs	r3, #0
 800a050:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a052:	2301      	movs	r3, #1
 800a054:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a058:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a05a:	69fb      	ldr	r3, [r7, #28]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d077      	beq.n	800a150 <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	005a      	lsls	r2, r3, #1
 800a064:	68fb      	ldr	r3, [r7, #12]
 800a066:	685b      	ldr	r3, [r3, #4]
 800a068:	085b      	lsrs	r3, r3, #1
 800a06a:	441a      	add	r2, r3
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	685b      	ldr	r3, [r3, #4]
 800a070:	fbb2 f3f3 	udiv	r3, r2, r3
 800a074:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	2b0f      	cmp	r3, #15
 800a07a:	d916      	bls.n	800a0aa <UART_SetConfig+0x4a6>
 800a07c:	69bb      	ldr	r3, [r7, #24]
 800a07e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a082:	d212      	bcs.n	800a0aa <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a084:	69bb      	ldr	r3, [r7, #24]
 800a086:	b29b      	uxth	r3, r3
 800a088:	f023 030f 	bic.w	r3, r3, #15
 800a08c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a08e:	69bb      	ldr	r3, [r7, #24]
 800a090:	085b      	lsrs	r3, r3, #1
 800a092:	b29b      	uxth	r3, r3
 800a094:	f003 0307 	and.w	r3, r3, #7
 800a098:	b29a      	uxth	r2, r3
 800a09a:	8afb      	ldrh	r3, [r7, #22]
 800a09c:	4313      	orrs	r3, r2
 800a09e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	8afa      	ldrh	r2, [r7, #22]
 800a0a6:	60da      	str	r2, [r3, #12]
 800a0a8:	e052      	b.n	800a150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 800a0b0:	e04e      	b.n	800a150 <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a0b2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800a0b6:	2b08      	cmp	r3, #8
 800a0b8:	d827      	bhi.n	800a10a <UART_SetConfig+0x506>
 800a0ba:	a201      	add	r2, pc, #4	@ (adr r2, 800a0c0 <UART_SetConfig+0x4bc>)
 800a0bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0c0:	0800a0e5 	.word	0x0800a0e5
 800a0c4:	0800a0ed 	.word	0x0800a0ed
 800a0c8:	0800a0f5 	.word	0x0800a0f5
 800a0cc:	0800a10b 	.word	0x0800a10b
 800a0d0:	0800a0fb 	.word	0x0800a0fb
 800a0d4:	0800a10b 	.word	0x0800a10b
 800a0d8:	0800a10b 	.word	0x0800a10b
 800a0dc:	0800a10b 	.word	0x0800a10b
 800a0e0:	0800a103 	.word	0x0800a103
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a0e4:	f7fd f93a 	bl	800735c <HAL_RCC_GetPCLK1Freq>
 800a0e8:	61f8      	str	r0, [r7, #28]
        break;
 800a0ea:	e014      	b.n	800a116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a0ec:	f7fd f94c 	bl	8007388 <HAL_RCC_GetPCLK2Freq>
 800a0f0:	61f8      	str	r0, [r7, #28]
        break;
 800a0f2:	e010      	b.n	800a116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a0f4:	4b1e      	ldr	r3, [pc, #120]	@ (800a170 <UART_SetConfig+0x56c>)
 800a0f6:	61fb      	str	r3, [r7, #28]
        break;
 800a0f8:	e00d      	b.n	800a116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a0fa:	f7fd f897 	bl	800722c <HAL_RCC_GetSysClockFreq>
 800a0fe:	61f8      	str	r0, [r7, #28]
        break;
 800a100:	e009      	b.n	800a116 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a102:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800a106:	61fb      	str	r3, [r7, #28]
        break;
 800a108:	e005      	b.n	800a116 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a10e:	2301      	movs	r3, #1
 800a110:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800a114:	bf00      	nop
    }

    if (pclk != 0U)
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	2b00      	cmp	r3, #0
 800a11a:	d019      	beq.n	800a150 <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	685b      	ldr	r3, [r3, #4]
 800a120:	085a      	lsrs	r2, r3, #1
 800a122:	69fb      	ldr	r3, [r7, #28]
 800a124:	441a      	add	r2, r3
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	685b      	ldr	r3, [r3, #4]
 800a12a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a12e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a130:	69bb      	ldr	r3, [r7, #24]
 800a132:	2b0f      	cmp	r3, #15
 800a134:	d909      	bls.n	800a14a <UART_SetConfig+0x546>
 800a136:	69bb      	ldr	r3, [r7, #24]
 800a138:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a13c:	d205      	bcs.n	800a14a <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a13e:	69bb      	ldr	r3, [r7, #24]
 800a140:	b29a      	uxth	r2, r3
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	60da      	str	r2, [r3, #12]
 800a148:	e002      	b.n	800a150 <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 800a14a:	2301      	movs	r3, #1
 800a14c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	2200      	movs	r2, #0
 800a154:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800a156:	68fb      	ldr	r3, [r7, #12]
 800a158:	2200      	movs	r2, #0
 800a15a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800a15c:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800a160:	4618      	mov	r0, r3
 800a162:	3728      	adds	r7, #40	@ 0x28
 800a164:	46bd      	mov	sp, r7
 800a166:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a16a:	bf00      	nop
 800a16c:	40008000 	.word	0x40008000
 800a170:	00f42400 	.word	0x00f42400

0800a174 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a174:	b480      	push	{r7}
 800a176:	b083      	sub	sp, #12
 800a178:	af00      	add	r7, sp, #0
 800a17a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a180:	f003 0308 	and.w	r3, r3, #8
 800a184:	2b00      	cmp	r3, #0
 800a186:	d00a      	beq.n	800a19e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	430a      	orrs	r2, r1
 800a19c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1a2:	f003 0301 	and.w	r3, r3, #1
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d00a      	beq.n	800a1c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	685b      	ldr	r3, [r3, #4]
 800a1b0:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	430a      	orrs	r2, r1
 800a1be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1c4:	f003 0302 	and.w	r3, r3, #2
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d00a      	beq.n	800a1e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	685b      	ldr	r3, [r3, #4]
 800a1d2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a1da:	687b      	ldr	r3, [r7, #4]
 800a1dc:	681b      	ldr	r3, [r3, #0]
 800a1de:	430a      	orrs	r2, r1
 800a1e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a1e6:	f003 0304 	and.w	r3, r3, #4
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d00a      	beq.n	800a204 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	685b      	ldr	r3, [r3, #4]
 800a1f4:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a1fc:	687b      	ldr	r3, [r7, #4]
 800a1fe:	681b      	ldr	r3, [r3, #0]
 800a200:	430a      	orrs	r2, r1
 800a202:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a208:	f003 0310 	and.w	r3, r3, #16
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d00a      	beq.n	800a226 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	681b      	ldr	r3, [r3, #0]
 800a214:	689b      	ldr	r3, [r3, #8]
 800a216:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800a21a:	687b      	ldr	r3, [r7, #4]
 800a21c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	430a      	orrs	r2, r1
 800a224:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a22a:	f003 0320 	and.w	r3, r3, #32
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d00a      	beq.n	800a248 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	689b      	ldr	r3, [r3, #8]
 800a238:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	681b      	ldr	r3, [r3, #0]
 800a244:	430a      	orrs	r2, r1
 800a246:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a24c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a250:	2b00      	cmp	r3, #0
 800a252:	d01a      	beq.n	800a28a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	685b      	ldr	r3, [r3, #4]
 800a25a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800a262:	687b      	ldr	r3, [r7, #4]
 800a264:	681b      	ldr	r3, [r3, #0]
 800a266:	430a      	orrs	r2, r1
 800a268:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a26e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a272:	d10a      	bne.n	800a28a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	685b      	ldr	r3, [r3, #4]
 800a27a:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800a27e:	687b      	ldr	r3, [r7, #4]
 800a280:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	430a      	orrs	r2, r1
 800a288:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a28e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a292:	2b00      	cmp	r3, #0
 800a294:	d00a      	beq.n	800a2ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	685b      	ldr	r3, [r3, #4]
 800a29c:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 800a2a0:	687b      	ldr	r3, [r7, #4]
 800a2a2:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800a2a4:	687b      	ldr	r3, [r7, #4]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	430a      	orrs	r2, r1
 800a2aa:	605a      	str	r2, [r3, #4]
  }
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b098      	sub	sp, #96	@ 0x60
 800a2bc:	af02      	add	r7, sp, #8
 800a2be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800a2c8:	f7fa fce8 	bl	8004c9c <HAL_GetTick>
 800a2cc:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0308 	and.w	r3, r3, #8
 800a2d8:	2b08      	cmp	r3, #8
 800a2da:	d12e      	bne.n	800a33a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a2dc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a2e0:	9300      	str	r3, [sp, #0]
 800a2e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a2e4:	2200      	movs	r2, #0
 800a2e6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800a2ea:	6878      	ldr	r0, [r7, #4]
 800a2ec:	f000 f88c 	bl	800a408 <UART_WaitOnFlagUntilTimeout>
 800a2f0:	4603      	mov	r3, r0
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d021      	beq.n	800a33a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800a2f6:	687b      	ldr	r3, [r7, #4]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a2fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a2fe:	e853 3f00 	ldrex	r3, [r3]
 800a302:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800a304:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a306:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a30a:	653b      	str	r3, [r7, #80]	@ 0x50
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	461a      	mov	r2, r3
 800a312:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800a314:	647b      	str	r3, [r7, #68]	@ 0x44
 800a316:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a318:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800a31a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800a31c:	e841 2300 	strex	r3, r2, [r1]
 800a320:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800a322:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a324:	2b00      	cmp	r3, #0
 800a326:	d1e6      	bne.n	800a2f6 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800a328:	687b      	ldr	r3, [r7, #4]
 800a32a:	2220      	movs	r2, #32
 800a32c:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	2200      	movs	r2, #0
 800a332:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a336:	2303      	movs	r3, #3
 800a338:	e062      	b.n	800a400 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	f003 0304 	and.w	r3, r3, #4
 800a344:	2b04      	cmp	r3, #4
 800a346:	d149      	bne.n	800a3dc <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a348:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800a34c:	9300      	str	r3, [sp, #0]
 800a34e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800a350:	2200      	movs	r2, #0
 800a352:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	f000 f856 	bl	800a408 <UART_WaitOnFlagUntilTimeout>
 800a35c:	4603      	mov	r3, r0
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d03c      	beq.n	800a3dc <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a36a:	e853 3f00 	ldrex	r3, [r3]
 800a36e:	623b      	str	r3, [r7, #32]
   return(result);
 800a370:	6a3b      	ldr	r3, [r7, #32]
 800a372:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a376:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	461a      	mov	r2, r3
 800a37e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a380:	633b      	str	r3, [r7, #48]	@ 0x30
 800a382:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a384:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800a386:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800a388:	e841 2300 	strex	r3, r2, [r1]
 800a38c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800a38e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a390:	2b00      	cmp	r3, #0
 800a392:	d1e6      	bne.n	800a362 <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	3308      	adds	r3, #8
 800a39a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	e853 3f00 	ldrex	r3, [r3]
 800a3a2:	60fb      	str	r3, [r7, #12]
   return(result);
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	f023 0301 	bic.w	r3, r3, #1
 800a3aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	3308      	adds	r3, #8
 800a3b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a3b4:	61fa      	str	r2, [r7, #28]
 800a3b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a3b8:	69b9      	ldr	r1, [r7, #24]
 800a3ba:	69fa      	ldr	r2, [r7, #28]
 800a3bc:	e841 2300 	strex	r3, r2, [r1]
 800a3c0:	617b      	str	r3, [r7, #20]
   return(result);
 800a3c2:	697b      	ldr	r3, [r7, #20]
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d1e5      	bne.n	800a394 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	2220      	movs	r2, #32
 800a3cc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a3d8:	2303      	movs	r3, #3
 800a3da:	e011      	b.n	800a400 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a3dc:	687b      	ldr	r3, [r7, #4]
 800a3de:	2220      	movs	r2, #32
 800a3e0:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	2220      	movs	r2, #32
 800a3e6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	2200      	movs	r2, #0
 800a3ee:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	2200      	movs	r2, #0
 800a3f4:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	2200      	movs	r2, #0
 800a3fa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 800a3fe:	2300      	movs	r3, #0
}
 800a400:	4618      	mov	r0, r3
 800a402:	3758      	adds	r7, #88	@ 0x58
 800a404:	46bd      	mov	sp, r7
 800a406:	bd80      	pop	{r7, pc}

0800a408 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a408:	b580      	push	{r7, lr}
 800a40a:	b084      	sub	sp, #16
 800a40c:	af00      	add	r7, sp, #0
 800a40e:	60f8      	str	r0, [r7, #12]
 800a410:	60b9      	str	r1, [r7, #8]
 800a412:	603b      	str	r3, [r7, #0]
 800a414:	4613      	mov	r3, r2
 800a416:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a418:	e04f      	b.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a41a:	69bb      	ldr	r3, [r7, #24]
 800a41c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a420:	d04b      	beq.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a422:	f7fa fc3b 	bl	8004c9c <HAL_GetTick>
 800a426:	4602      	mov	r2, r0
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	1ad3      	subs	r3, r2, r3
 800a42c:	69ba      	ldr	r2, [r7, #24]
 800a42e:	429a      	cmp	r2, r3
 800a430:	d302      	bcc.n	800a438 <UART_WaitOnFlagUntilTimeout+0x30>
 800a432:	69bb      	ldr	r3, [r7, #24]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d101      	bne.n	800a43c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800a438:	2303      	movs	r3, #3
 800a43a:	e04e      	b.n	800a4da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	f003 0304 	and.w	r3, r3, #4
 800a446:	2b00      	cmp	r3, #0
 800a448:	d037      	beq.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800a44a:	68bb      	ldr	r3, [r7, #8]
 800a44c:	2b80      	cmp	r3, #128	@ 0x80
 800a44e:	d034      	beq.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xb2>
 800a450:	68bb      	ldr	r3, [r7, #8]
 800a452:	2b40      	cmp	r3, #64	@ 0x40
 800a454:	d031      	beq.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	69db      	ldr	r3, [r3, #28]
 800a45c:	f003 0308 	and.w	r3, r3, #8
 800a460:	2b08      	cmp	r3, #8
 800a462:	d110      	bne.n	800a486 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	2208      	movs	r2, #8
 800a46a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a46c:	68f8      	ldr	r0, [r7, #12]
 800a46e:	f000 f838 	bl	800a4e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2208      	movs	r2, #8
 800a476:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	2200      	movs	r2, #0
 800a47e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800a482:	2301      	movs	r3, #1
 800a484:	e029      	b.n	800a4da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	681b      	ldr	r3, [r3, #0]
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800a490:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800a494:	d111      	bne.n	800a4ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a49e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800a4a0:	68f8      	ldr	r0, [r7, #12]
 800a4a2:	f000 f81e 	bl	800a4e2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2220      	movs	r2, #32
 800a4aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800a4b6:	2303      	movs	r3, #3
 800a4b8:	e00f      	b.n	800a4da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	69da      	ldr	r2, [r3, #28]
 800a4c0:	68bb      	ldr	r3, [r7, #8]
 800a4c2:	4013      	ands	r3, r2
 800a4c4:	68ba      	ldr	r2, [r7, #8]
 800a4c6:	429a      	cmp	r2, r3
 800a4c8:	bf0c      	ite	eq
 800a4ca:	2301      	moveq	r3, #1
 800a4cc:	2300      	movne	r3, #0
 800a4ce:	b2db      	uxtb	r3, r3
 800a4d0:	461a      	mov	r2, r3
 800a4d2:	79fb      	ldrb	r3, [r7, #7]
 800a4d4:	429a      	cmp	r2, r3
 800a4d6:	d0a0      	beq.n	800a41a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a4d8:	2300      	movs	r3, #0
}
 800a4da:	4618      	mov	r0, r3
 800a4dc:	3710      	adds	r7, #16
 800a4de:	46bd      	mov	sp, r7
 800a4e0:	bd80      	pop	{r7, pc}

0800a4e2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a4e2:	b480      	push	{r7}
 800a4e4:	b095      	sub	sp, #84	@ 0x54
 800a4e6:	af00      	add	r7, sp, #0
 800a4e8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4f0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a4f2:	e853 3f00 	ldrex	r3, [r3]
 800a4f6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800a4f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4fa:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800a4fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	461a      	mov	r2, r3
 800a506:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800a508:	643b      	str	r3, [r7, #64]	@ 0x40
 800a50a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a50c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800a50e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800a510:	e841 2300 	strex	r3, r2, [r1]
 800a514:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800a516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d1e6      	bne.n	800a4ea <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	3308      	adds	r3, #8
 800a522:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a524:	6a3b      	ldr	r3, [r7, #32]
 800a526:	e853 3f00 	ldrex	r3, [r3]
 800a52a:	61fb      	str	r3, [r7, #28]
   return(result);
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	f023 0301 	bic.w	r3, r3, #1
 800a532:	64bb      	str	r3, [r7, #72]	@ 0x48
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3308      	adds	r3, #8
 800a53a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800a53c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800a53e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a540:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a544:	e841 2300 	strex	r3, r2, [r1]
 800a548:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800a54a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d1e5      	bne.n	800a51c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a554:	2b01      	cmp	r3, #1
 800a556:	d118      	bne.n	800a58a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a55e:	68fb      	ldr	r3, [r7, #12]
 800a560:	e853 3f00 	ldrex	r3, [r3]
 800a564:	60bb      	str	r3, [r7, #8]
   return(result);
 800a566:	68bb      	ldr	r3, [r7, #8]
 800a568:	f023 0310 	bic.w	r3, r3, #16
 800a56c:	647b      	str	r3, [r7, #68]	@ 0x44
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	681b      	ldr	r3, [r3, #0]
 800a572:	461a      	mov	r2, r3
 800a574:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800a576:	61bb      	str	r3, [r7, #24]
 800a578:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a57a:	6979      	ldr	r1, [r7, #20]
 800a57c:	69ba      	ldr	r2, [r7, #24]
 800a57e:	e841 2300 	strex	r3, r2, [r1]
 800a582:	613b      	str	r3, [r7, #16]
   return(result);
 800a584:	693b      	ldr	r3, [r7, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d1e6      	bne.n	800a558 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	2220      	movs	r2, #32
 800a58e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	2200      	movs	r2, #0
 800a596:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	2200      	movs	r2, #0
 800a59c:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a59e:	bf00      	nop
 800a5a0:	3754      	adds	r7, #84	@ 0x54
 800a5a2:	46bd      	mov	sp, r7
 800a5a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5a8:	4770      	bx	lr

0800a5aa <_ZdaPv>:
 800a5aa:	f000 ba80 	b.w	800aaae <_ZdlPv>

0800a5ae <_Znaj>:
 800a5ae:	f000 ba80 	b.w	800aab2 <_Znwj>

0800a5b2 <_ZNSaIcEC1Ev>:
 800a5b2:	4770      	bx	lr

0800a5b4 <_ZNSaIcEC1ERKS_>:
 800a5b4:	4770      	bx	lr

0800a5b6 <_ZNSaIcED1Ev>:
 800a5b6:	4770      	bx	lr

0800a5b8 <_ZSt17__throw_bad_allocv>:
 800a5b8:	b508      	push	{r3, lr}
 800a5ba:	f000 fad9 	bl	800ab70 <abort>

0800a5be <_ZSt19__throw_logic_errorPKc>:
 800a5be:	b508      	push	{r3, lr}
 800a5c0:	f000 fad6 	bl	800ab70 <abort>

0800a5c4 <_ZSt20__throw_length_errorPKc>:
 800a5c4:	b508      	push	{r3, lr}
 800a5c6:	f000 fad3 	bl	800ab70 <abort>

0800a5ca <_ZSt24__throw_out_of_range_fmtPKcz>:
 800a5ca:	b40f      	push	{r0, r1, r2, r3}
 800a5cc:	b508      	push	{r3, lr}
 800a5ce:	f000 facf 	bl	800ab70 <abort>

0800a5d2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 800a5d2:	b10a      	cbz	r2, 800a5d8 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 800a5d4:	f001 ba05 	b.w	800b9e2 <memcpy>
 800a5d8:	4770      	bx	lr

0800a5da <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEPc>:
 800a5da:	6001      	str	r1, [r0, #0]
 800a5dc:	4770      	bx	lr

0800a5de <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_M_dataEv>:
 800a5de:	6800      	ldr	r0, [r0, #0]
 800a5e0:	4770      	bx	lr

0800a5e2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_local_dataEv>:
 800a5e2:	3008      	adds	r0, #8
 800a5e4:	4770      	bx	lr

0800a5e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_capacityEj>:
 800a5e6:	6081      	str	r1, [r0, #8]
 800a5e8:	4770      	bx	lr

0800a5ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_M_set_lengthEj>:
 800a5ea:	6803      	ldr	r3, [r0, #0]
 800a5ec:	6041      	str	r1, [r0, #4]
 800a5ee:	2200      	movs	r2, #0
 800a5f0:	545a      	strb	r2, [r3, r1]
 800a5f2:	4770      	bx	lr

0800a5f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>:
 800a5f4:	f850 3b08 	ldr.w	r3, [r0], #8
 800a5f8:	1a1b      	subs	r3, r3, r0
 800a5fa:	4258      	negs	r0, r3
 800a5fc:	4158      	adcs	r0, r3
 800a5fe:	4770      	bx	lr

0800a600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 800a600:	b508      	push	{r3, lr}
 800a602:	680b      	ldr	r3, [r1, #0]
 800a604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a608:	d302      	bcc.n	800a610 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 800a60a:	480d      	ldr	r0, [pc, #52]	@ (800a640 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 800a60c:	f7ff ffda 	bl	800a5c4 <_ZSt20__throw_length_errorPKc>
 800a610:	4293      	cmp	r3, r2
 800a612:	d90b      	bls.n	800a62c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a614:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 800a618:	ea4f 0042 	mov.w	r0, r2, lsl #1
 800a61c:	d206      	bcs.n	800a62c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 800a61e:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800a622:	bf2a      	itet	cs
 800a624:	f06f 4340 	mvncs.w	r3, #3221225472	@ 0xc0000000
 800a628:	6008      	strcc	r0, [r1, #0]
 800a62a:	600b      	strcs	r3, [r1, #0]
 800a62c:	6808      	ldr	r0, [r1, #0]
 800a62e:	3001      	adds	r0, #1
 800a630:	d501      	bpl.n	800a636 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 800a632:	f7ff ffc1 	bl	800a5b8 <_ZSt17__throw_bad_allocv>
 800a636:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800a63a:	f000 ba3a 	b.w	800aab2 <_Znwj>
 800a63e:	bf00      	nop
 800a640:	0800e188 	.word	0x0800e188

0800a644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 800a644:	b510      	push	{r4, lr}
 800a646:	4604      	mov	r4, r0
 800a648:	f7ff ffd4 	bl	800a5f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800a64c:	b920      	cbnz	r0, 800a658 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0x14>
 800a64e:	6820      	ldr	r0, [r4, #0]
 800a650:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a654:	f000 ba2b 	b.w	800aaae <_ZdlPv>
 800a658:	bd10      	pop	{r4, pc}
	...

0800a65c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>:
 800a65c:	b508      	push	{r3, lr}
 800a65e:	4603      	mov	r3, r0
 800a660:	4608      	mov	r0, r1
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	4298      	cmp	r0, r3
 800a666:	4611      	mov	r1, r2
 800a668:	d903      	bls.n	800a672 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x16>
 800a66a:	4602      	mov	r2, r0
 800a66c:	4801      	ldr	r0, [pc, #4]	@ (800a674 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc+0x18>)
 800a66e:	f7ff ffac 	bl	800a5ca <_ZSt24__throw_out_of_range_fmtPKcz>
 800a672:	bd08      	pop	{r3, pc}
 800a674:	0800e1a0 	.word	0x0800e1a0

0800a678 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 800a678:	6840      	ldr	r0, [r0, #4]
 800a67a:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800a67e:	3901      	subs	r1, #1
 800a680:	1a09      	subs	r1, r1, r0
 800a682:	4291      	cmp	r1, r2
 800a684:	b508      	push	{r3, lr}
 800a686:	d202      	bcs.n	800a68e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 800a688:	4618      	mov	r0, r3
 800a68a:	f7ff ff9b 	bl	800a5c4 <_ZSt20__throw_length_errorPKc>
 800a68e:	bd08      	pop	{r3, pc}

0800a690 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 800a690:	6803      	ldr	r3, [r0, #0]
 800a692:	428b      	cmp	r3, r1
 800a694:	d806      	bhi.n	800a6a4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 800a696:	6842      	ldr	r2, [r0, #4]
 800a698:	4413      	add	r3, r2
 800a69a:	4299      	cmp	r1, r3
 800a69c:	bf94      	ite	ls
 800a69e:	2000      	movls	r0, #0
 800a6a0:	2001      	movhi	r0, #1
 800a6a2:	4770      	bx	lr
 800a6a4:	2001      	movs	r0, #1
 800a6a6:	4770      	bx	lr

0800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 800a6a8:	2a01      	cmp	r2, #1
 800a6aa:	b410      	push	{r4}
 800a6ac:	d104      	bne.n	800a6b8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 800a6ae:	780a      	ldrb	r2, [r1, #0]
 800a6b0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6b4:	7002      	strb	r2, [r0, #0]
 800a6b6:	4770      	bx	lr
 800a6b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6bc:	f7ff bf89 	b.w	800a5d2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

0800a6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 800a6c0:	2a01      	cmp	r2, #1
 800a6c2:	b430      	push	{r4, r5}
 800a6c4:	d103      	bne.n	800a6ce <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 800a6c6:	780b      	ldrb	r3, [r1, #0]
 800a6c8:	7003      	strb	r3, [r0, #0]
 800a6ca:	bc30      	pop	{r4, r5}
 800a6cc:	4770      	bx	lr
 800a6ce:	2a00      	cmp	r2, #0
 800a6d0:	d0fb      	beq.n	800a6ca <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 800a6d2:	bc30      	pop	{r4, r5}
 800a6d4:	f001 b88f 	b.w	800b7f6 <memmove>

0800a6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>:
 800a6d8:	460b      	mov	r3, r1
 800a6da:	2b01      	cmp	r3, #1
 800a6dc:	b410      	push	{r4}
 800a6de:	4611      	mov	r1, r2
 800a6e0:	4604      	mov	r4, r0
 800a6e2:	d103      	bne.n	800a6ec <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0x14>
 800a6e4:	7022      	strb	r2, [r4, #0]
 800a6e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6ea:	4770      	bx	lr
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d0fa      	beq.n	800a6e6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc+0xe>
 800a6f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a6f4:	461a      	mov	r2, r3
 800a6f6:	f001 b898 	b.w	800b82a <memset>

0800a6fa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc>:
 800a6fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a6fc:	290f      	cmp	r1, #15
 800a6fe:	4604      	mov	r4, r0
 800a700:	9101      	str	r1, [sp, #4]
 800a702:	4615      	mov	r5, r2
 800a704:	d906      	bls.n	800a714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x1a>
 800a706:	2200      	movs	r2, #0
 800a708:	a901      	add	r1, sp, #4
 800a70a:	f7ff ff79 	bl	800a600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a70e:	9b01      	ldr	r3, [sp, #4]
 800a710:	6020      	str	r0, [r4, #0]
 800a712:	60a3      	str	r3, [r4, #8]
 800a714:	9901      	ldr	r1, [sp, #4]
 800a716:	b119      	cbz	r1, 800a720 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructEjc+0x26>
 800a718:	6820      	ldr	r0, [r4, #0]
 800a71a:	462a      	mov	r2, r5
 800a71c:	f7ff ffdc 	bl	800a6d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_S_assignEPcjc>
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	6822      	ldr	r2, [r4, #0]
 800a724:	6063      	str	r3, [r4, #4]
 800a726:	2100      	movs	r1, #0
 800a728:	54d1      	strb	r1, [r2, r3]
 800a72a:	b003      	add	sp, #12
 800a72c:	bd30      	pop	{r4, r5, pc}

0800a72e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 800a72e:	b508      	push	{r3, lr}
 800a730:	1a52      	subs	r2, r2, r1
 800a732:	f7ff ffb9 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a736:	bd08      	pop	{r3, pc}

0800a738 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 800a738:	f100 0208 	add.w	r2, r0, #8
 800a73c:	6002      	str	r2, [r0, #0]
 800a73e:	2200      	movs	r2, #0
 800a740:	6042      	str	r2, [r0, #4]
 800a742:	7202      	strb	r2, [r0, #8]
 800a744:	4770      	bx	lr

0800a746 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1ERKS3_>:
 800a746:	f100 0208 	add.w	r2, r0, #8
 800a74a:	6002      	str	r2, [r0, #0]
 800a74c:	2200      	movs	r2, #0
 800a74e:	6042      	str	r2, [r0, #4]
 800a750:	7202      	strb	r2, [r0, #8]
 800a752:	4770      	bx	lr

0800a754 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_>:
 800a754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a756:	f100 0708 	add.w	r7, r0, #8
 800a75a:	6007      	str	r7, [r0, #0]
 800a75c:	4605      	mov	r5, r0
 800a75e:	4608      	mov	r0, r1
 800a760:	460c      	mov	r4, r1
 800a762:	f7ff ff47 	bl	800a5f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800a766:	f104 0608 	add.w	r6, r4, #8
 800a76a:	6862      	ldr	r2, [r4, #4]
 800a76c:	b160      	cbz	r0, 800a788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x34>
 800a76e:	3201      	adds	r2, #1
 800a770:	4631      	mov	r1, r6
 800a772:	4638      	mov	r0, r7
 800a774:	f7ff ff2d 	bl	800a5d2 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>
 800a778:	6863      	ldr	r3, [r4, #4]
 800a77a:	606b      	str	r3, [r5, #4]
 800a77c:	2300      	movs	r3, #0
 800a77e:	7223      	strb	r3, [r4, #8]
 800a780:	6026      	str	r6, [r4, #0]
 800a782:	6063      	str	r3, [r4, #4]
 800a784:	4628      	mov	r0, r5
 800a786:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a788:	6823      	ldr	r3, [r4, #0]
 800a78a:	602b      	str	r3, [r5, #0]
 800a78c:	68a3      	ldr	r3, [r4, #8]
 800a78e:	60ab      	str	r3, [r5, #8]
 800a790:	e7f2      	b.n	800a778 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EOS4_+0x24>

0800a792 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 800a792:	b510      	push	{r4, lr}
 800a794:	4604      	mov	r4, r0
 800a796:	f7ff ff55 	bl	800a644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a79a:	4620      	mov	r0, r4
 800a79c:	bd10      	pop	{r4, pc}

0800a79e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_>:
 800a79e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a0:	460c      	mov	r4, r1
 800a7a2:	4605      	mov	r5, r0
 800a7a4:	f7ff ff26 	bl	800a5f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800a7a8:	4606      	mov	r6, r0
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	f7ff ff22 	bl	800a5f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800a7b0:	b190      	cbz	r0, 800a7d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x3a>
 800a7b2:	42a5      	cmp	r5, r4
 800a7b4:	d00a      	beq.n	800a7cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800a7b6:	6862      	ldr	r2, [r4, #4]
 800a7b8:	b11a      	cbz	r2, 800a7c2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x24>
 800a7ba:	6821      	ldr	r1, [r4, #0]
 800a7bc:	6828      	ldr	r0, [r5, #0]
 800a7be:	f7ff ff73 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a7c2:	6863      	ldr	r3, [r4, #4]
 800a7c4:	682a      	ldr	r2, [r5, #0]
 800a7c6:	606b      	str	r3, [r5, #4]
 800a7c8:	2100      	movs	r1, #0
 800a7ca:	54d1      	strb	r1, [r2, r3]
 800a7cc:	6822      	ldr	r2, [r4, #0]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6063      	str	r3, [r4, #4]
 800a7d2:	7013      	strb	r3, [r2, #0]
 800a7d4:	4628      	mov	r0, r5
 800a7d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a7d8:	b90e      	cbnz	r6, 800a7de <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x40>
 800a7da:	6828      	ldr	r0, [r5, #0]
 800a7dc:	68af      	ldr	r7, [r5, #8]
 800a7de:	6823      	ldr	r3, [r4, #0]
 800a7e0:	602b      	str	r3, [r5, #0]
 800a7e2:	6863      	ldr	r3, [r4, #4]
 800a7e4:	606b      	str	r3, [r5, #4]
 800a7e6:	68a3      	ldr	r3, [r4, #8]
 800a7e8:	60ab      	str	r3, [r5, #8]
 800a7ea:	b110      	cbz	r0, 800a7f2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x54>
 800a7ec:	6020      	str	r0, [r4, #0]
 800a7ee:	60a7      	str	r7, [r4, #8]
 800a7f0:	e7ec      	b.n	800a7cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>
 800a7f2:	f104 0308 	add.w	r3, r4, #8
 800a7f6:	6023      	str	r3, [r4, #0]
 800a7f8:	e7e8      	b.n	800a7cc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEOS4_+0x2e>

0800a7fa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4sizeEv>:
 800a7fa:	6840      	ldr	r0, [r0, #4]
 800a7fc:	4770      	bx	lr

0800a7fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>:
 800a7fe:	b510      	push	{r4, lr}
 800a800:	4604      	mov	r4, r0
 800a802:	f7ff fef7 	bl	800a5f4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_is_localEv>
 800a806:	b908      	cbnz	r0, 800a80c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xe>
 800a808:	68a0      	ldr	r0, [r4, #8]
 800a80a:	bd10      	pop	{r4, pc}
 800a80c:	200f      	movs	r0, #15
 800a80e:	e7fc      	b.n	800a80a <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv+0xc>

0800a810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 800a810:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800a814:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 800a816:	461f      	mov	r7, r3
 800a818:	6843      	ldr	r3, [r0, #4]
 800a81a:	eb01 0802 	add.w	r8, r1, r2
 800a81e:	1ab2      	subs	r2, r6, r2
 800a820:	441a      	add	r2, r3
 800a822:	4604      	mov	r4, r0
 800a824:	460d      	mov	r5, r1
 800a826:	eba3 0908 	sub.w	r9, r3, r8
 800a82a:	9201      	str	r2, [sp, #4]
 800a82c:	f7ff ffe7 	bl	800a7fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800a830:	a901      	add	r1, sp, #4
 800a832:	4602      	mov	r2, r0
 800a834:	4620      	mov	r0, r4
 800a836:	f7ff fee3 	bl	800a600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a83a:	4682      	mov	sl, r0
 800a83c:	b11d      	cbz	r5, 800a846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x36>
 800a83e:	6821      	ldr	r1, [r4, #0]
 800a840:	462a      	mov	r2, r5
 800a842:	f7ff ff31 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a846:	b137      	cbz	r7, 800a856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800a848:	b12e      	cbz	r6, 800a856 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x46>
 800a84a:	4632      	mov	r2, r6
 800a84c:	4639      	mov	r1, r7
 800a84e:	eb0a 0005 	add.w	r0, sl, r5
 800a852:	f7ff ff29 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a856:	f1b9 0f00 	cmp.w	r9, #0
 800a85a:	d007      	beq.n	800a86c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x5c>
 800a85c:	6821      	ldr	r1, [r4, #0]
 800a85e:	4435      	add	r5, r6
 800a860:	464a      	mov	r2, r9
 800a862:	4441      	add	r1, r8
 800a864:	eb0a 0005 	add.w	r0, sl, r5
 800a868:	f7ff ff1e 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a86c:	4620      	mov	r0, r4
 800a86e:	f7ff fee9 	bl	800a644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a872:	9b01      	ldr	r3, [sp, #4]
 800a874:	f8c4 a000 	str.w	sl, [r4]
 800a878:	60a3      	str	r3, [r4, #8]
 800a87a:	b002      	add	sp, #8
 800a87c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800a880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj>:
 800a880:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a882:	4604      	mov	r4, r0
 800a884:	9101      	str	r1, [sp, #4]
 800a886:	f7ff ffba 	bl	800a7fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800a88a:	9b01      	ldr	r3, [sp, #4]
 800a88c:	4283      	cmp	r3, r0
 800a88e:	4602      	mov	r2, r0
 800a890:	d90f      	bls.n	800a8b2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7reserveEj+0x32>
 800a892:	a901      	add	r1, sp, #4
 800a894:	4620      	mov	r0, r4
 800a896:	f7ff feb3 	bl	800a600 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 800a89a:	6862      	ldr	r2, [r4, #4]
 800a89c:	6821      	ldr	r1, [r4, #0]
 800a89e:	3201      	adds	r2, #1
 800a8a0:	4605      	mov	r5, r0
 800a8a2:	f7ff ff01 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a8a6:	4620      	mov	r0, r4
 800a8a8:	f7ff fecc 	bl	800a644 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 800a8ac:	9b01      	ldr	r3, [sp, #4]
 800a8ae:	6025      	str	r5, [r4, #0]
 800a8b0:	60a3      	str	r3, [r4, #8]
 800a8b2:	b003      	add	sp, #12
 800a8b4:	bd30      	pop	{r4, r5, pc}

0800a8b6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEixEj>:
 800a8b6:	6800      	ldr	r0, [r0, #0]
 800a8b8:	4408      	add	r0, r1
 800a8ba:	4770      	bx	lr

0800a8bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 800a8bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8c0:	b085      	sub	sp, #20
 800a8c2:	4680      	mov	r8, r0
 800a8c4:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 800a8c6:	4614      	mov	r4, r2
 800a8c8:	4689      	mov	r9, r1
 800a8ca:	462a      	mov	r2, r5
 800a8cc:	4621      	mov	r1, r4
 800a8ce:	461f      	mov	r7, r3
 800a8d0:	4b37      	ldr	r3, [pc, #220]	@ (800a9b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf4>)
 800a8d2:	f7ff fed1 	bl	800a678 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800a8d6:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a8da:	9303      	str	r3, [sp, #12]
 800a8dc:	eba5 0b04 	sub.w	fp, r5, r4
 800a8e0:	4640      	mov	r0, r8
 800a8e2:	eb03 0a0b 	add.w	sl, r3, fp
 800a8e6:	f7ff ff8a 	bl	800a7fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800a8ea:	4550      	cmp	r0, sl
 800a8ec:	d354      	bcc.n	800a998 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xdc>
 800a8ee:	f8d8 6000 	ldr.w	r6, [r8]
 800a8f2:	9b03      	ldr	r3, [sp, #12]
 800a8f4:	444e      	add	r6, r9
 800a8f6:	4639      	mov	r1, r7
 800a8f8:	44a1      	add	r9, r4
 800a8fa:	4640      	mov	r0, r8
 800a8fc:	eba3 0909 	sub.w	r9, r3, r9
 800a900:	f7ff fec6 	bl	800a690 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 800a904:	b180      	cbz	r0, 800a928 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6c>
 800a906:	f1b9 0f00 	cmp.w	r9, #0
 800a90a:	d006      	beq.n	800a91a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 800a90c:	42ac      	cmp	r4, r5
 800a90e:	d004      	beq.n	800a91a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x5e>
 800a910:	464a      	mov	r2, r9
 800a912:	1931      	adds	r1, r6, r4
 800a914:	1970      	adds	r0, r6, r5
 800a916:	f7ff fed3 	bl	800a6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a91a:	b315      	cbz	r5, 800a962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800a91c:	462a      	mov	r2, r5
 800a91e:	4639      	mov	r1, r7
 800a920:	4630      	mov	r0, r6
 800a922:	f7ff fec1 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800a926:	e01c      	b.n	800a962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800a928:	b135      	cbz	r5, 800a938 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7c>
 800a92a:	42ac      	cmp	r4, r5
 800a92c:	d33c      	bcc.n	800a9a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xec>
 800a92e:	462a      	mov	r2, r5
 800a930:	4639      	mov	r1, r7
 800a932:	4630      	mov	r0, r6
 800a934:	f7ff fec4 	bl	800a6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a938:	f1b9 0f00 	cmp.w	r9, #0
 800a93c:	d011      	beq.n	800a962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800a93e:	42ac      	cmp	r4, r5
 800a940:	d00f      	beq.n	800a962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800a942:	464a      	mov	r2, r9
 800a944:	1931      	adds	r1, r6, r4
 800a946:	1970      	adds	r0, r6, r5
 800a948:	f7ff feba 	bl	800a6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a94c:	42ac      	cmp	r4, r5
 800a94e:	d208      	bcs.n	800a962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800a950:	4434      	add	r4, r6
 800a952:	197b      	adds	r3, r7, r5
 800a954:	429c      	cmp	r4, r3
 800a956:	d30f      	bcc.n	800a978 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbc>
 800a958:	462a      	mov	r2, r5
 800a95a:	4639      	mov	r1, r7
 800a95c:	4630      	mov	r0, r6
 800a95e:	f7ff feaf 	bl	800a6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a962:	f8d8 3000 	ldr.w	r3, [r8]
 800a966:	f8c8 a004 	str.w	sl, [r8, #4]
 800a96a:	2200      	movs	r2, #0
 800a96c:	4640      	mov	r0, r8
 800a96e:	f803 200a 	strb.w	r2, [r3, sl]
 800a972:	b005      	add	sp, #20
 800a974:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a978:	42bc      	cmp	r4, r7
 800a97a:	d803      	bhi.n	800a984 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xc8>
 800a97c:	462a      	mov	r2, r5
 800a97e:	eb07 010b 	add.w	r1, r7, fp
 800a982:	e7cd      	b.n	800a920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x64>
 800a984:	1be4      	subs	r4, r4, r7
 800a986:	4622      	mov	r2, r4
 800a988:	4639      	mov	r1, r7
 800a98a:	4630      	mov	r0, r6
 800a98c:	f7ff fe98 	bl	800a6c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 800a990:	1b2a      	subs	r2, r5, r4
 800a992:	1971      	adds	r1, r6, r5
 800a994:	1930      	adds	r0, r6, r4
 800a996:	e7c4      	b.n	800a922 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 800a998:	9500      	str	r5, [sp, #0]
 800a99a:	463b      	mov	r3, r7
 800a99c:	4622      	mov	r2, r4
 800a99e:	4649      	mov	r1, r9
 800a9a0:	4640      	mov	r0, r8
 800a9a2:	f7ff ff35 	bl	800a810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800a9a6:	e7dc      	b.n	800a962 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa6>
 800a9a8:	f1b9 0f00 	cmp.w	r9, #0
 800a9ac:	d0d0      	beq.n	800a950 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x94>
 800a9ae:	e7c8      	b.n	800a942 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x86>
 800a9b0:	0800e1ed 	.word	0x0800e1ed

0800a9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>:
 800a9b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a9b6:	4604      	mov	r4, r0
 800a9b8:	4615      	mov	r5, r2
 800a9ba:	4a09      	ldr	r2, [pc, #36]	@ (800a9e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj+0x2c>)
 800a9bc:	460f      	mov	r7, r1
 800a9be:	461e      	mov	r6, r3
 800a9c0:	f7ff fe4c 	bl	800a65c <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_checkEjPKc>
 800a9c4:	6862      	ldr	r2, [r4, #4]
 800a9c6:	9b08      	ldr	r3, [sp, #32]
 800a9c8:	9300      	str	r3, [sp, #0]
 800a9ca:	1bd2      	subs	r2, r2, r7
 800a9cc:	42aa      	cmp	r2, r5
 800a9ce:	4601      	mov	r1, r0
 800a9d0:	4633      	mov	r3, r6
 800a9d2:	bf28      	it	cs
 800a9d4:	462a      	movcs	r2, r5
 800a9d6:	4620      	mov	r0, r4
 800a9d8:	f7ff ff70 	bl	800a8bc <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 800a9dc:	b003      	add	sp, #12
 800a9de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a9e0:	0800e1d7 	.word	0x0800e1d7

0800a9e4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6insertEjPKc>:
 800a9e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9e6:	4605      	mov	r5, r0
 800a9e8:	4610      	mov	r0, r2
 800a9ea:	4614      	mov	r4, r2
 800a9ec:	460e      	mov	r6, r1
 800a9ee:	f7f5 fc3f 	bl	8000270 <strlen>
 800a9f2:	4623      	mov	r3, r4
 800a9f4:	9000      	str	r0, [sp, #0]
 800a9f6:	2200      	movs	r2, #0
 800a9f8:	4631      	mov	r1, r6
 800a9fa:	4628      	mov	r0, r5
 800a9fc:	f7ff ffda 	bl	800a9b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7replaceEjjPKcj>
 800aa00:	b002      	add	sp, #8
 800aa02:	bd70      	pop	{r4, r5, r6, pc}

0800aa04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>:
 800aa04:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800aa08:	f8d0 8004 	ldr.w	r8, [r0, #4]
 800aa0c:	4604      	mov	r4, r0
 800aa0e:	eb02 0708 	add.w	r7, r2, r8
 800aa12:	460e      	mov	r6, r1
 800aa14:	4615      	mov	r5, r2
 800aa16:	f7ff fef2 	bl	800a7fe <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8capacityEv>
 800aa1a:	42b8      	cmp	r0, r7
 800aa1c:	d30e      	bcc.n	800aa3c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x38>
 800aa1e:	b12d      	cbz	r5, 800aa2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>
 800aa20:	6820      	ldr	r0, [r4, #0]
 800aa22:	462a      	mov	r2, r5
 800aa24:	4631      	mov	r1, r6
 800aa26:	4440      	add	r0, r8
 800aa28:	f7ff fe3e 	bl	800a6a8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 800aa2c:	6823      	ldr	r3, [r4, #0]
 800aa2e:	6067      	str	r7, [r4, #4]
 800aa30:	2200      	movs	r2, #0
 800aa32:	4620      	mov	r0, r4
 800aa34:	55da      	strb	r2, [r3, r7]
 800aa36:	b002      	add	sp, #8
 800aa38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa3c:	9500      	str	r5, [sp, #0]
 800aa3e:	4633      	mov	r3, r6
 800aa40:	2200      	movs	r2, #0
 800aa42:	4641      	mov	r1, r8
 800aa44:	4620      	mov	r0, r4
 800aa46:	f7ff fee3 	bl	800a810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 800aa4a:	e7ef      	b.n	800aa2c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj+0x28>

0800aa4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>:
 800aa4c:	b570      	push	{r4, r5, r6, lr}
 800aa4e:	4b06      	ldr	r3, [pc, #24]	@ (800aa68 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj+0x1c>)
 800aa50:	4604      	mov	r4, r0
 800aa52:	460d      	mov	r5, r1
 800aa54:	4616      	mov	r6, r2
 800aa56:	2100      	movs	r1, #0
 800aa58:	f7ff fe0e 	bl	800a678 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800aa5c:	4632      	mov	r2, r6
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4620      	mov	r0, r4
 800aa62:	f7ff ffcf 	bl	800aa04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800aa66:	bd70      	pop	{r4, r5, r6, pc}
 800aa68:	0800e206 	.word	0x0800e206

0800aa6c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendERKS4_>:
 800aa6c:	b508      	push	{r3, lr}
 800aa6e:	e9d1 1200 	ldrd	r1, r2, [r1]
 800aa72:	f7ff ffeb 	bl	800aa4c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKcj>
 800aa76:	bd08      	pop	{r3, pc}

0800aa78 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc>:
 800aa78:	b570      	push	{r4, r5, r6, lr}
 800aa7a:	4604      	mov	r4, r0
 800aa7c:	4608      	mov	r0, r1
 800aa7e:	460d      	mov	r5, r1
 800aa80:	f7f5 fbf6 	bl	8000270 <strlen>
 800aa84:	4b06      	ldr	r3, [pc, #24]	@ (800aaa0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6appendEPKc+0x28>)
 800aa86:	4606      	mov	r6, r0
 800aa88:	4602      	mov	r2, r0
 800aa8a:	2100      	movs	r1, #0
 800aa8c:	4620      	mov	r0, r4
 800aa8e:	f7ff fdf3 	bl	800a678 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 800aa92:	4632      	mov	r2, r6
 800aa94:	4629      	mov	r1, r5
 800aa96:	4620      	mov	r0, r4
 800aa98:	f7ff ffb4 	bl	800aa04 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_appendEPKcj>
 800aa9c:	bd70      	pop	{r4, r5, r6, pc}
 800aa9e:	bf00      	nop
 800aaa0:	0800e206 	.word	0x0800e206

0800aaa4 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 800aaa4:	6800      	ldr	r0, [r0, #0]
 800aaa6:	4770      	bx	lr

0800aaa8 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13get_allocatorEv>:
 800aaa8:	4770      	bx	lr

0800aaaa <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_Alloc_hiderC1EPcRKS3_>:
 800aaaa:	6001      	str	r1, [r0, #0]
 800aaac:	4770      	bx	lr

0800aaae <_ZdlPv>:
 800aaae:	f000 b86f 	b.w	800ab90 <free>

0800aab2 <_Znwj>:
 800aab2:	2801      	cmp	r0, #1
 800aab4:	bf38      	it	cc
 800aab6:	2001      	movcc	r0, #1
 800aab8:	b510      	push	{r4, lr}
 800aaba:	4604      	mov	r4, r0
 800aabc:	4620      	mov	r0, r4
 800aabe:	f000 f85f 	bl	800ab80 <malloc>
 800aac2:	b100      	cbz	r0, 800aac6 <_Znwj+0x14>
 800aac4:	bd10      	pop	{r4, pc}
 800aac6:	f000 f805 	bl	800aad4 <_ZSt15get_new_handlerv>
 800aaca:	b908      	cbnz	r0, 800aad0 <_Znwj+0x1e>
 800aacc:	f000 f850 	bl	800ab70 <abort>
 800aad0:	4780      	blx	r0
 800aad2:	e7f3      	b.n	800aabc <_Znwj+0xa>

0800aad4 <_ZSt15get_new_handlerv>:
 800aad4:	4b02      	ldr	r3, [pc, #8]	@ (800aae0 <_ZSt15get_new_handlerv+0xc>)
 800aad6:	6818      	ldr	r0, [r3, #0]
 800aad8:	f3bf 8f5b 	dmb	ish
 800aadc:	4770      	bx	lr
 800aade:	bf00      	nop
 800aae0:	200008ec 	.word	0x200008ec

0800aae4 <round>:
 800aae4:	ec51 0b10 	vmov	r0, r1, d0
 800aae8:	b570      	push	{r4, r5, r6, lr}
 800aaea:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800aaee:	f2a4 32ff 	subw	r2, r4, #1023	@ 0x3ff
 800aaf2:	2a13      	cmp	r2, #19
 800aaf4:	460b      	mov	r3, r1
 800aaf6:	4605      	mov	r5, r0
 800aaf8:	dc1b      	bgt.n	800ab32 <round+0x4e>
 800aafa:	2a00      	cmp	r2, #0
 800aafc:	da0b      	bge.n	800ab16 <round+0x32>
 800aafe:	f001 4300 	and.w	r3, r1, #2147483648	@ 0x80000000
 800ab02:	3201      	adds	r2, #1
 800ab04:	bf04      	itt	eq
 800ab06:	f043 537f 	orreq.w	r3, r3, #1069547520	@ 0x3fc00000
 800ab0a:	f443 1340 	orreq.w	r3, r3, #3145728	@ 0x300000
 800ab0e:	2200      	movs	r2, #0
 800ab10:	4619      	mov	r1, r3
 800ab12:	4610      	mov	r0, r2
 800ab14:	e015      	b.n	800ab42 <round+0x5e>
 800ab16:	4c15      	ldr	r4, [pc, #84]	@ (800ab6c <round+0x88>)
 800ab18:	4114      	asrs	r4, r2
 800ab1a:	ea04 0601 	and.w	r6, r4, r1
 800ab1e:	4306      	orrs	r6, r0
 800ab20:	d00f      	beq.n	800ab42 <round+0x5e>
 800ab22:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 800ab26:	fa41 f202 	asr.w	r2, r1, r2
 800ab2a:	4413      	add	r3, r2
 800ab2c:	ea23 0304 	bic.w	r3, r3, r4
 800ab30:	e7ed      	b.n	800ab0e <round+0x2a>
 800ab32:	2a33      	cmp	r2, #51	@ 0x33
 800ab34:	dd08      	ble.n	800ab48 <round+0x64>
 800ab36:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 800ab3a:	d102      	bne.n	800ab42 <round+0x5e>
 800ab3c:	4602      	mov	r2, r0
 800ab3e:	f7f5 fba5 	bl	800028c <__adddf3>
 800ab42:	ec41 0b10 	vmov	d0, r0, r1
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	f2a4 4613 	subw	r6, r4, #1043	@ 0x413
 800ab4c:	f04f 34ff 	mov.w	r4, #4294967295
 800ab50:	40f4      	lsrs	r4, r6
 800ab52:	4204      	tst	r4, r0
 800ab54:	d0f5      	beq.n	800ab42 <round+0x5e>
 800ab56:	f1c2 0133 	rsb	r1, r2, #51	@ 0x33
 800ab5a:	2201      	movs	r2, #1
 800ab5c:	408a      	lsls	r2, r1
 800ab5e:	1952      	adds	r2, r2, r5
 800ab60:	bf28      	it	cs
 800ab62:	3301      	addcs	r3, #1
 800ab64:	ea22 0204 	bic.w	r2, r2, r4
 800ab68:	e7d2      	b.n	800ab10 <round+0x2c>
 800ab6a:	bf00      	nop
 800ab6c:	000fffff 	.word	0x000fffff

0800ab70 <abort>:
 800ab70:	b508      	push	{r3, lr}
 800ab72:	2006      	movs	r0, #6
 800ab74:	f000 fe8a 	bl	800b88c <raise>
 800ab78:	2001      	movs	r0, #1
 800ab7a:	f7f9 fd2d 	bl	80045d8 <_exit>
	...

0800ab80 <malloc>:
 800ab80:	4b02      	ldr	r3, [pc, #8]	@ (800ab8c <malloc+0xc>)
 800ab82:	4601      	mov	r1, r0
 800ab84:	6818      	ldr	r0, [r3, #0]
 800ab86:	f000 b82d 	b.w	800abe4 <_malloc_r>
 800ab8a:	bf00      	nop
 800ab8c:	2000001c 	.word	0x2000001c

0800ab90 <free>:
 800ab90:	4b02      	ldr	r3, [pc, #8]	@ (800ab9c <free+0xc>)
 800ab92:	4601      	mov	r1, r0
 800ab94:	6818      	ldr	r0, [r3, #0]
 800ab96:	f001 bd7f 	b.w	800c698 <_free_r>
 800ab9a:	bf00      	nop
 800ab9c:	2000001c 	.word	0x2000001c

0800aba0 <sbrk_aligned>:
 800aba0:	b570      	push	{r4, r5, r6, lr}
 800aba2:	4e0f      	ldr	r6, [pc, #60]	@ (800abe0 <sbrk_aligned+0x40>)
 800aba4:	460c      	mov	r4, r1
 800aba6:	6831      	ldr	r1, [r6, #0]
 800aba8:	4605      	mov	r5, r0
 800abaa:	b911      	cbnz	r1, 800abb2 <sbrk_aligned+0x12>
 800abac:	f000 fec2 	bl	800b934 <_sbrk_r>
 800abb0:	6030      	str	r0, [r6, #0]
 800abb2:	4621      	mov	r1, r4
 800abb4:	4628      	mov	r0, r5
 800abb6:	f000 febd 	bl	800b934 <_sbrk_r>
 800abba:	1c43      	adds	r3, r0, #1
 800abbc:	d103      	bne.n	800abc6 <sbrk_aligned+0x26>
 800abbe:	f04f 34ff 	mov.w	r4, #4294967295
 800abc2:	4620      	mov	r0, r4
 800abc4:	bd70      	pop	{r4, r5, r6, pc}
 800abc6:	1cc4      	adds	r4, r0, #3
 800abc8:	f024 0403 	bic.w	r4, r4, #3
 800abcc:	42a0      	cmp	r0, r4
 800abce:	d0f8      	beq.n	800abc2 <sbrk_aligned+0x22>
 800abd0:	1a21      	subs	r1, r4, r0
 800abd2:	4628      	mov	r0, r5
 800abd4:	f000 feae 	bl	800b934 <_sbrk_r>
 800abd8:	3001      	adds	r0, #1
 800abda:	d1f2      	bne.n	800abc2 <sbrk_aligned+0x22>
 800abdc:	e7ef      	b.n	800abbe <sbrk_aligned+0x1e>
 800abde:	bf00      	nop
 800abe0:	200008f0 	.word	0x200008f0

0800abe4 <_malloc_r>:
 800abe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800abe8:	1ccd      	adds	r5, r1, #3
 800abea:	f025 0503 	bic.w	r5, r5, #3
 800abee:	3508      	adds	r5, #8
 800abf0:	2d0c      	cmp	r5, #12
 800abf2:	bf38      	it	cc
 800abf4:	250c      	movcc	r5, #12
 800abf6:	2d00      	cmp	r5, #0
 800abf8:	4606      	mov	r6, r0
 800abfa:	db01      	blt.n	800ac00 <_malloc_r+0x1c>
 800abfc:	42a9      	cmp	r1, r5
 800abfe:	d904      	bls.n	800ac0a <_malloc_r+0x26>
 800ac00:	230c      	movs	r3, #12
 800ac02:	6033      	str	r3, [r6, #0]
 800ac04:	2000      	movs	r0, #0
 800ac06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ac0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ace0 <_malloc_r+0xfc>
 800ac0e:	f000 f869 	bl	800ace4 <__malloc_lock>
 800ac12:	f8d8 3000 	ldr.w	r3, [r8]
 800ac16:	461c      	mov	r4, r3
 800ac18:	bb44      	cbnz	r4, 800ac6c <_malloc_r+0x88>
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	4630      	mov	r0, r6
 800ac1e:	f7ff ffbf 	bl	800aba0 <sbrk_aligned>
 800ac22:	1c43      	adds	r3, r0, #1
 800ac24:	4604      	mov	r4, r0
 800ac26:	d158      	bne.n	800acda <_malloc_r+0xf6>
 800ac28:	f8d8 4000 	ldr.w	r4, [r8]
 800ac2c:	4627      	mov	r7, r4
 800ac2e:	2f00      	cmp	r7, #0
 800ac30:	d143      	bne.n	800acba <_malloc_r+0xd6>
 800ac32:	2c00      	cmp	r4, #0
 800ac34:	d04b      	beq.n	800acce <_malloc_r+0xea>
 800ac36:	6823      	ldr	r3, [r4, #0]
 800ac38:	4639      	mov	r1, r7
 800ac3a:	4630      	mov	r0, r6
 800ac3c:	eb04 0903 	add.w	r9, r4, r3
 800ac40:	f000 fe78 	bl	800b934 <_sbrk_r>
 800ac44:	4581      	cmp	r9, r0
 800ac46:	d142      	bne.n	800acce <_malloc_r+0xea>
 800ac48:	6821      	ldr	r1, [r4, #0]
 800ac4a:	1a6d      	subs	r5, r5, r1
 800ac4c:	4629      	mov	r1, r5
 800ac4e:	4630      	mov	r0, r6
 800ac50:	f7ff ffa6 	bl	800aba0 <sbrk_aligned>
 800ac54:	3001      	adds	r0, #1
 800ac56:	d03a      	beq.n	800acce <_malloc_r+0xea>
 800ac58:	6823      	ldr	r3, [r4, #0]
 800ac5a:	442b      	add	r3, r5
 800ac5c:	6023      	str	r3, [r4, #0]
 800ac5e:	f8d8 3000 	ldr.w	r3, [r8]
 800ac62:	685a      	ldr	r2, [r3, #4]
 800ac64:	bb62      	cbnz	r2, 800acc0 <_malloc_r+0xdc>
 800ac66:	f8c8 7000 	str.w	r7, [r8]
 800ac6a:	e00f      	b.n	800ac8c <_malloc_r+0xa8>
 800ac6c:	6822      	ldr	r2, [r4, #0]
 800ac6e:	1b52      	subs	r2, r2, r5
 800ac70:	d420      	bmi.n	800acb4 <_malloc_r+0xd0>
 800ac72:	2a0b      	cmp	r2, #11
 800ac74:	d917      	bls.n	800aca6 <_malloc_r+0xc2>
 800ac76:	1961      	adds	r1, r4, r5
 800ac78:	42a3      	cmp	r3, r4
 800ac7a:	6025      	str	r5, [r4, #0]
 800ac7c:	bf18      	it	ne
 800ac7e:	6059      	strne	r1, [r3, #4]
 800ac80:	6863      	ldr	r3, [r4, #4]
 800ac82:	bf08      	it	eq
 800ac84:	f8c8 1000 	streq.w	r1, [r8]
 800ac88:	5162      	str	r2, [r4, r5]
 800ac8a:	604b      	str	r3, [r1, #4]
 800ac8c:	4630      	mov	r0, r6
 800ac8e:	f000 f82f 	bl	800acf0 <__malloc_unlock>
 800ac92:	f104 000b 	add.w	r0, r4, #11
 800ac96:	1d23      	adds	r3, r4, #4
 800ac98:	f020 0007 	bic.w	r0, r0, #7
 800ac9c:	1ac2      	subs	r2, r0, r3
 800ac9e:	bf1c      	itt	ne
 800aca0:	1a1b      	subne	r3, r3, r0
 800aca2:	50a3      	strne	r3, [r4, r2]
 800aca4:	e7af      	b.n	800ac06 <_malloc_r+0x22>
 800aca6:	6862      	ldr	r2, [r4, #4]
 800aca8:	42a3      	cmp	r3, r4
 800acaa:	bf0c      	ite	eq
 800acac:	f8c8 2000 	streq.w	r2, [r8]
 800acb0:	605a      	strne	r2, [r3, #4]
 800acb2:	e7eb      	b.n	800ac8c <_malloc_r+0xa8>
 800acb4:	4623      	mov	r3, r4
 800acb6:	6864      	ldr	r4, [r4, #4]
 800acb8:	e7ae      	b.n	800ac18 <_malloc_r+0x34>
 800acba:	463c      	mov	r4, r7
 800acbc:	687f      	ldr	r7, [r7, #4]
 800acbe:	e7b6      	b.n	800ac2e <_malloc_r+0x4a>
 800acc0:	461a      	mov	r2, r3
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	42a3      	cmp	r3, r4
 800acc6:	d1fb      	bne.n	800acc0 <_malloc_r+0xdc>
 800acc8:	2300      	movs	r3, #0
 800acca:	6053      	str	r3, [r2, #4]
 800accc:	e7de      	b.n	800ac8c <_malloc_r+0xa8>
 800acce:	230c      	movs	r3, #12
 800acd0:	6033      	str	r3, [r6, #0]
 800acd2:	4630      	mov	r0, r6
 800acd4:	f000 f80c 	bl	800acf0 <__malloc_unlock>
 800acd8:	e794      	b.n	800ac04 <_malloc_r+0x20>
 800acda:	6005      	str	r5, [r0, #0]
 800acdc:	e7d6      	b.n	800ac8c <_malloc_r+0xa8>
 800acde:	bf00      	nop
 800ace0:	200008f4 	.word	0x200008f4

0800ace4 <__malloc_lock>:
 800ace4:	4801      	ldr	r0, [pc, #4]	@ (800acec <__malloc_lock+0x8>)
 800ace6:	f000 be72 	b.w	800b9ce <__retarget_lock_acquire_recursive>
 800acea:	bf00      	nop
 800acec:	20000a38 	.word	0x20000a38

0800acf0 <__malloc_unlock>:
 800acf0:	4801      	ldr	r0, [pc, #4]	@ (800acf8 <__malloc_unlock+0x8>)
 800acf2:	f000 be6d 	b.w	800b9d0 <__retarget_lock_release_recursive>
 800acf6:	bf00      	nop
 800acf8:	20000a38 	.word	0x20000a38

0800acfc <__cvt>:
 800acfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ad00:	ec57 6b10 	vmov	r6, r7, d0
 800ad04:	2f00      	cmp	r7, #0
 800ad06:	460c      	mov	r4, r1
 800ad08:	4619      	mov	r1, r3
 800ad0a:	463b      	mov	r3, r7
 800ad0c:	bfbb      	ittet	lt
 800ad0e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800ad12:	461f      	movlt	r7, r3
 800ad14:	2300      	movge	r3, #0
 800ad16:	232d      	movlt	r3, #45	@ 0x2d
 800ad18:	700b      	strb	r3, [r1, #0]
 800ad1a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ad1c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800ad20:	4691      	mov	r9, r2
 800ad22:	f023 0820 	bic.w	r8, r3, #32
 800ad26:	bfbc      	itt	lt
 800ad28:	4632      	movlt	r2, r6
 800ad2a:	4616      	movlt	r6, r2
 800ad2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad30:	d005      	beq.n	800ad3e <__cvt+0x42>
 800ad32:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800ad36:	d100      	bne.n	800ad3a <__cvt+0x3e>
 800ad38:	3401      	adds	r4, #1
 800ad3a:	2102      	movs	r1, #2
 800ad3c:	e000      	b.n	800ad40 <__cvt+0x44>
 800ad3e:	2103      	movs	r1, #3
 800ad40:	ab03      	add	r3, sp, #12
 800ad42:	9301      	str	r3, [sp, #4]
 800ad44:	ab02      	add	r3, sp, #8
 800ad46:	9300      	str	r3, [sp, #0]
 800ad48:	ec47 6b10 	vmov	d0, r6, r7
 800ad4c:	4653      	mov	r3, sl
 800ad4e:	4622      	mov	r2, r4
 800ad50:	f000 fede 	bl	800bb10 <_dtoa_r>
 800ad54:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800ad58:	4605      	mov	r5, r0
 800ad5a:	d119      	bne.n	800ad90 <__cvt+0x94>
 800ad5c:	f019 0f01 	tst.w	r9, #1
 800ad60:	d00e      	beq.n	800ad80 <__cvt+0x84>
 800ad62:	eb00 0904 	add.w	r9, r0, r4
 800ad66:	2200      	movs	r2, #0
 800ad68:	2300      	movs	r3, #0
 800ad6a:	4630      	mov	r0, r6
 800ad6c:	4639      	mov	r1, r7
 800ad6e:	f7f5 feab 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad72:	b108      	cbz	r0, 800ad78 <__cvt+0x7c>
 800ad74:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad78:	2230      	movs	r2, #48	@ 0x30
 800ad7a:	9b03      	ldr	r3, [sp, #12]
 800ad7c:	454b      	cmp	r3, r9
 800ad7e:	d31e      	bcc.n	800adbe <__cvt+0xc2>
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad84:	1b5b      	subs	r3, r3, r5
 800ad86:	4628      	mov	r0, r5
 800ad88:	6013      	str	r3, [r2, #0]
 800ad8a:	b004      	add	sp, #16
 800ad8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad90:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad94:	eb00 0904 	add.w	r9, r0, r4
 800ad98:	d1e5      	bne.n	800ad66 <__cvt+0x6a>
 800ad9a:	7803      	ldrb	r3, [r0, #0]
 800ad9c:	2b30      	cmp	r3, #48	@ 0x30
 800ad9e:	d10a      	bne.n	800adb6 <__cvt+0xba>
 800ada0:	2200      	movs	r2, #0
 800ada2:	2300      	movs	r3, #0
 800ada4:	4630      	mov	r0, r6
 800ada6:	4639      	mov	r1, r7
 800ada8:	f7f5 fe8e 	bl	8000ac8 <__aeabi_dcmpeq>
 800adac:	b918      	cbnz	r0, 800adb6 <__cvt+0xba>
 800adae:	f1c4 0401 	rsb	r4, r4, #1
 800adb2:	f8ca 4000 	str.w	r4, [sl]
 800adb6:	f8da 3000 	ldr.w	r3, [sl]
 800adba:	4499      	add	r9, r3
 800adbc:	e7d3      	b.n	800ad66 <__cvt+0x6a>
 800adbe:	1c59      	adds	r1, r3, #1
 800adc0:	9103      	str	r1, [sp, #12]
 800adc2:	701a      	strb	r2, [r3, #0]
 800adc4:	e7d9      	b.n	800ad7a <__cvt+0x7e>

0800adc6 <__exponent>:
 800adc6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adc8:	2900      	cmp	r1, #0
 800adca:	bfba      	itte	lt
 800adcc:	4249      	neglt	r1, r1
 800adce:	232d      	movlt	r3, #45	@ 0x2d
 800add0:	232b      	movge	r3, #43	@ 0x2b
 800add2:	2909      	cmp	r1, #9
 800add4:	7002      	strb	r2, [r0, #0]
 800add6:	7043      	strb	r3, [r0, #1]
 800add8:	dd29      	ble.n	800ae2e <__exponent+0x68>
 800adda:	f10d 0307 	add.w	r3, sp, #7
 800adde:	461d      	mov	r5, r3
 800ade0:	270a      	movs	r7, #10
 800ade2:	461a      	mov	r2, r3
 800ade4:	fbb1 f6f7 	udiv	r6, r1, r7
 800ade8:	fb07 1416 	mls	r4, r7, r6, r1
 800adec:	3430      	adds	r4, #48	@ 0x30
 800adee:	f802 4c01 	strb.w	r4, [r2, #-1]
 800adf2:	460c      	mov	r4, r1
 800adf4:	2c63      	cmp	r4, #99	@ 0x63
 800adf6:	f103 33ff 	add.w	r3, r3, #4294967295
 800adfa:	4631      	mov	r1, r6
 800adfc:	dcf1      	bgt.n	800ade2 <__exponent+0x1c>
 800adfe:	3130      	adds	r1, #48	@ 0x30
 800ae00:	1e94      	subs	r4, r2, #2
 800ae02:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ae06:	1c41      	adds	r1, r0, #1
 800ae08:	4623      	mov	r3, r4
 800ae0a:	42ab      	cmp	r3, r5
 800ae0c:	d30a      	bcc.n	800ae24 <__exponent+0x5e>
 800ae0e:	f10d 0309 	add.w	r3, sp, #9
 800ae12:	1a9b      	subs	r3, r3, r2
 800ae14:	42ac      	cmp	r4, r5
 800ae16:	bf88      	it	hi
 800ae18:	2300      	movhi	r3, #0
 800ae1a:	3302      	adds	r3, #2
 800ae1c:	4403      	add	r3, r0
 800ae1e:	1a18      	subs	r0, r3, r0
 800ae20:	b003      	add	sp, #12
 800ae22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae24:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ae28:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ae2c:	e7ed      	b.n	800ae0a <__exponent+0x44>
 800ae2e:	2330      	movs	r3, #48	@ 0x30
 800ae30:	3130      	adds	r1, #48	@ 0x30
 800ae32:	7083      	strb	r3, [r0, #2]
 800ae34:	70c1      	strb	r1, [r0, #3]
 800ae36:	1d03      	adds	r3, r0, #4
 800ae38:	e7f1      	b.n	800ae1e <__exponent+0x58>
	...

0800ae3c <_printf_float>:
 800ae3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae40:	b08d      	sub	sp, #52	@ 0x34
 800ae42:	460c      	mov	r4, r1
 800ae44:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ae48:	4616      	mov	r6, r2
 800ae4a:	461f      	mov	r7, r3
 800ae4c:	4605      	mov	r5, r0
 800ae4e:	f000 fd25 	bl	800b89c <_localeconv_r>
 800ae52:	6803      	ldr	r3, [r0, #0]
 800ae54:	9304      	str	r3, [sp, #16]
 800ae56:	4618      	mov	r0, r3
 800ae58:	f7f5 fa0a 	bl	8000270 <strlen>
 800ae5c:	2300      	movs	r3, #0
 800ae5e:	930a      	str	r3, [sp, #40]	@ 0x28
 800ae60:	f8d8 3000 	ldr.w	r3, [r8]
 800ae64:	9005      	str	r0, [sp, #20]
 800ae66:	3307      	adds	r3, #7
 800ae68:	f023 0307 	bic.w	r3, r3, #7
 800ae6c:	f103 0208 	add.w	r2, r3, #8
 800ae70:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae74:	f8d4 b000 	ldr.w	fp, [r4]
 800ae78:	f8c8 2000 	str.w	r2, [r8]
 800ae7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae80:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae84:	9307      	str	r3, [sp, #28]
 800ae86:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae8a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae8e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae92:	4b9c      	ldr	r3, [pc, #624]	@ (800b104 <_printf_float+0x2c8>)
 800ae94:	f04f 32ff 	mov.w	r2, #4294967295
 800ae98:	f7f5 fe48 	bl	8000b2c <__aeabi_dcmpun>
 800ae9c:	bb70      	cbnz	r0, 800aefc <_printf_float+0xc0>
 800ae9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800aea2:	4b98      	ldr	r3, [pc, #608]	@ (800b104 <_printf_float+0x2c8>)
 800aea4:	f04f 32ff 	mov.w	r2, #4294967295
 800aea8:	f7f5 fe22 	bl	8000af0 <__aeabi_dcmple>
 800aeac:	bb30      	cbnz	r0, 800aefc <_printf_float+0xc0>
 800aeae:	2200      	movs	r2, #0
 800aeb0:	2300      	movs	r3, #0
 800aeb2:	4640      	mov	r0, r8
 800aeb4:	4649      	mov	r1, r9
 800aeb6:	f7f5 fe11 	bl	8000adc <__aeabi_dcmplt>
 800aeba:	b110      	cbz	r0, 800aec2 <_printf_float+0x86>
 800aebc:	232d      	movs	r3, #45	@ 0x2d
 800aebe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800aec2:	4a91      	ldr	r2, [pc, #580]	@ (800b108 <_printf_float+0x2cc>)
 800aec4:	4b91      	ldr	r3, [pc, #580]	@ (800b10c <_printf_float+0x2d0>)
 800aec6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800aeca:	bf94      	ite	ls
 800aecc:	4690      	movls	r8, r2
 800aece:	4698      	movhi	r8, r3
 800aed0:	2303      	movs	r3, #3
 800aed2:	6123      	str	r3, [r4, #16]
 800aed4:	f02b 0304 	bic.w	r3, fp, #4
 800aed8:	6023      	str	r3, [r4, #0]
 800aeda:	f04f 0900 	mov.w	r9, #0
 800aede:	9700      	str	r7, [sp, #0]
 800aee0:	4633      	mov	r3, r6
 800aee2:	aa0b      	add	r2, sp, #44	@ 0x2c
 800aee4:	4621      	mov	r1, r4
 800aee6:	4628      	mov	r0, r5
 800aee8:	f000 f9d2 	bl	800b290 <_printf_common>
 800aeec:	3001      	adds	r0, #1
 800aeee:	f040 808d 	bne.w	800b00c <_printf_float+0x1d0>
 800aef2:	f04f 30ff 	mov.w	r0, #4294967295
 800aef6:	b00d      	add	sp, #52	@ 0x34
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	4642      	mov	r2, r8
 800aefe:	464b      	mov	r3, r9
 800af00:	4640      	mov	r0, r8
 800af02:	4649      	mov	r1, r9
 800af04:	f7f5 fe12 	bl	8000b2c <__aeabi_dcmpun>
 800af08:	b140      	cbz	r0, 800af1c <_printf_float+0xe0>
 800af0a:	464b      	mov	r3, r9
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bfbc      	itt	lt
 800af10:	232d      	movlt	r3, #45	@ 0x2d
 800af12:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800af16:	4a7e      	ldr	r2, [pc, #504]	@ (800b110 <_printf_float+0x2d4>)
 800af18:	4b7e      	ldr	r3, [pc, #504]	@ (800b114 <_printf_float+0x2d8>)
 800af1a:	e7d4      	b.n	800aec6 <_printf_float+0x8a>
 800af1c:	6863      	ldr	r3, [r4, #4]
 800af1e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800af22:	9206      	str	r2, [sp, #24]
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	d13b      	bne.n	800afa0 <_printf_float+0x164>
 800af28:	2306      	movs	r3, #6
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800af30:	2300      	movs	r3, #0
 800af32:	6022      	str	r2, [r4, #0]
 800af34:	9303      	str	r3, [sp, #12]
 800af36:	ab0a      	add	r3, sp, #40	@ 0x28
 800af38:	e9cd a301 	strd	sl, r3, [sp, #4]
 800af3c:	ab09      	add	r3, sp, #36	@ 0x24
 800af3e:	9300      	str	r3, [sp, #0]
 800af40:	6861      	ldr	r1, [r4, #4]
 800af42:	ec49 8b10 	vmov	d0, r8, r9
 800af46:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800af4a:	4628      	mov	r0, r5
 800af4c:	f7ff fed6 	bl	800acfc <__cvt>
 800af50:	9b06      	ldr	r3, [sp, #24]
 800af52:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800af54:	2b47      	cmp	r3, #71	@ 0x47
 800af56:	4680      	mov	r8, r0
 800af58:	d129      	bne.n	800afae <_printf_float+0x172>
 800af5a:	1cc8      	adds	r0, r1, #3
 800af5c:	db02      	blt.n	800af64 <_printf_float+0x128>
 800af5e:	6863      	ldr	r3, [r4, #4]
 800af60:	4299      	cmp	r1, r3
 800af62:	dd41      	ble.n	800afe8 <_printf_float+0x1ac>
 800af64:	f1aa 0a02 	sub.w	sl, sl, #2
 800af68:	fa5f fa8a 	uxtb.w	sl, sl
 800af6c:	3901      	subs	r1, #1
 800af6e:	4652      	mov	r2, sl
 800af70:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af74:	9109      	str	r1, [sp, #36]	@ 0x24
 800af76:	f7ff ff26 	bl	800adc6 <__exponent>
 800af7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af7c:	1813      	adds	r3, r2, r0
 800af7e:	2a01      	cmp	r2, #1
 800af80:	4681      	mov	r9, r0
 800af82:	6123      	str	r3, [r4, #16]
 800af84:	dc02      	bgt.n	800af8c <_printf_float+0x150>
 800af86:	6822      	ldr	r2, [r4, #0]
 800af88:	07d2      	lsls	r2, r2, #31
 800af8a:	d501      	bpl.n	800af90 <_printf_float+0x154>
 800af8c:	3301      	adds	r3, #1
 800af8e:	6123      	str	r3, [r4, #16]
 800af90:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af94:	2b00      	cmp	r3, #0
 800af96:	d0a2      	beq.n	800aede <_printf_float+0xa2>
 800af98:	232d      	movs	r3, #45	@ 0x2d
 800af9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af9e:	e79e      	b.n	800aede <_printf_float+0xa2>
 800afa0:	9a06      	ldr	r2, [sp, #24]
 800afa2:	2a47      	cmp	r2, #71	@ 0x47
 800afa4:	d1c2      	bne.n	800af2c <_printf_float+0xf0>
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d1c0      	bne.n	800af2c <_printf_float+0xf0>
 800afaa:	2301      	movs	r3, #1
 800afac:	e7bd      	b.n	800af2a <_printf_float+0xee>
 800afae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afb2:	d9db      	bls.n	800af6c <_printf_float+0x130>
 800afb4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800afb8:	d118      	bne.n	800afec <_printf_float+0x1b0>
 800afba:	2900      	cmp	r1, #0
 800afbc:	6863      	ldr	r3, [r4, #4]
 800afbe:	dd0b      	ble.n	800afd8 <_printf_float+0x19c>
 800afc0:	6121      	str	r1, [r4, #16]
 800afc2:	b913      	cbnz	r3, 800afca <_printf_float+0x18e>
 800afc4:	6822      	ldr	r2, [r4, #0]
 800afc6:	07d0      	lsls	r0, r2, #31
 800afc8:	d502      	bpl.n	800afd0 <_printf_float+0x194>
 800afca:	3301      	adds	r3, #1
 800afcc:	440b      	add	r3, r1
 800afce:	6123      	str	r3, [r4, #16]
 800afd0:	65a1      	str	r1, [r4, #88]	@ 0x58
 800afd2:	f04f 0900 	mov.w	r9, #0
 800afd6:	e7db      	b.n	800af90 <_printf_float+0x154>
 800afd8:	b913      	cbnz	r3, 800afe0 <_printf_float+0x1a4>
 800afda:	6822      	ldr	r2, [r4, #0]
 800afdc:	07d2      	lsls	r2, r2, #31
 800afde:	d501      	bpl.n	800afe4 <_printf_float+0x1a8>
 800afe0:	3302      	adds	r3, #2
 800afe2:	e7f4      	b.n	800afce <_printf_float+0x192>
 800afe4:	2301      	movs	r3, #1
 800afe6:	e7f2      	b.n	800afce <_printf_float+0x192>
 800afe8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800afec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800afee:	4299      	cmp	r1, r3
 800aff0:	db05      	blt.n	800affe <_printf_float+0x1c2>
 800aff2:	6823      	ldr	r3, [r4, #0]
 800aff4:	6121      	str	r1, [r4, #16]
 800aff6:	07d8      	lsls	r0, r3, #31
 800aff8:	d5ea      	bpl.n	800afd0 <_printf_float+0x194>
 800affa:	1c4b      	adds	r3, r1, #1
 800affc:	e7e7      	b.n	800afce <_printf_float+0x192>
 800affe:	2900      	cmp	r1, #0
 800b000:	bfd4      	ite	le
 800b002:	f1c1 0202 	rsble	r2, r1, #2
 800b006:	2201      	movgt	r2, #1
 800b008:	4413      	add	r3, r2
 800b00a:	e7e0      	b.n	800afce <_printf_float+0x192>
 800b00c:	6823      	ldr	r3, [r4, #0]
 800b00e:	055a      	lsls	r2, r3, #21
 800b010:	d407      	bmi.n	800b022 <_printf_float+0x1e6>
 800b012:	6923      	ldr	r3, [r4, #16]
 800b014:	4642      	mov	r2, r8
 800b016:	4631      	mov	r1, r6
 800b018:	4628      	mov	r0, r5
 800b01a:	47b8      	blx	r7
 800b01c:	3001      	adds	r0, #1
 800b01e:	d12b      	bne.n	800b078 <_printf_float+0x23c>
 800b020:	e767      	b.n	800aef2 <_printf_float+0xb6>
 800b022:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800b026:	f240 80dd 	bls.w	800b1e4 <_printf_float+0x3a8>
 800b02a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b02e:	2200      	movs	r2, #0
 800b030:	2300      	movs	r3, #0
 800b032:	f7f5 fd49 	bl	8000ac8 <__aeabi_dcmpeq>
 800b036:	2800      	cmp	r0, #0
 800b038:	d033      	beq.n	800b0a2 <_printf_float+0x266>
 800b03a:	4a37      	ldr	r2, [pc, #220]	@ (800b118 <_printf_float+0x2dc>)
 800b03c:	2301      	movs	r3, #1
 800b03e:	4631      	mov	r1, r6
 800b040:	4628      	mov	r0, r5
 800b042:	47b8      	blx	r7
 800b044:	3001      	adds	r0, #1
 800b046:	f43f af54 	beq.w	800aef2 <_printf_float+0xb6>
 800b04a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800b04e:	4543      	cmp	r3, r8
 800b050:	db02      	blt.n	800b058 <_printf_float+0x21c>
 800b052:	6823      	ldr	r3, [r4, #0]
 800b054:	07d8      	lsls	r0, r3, #31
 800b056:	d50f      	bpl.n	800b078 <_printf_float+0x23c>
 800b058:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b05c:	4631      	mov	r1, r6
 800b05e:	4628      	mov	r0, r5
 800b060:	47b8      	blx	r7
 800b062:	3001      	adds	r0, #1
 800b064:	f43f af45 	beq.w	800aef2 <_printf_float+0xb6>
 800b068:	f04f 0900 	mov.w	r9, #0
 800b06c:	f108 38ff 	add.w	r8, r8, #4294967295
 800b070:	f104 0a1a 	add.w	sl, r4, #26
 800b074:	45c8      	cmp	r8, r9
 800b076:	dc09      	bgt.n	800b08c <_printf_float+0x250>
 800b078:	6823      	ldr	r3, [r4, #0]
 800b07a:	079b      	lsls	r3, r3, #30
 800b07c:	f100 8103 	bmi.w	800b286 <_printf_float+0x44a>
 800b080:	68e0      	ldr	r0, [r4, #12]
 800b082:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b084:	4298      	cmp	r0, r3
 800b086:	bfb8      	it	lt
 800b088:	4618      	movlt	r0, r3
 800b08a:	e734      	b.n	800aef6 <_printf_float+0xba>
 800b08c:	2301      	movs	r3, #1
 800b08e:	4652      	mov	r2, sl
 800b090:	4631      	mov	r1, r6
 800b092:	4628      	mov	r0, r5
 800b094:	47b8      	blx	r7
 800b096:	3001      	adds	r0, #1
 800b098:	f43f af2b 	beq.w	800aef2 <_printf_float+0xb6>
 800b09c:	f109 0901 	add.w	r9, r9, #1
 800b0a0:	e7e8      	b.n	800b074 <_printf_float+0x238>
 800b0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	dc39      	bgt.n	800b11c <_printf_float+0x2e0>
 800b0a8:	4a1b      	ldr	r2, [pc, #108]	@ (800b118 <_printf_float+0x2dc>)
 800b0aa:	2301      	movs	r3, #1
 800b0ac:	4631      	mov	r1, r6
 800b0ae:	4628      	mov	r0, r5
 800b0b0:	47b8      	blx	r7
 800b0b2:	3001      	adds	r0, #1
 800b0b4:	f43f af1d 	beq.w	800aef2 <_printf_float+0xb6>
 800b0b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b0bc:	ea59 0303 	orrs.w	r3, r9, r3
 800b0c0:	d102      	bne.n	800b0c8 <_printf_float+0x28c>
 800b0c2:	6823      	ldr	r3, [r4, #0]
 800b0c4:	07d9      	lsls	r1, r3, #31
 800b0c6:	d5d7      	bpl.n	800b078 <_printf_float+0x23c>
 800b0c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	47b8      	blx	r7
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	f43f af0d 	beq.w	800aef2 <_printf_float+0xb6>
 800b0d8:	f04f 0a00 	mov.w	sl, #0
 800b0dc:	f104 0b1a 	add.w	fp, r4, #26
 800b0e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e2:	425b      	negs	r3, r3
 800b0e4:	4553      	cmp	r3, sl
 800b0e6:	dc01      	bgt.n	800b0ec <_printf_float+0x2b0>
 800b0e8:	464b      	mov	r3, r9
 800b0ea:	e793      	b.n	800b014 <_printf_float+0x1d8>
 800b0ec:	2301      	movs	r3, #1
 800b0ee:	465a      	mov	r2, fp
 800b0f0:	4631      	mov	r1, r6
 800b0f2:	4628      	mov	r0, r5
 800b0f4:	47b8      	blx	r7
 800b0f6:	3001      	adds	r0, #1
 800b0f8:	f43f aefb 	beq.w	800aef2 <_printf_float+0xb6>
 800b0fc:	f10a 0a01 	add.w	sl, sl, #1
 800b100:	e7ee      	b.n	800b0e0 <_printf_float+0x2a4>
 800b102:	bf00      	nop
 800b104:	7fefffff 	.word	0x7fefffff
 800b108:	0800e21b 	.word	0x0800e21b
 800b10c:	0800e21f 	.word	0x0800e21f
 800b110:	0800e223 	.word	0x0800e223
 800b114:	0800e227 	.word	0x0800e227
 800b118:	0800e22b 	.word	0x0800e22b
 800b11c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b11e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b122:	4553      	cmp	r3, sl
 800b124:	bfa8      	it	ge
 800b126:	4653      	movge	r3, sl
 800b128:	2b00      	cmp	r3, #0
 800b12a:	4699      	mov	r9, r3
 800b12c:	dc36      	bgt.n	800b19c <_printf_float+0x360>
 800b12e:	f04f 0b00 	mov.w	fp, #0
 800b132:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b136:	f104 021a 	add.w	r2, r4, #26
 800b13a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b13c:	9306      	str	r3, [sp, #24]
 800b13e:	eba3 0309 	sub.w	r3, r3, r9
 800b142:	455b      	cmp	r3, fp
 800b144:	dc31      	bgt.n	800b1aa <_printf_float+0x36e>
 800b146:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b148:	459a      	cmp	sl, r3
 800b14a:	dc3a      	bgt.n	800b1c2 <_printf_float+0x386>
 800b14c:	6823      	ldr	r3, [r4, #0]
 800b14e:	07da      	lsls	r2, r3, #31
 800b150:	d437      	bmi.n	800b1c2 <_printf_float+0x386>
 800b152:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b154:	ebaa 0903 	sub.w	r9, sl, r3
 800b158:	9b06      	ldr	r3, [sp, #24]
 800b15a:	ebaa 0303 	sub.w	r3, sl, r3
 800b15e:	4599      	cmp	r9, r3
 800b160:	bfa8      	it	ge
 800b162:	4699      	movge	r9, r3
 800b164:	f1b9 0f00 	cmp.w	r9, #0
 800b168:	dc33      	bgt.n	800b1d2 <_printf_float+0x396>
 800b16a:	f04f 0800 	mov.w	r8, #0
 800b16e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b172:	f104 0b1a 	add.w	fp, r4, #26
 800b176:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b178:	ebaa 0303 	sub.w	r3, sl, r3
 800b17c:	eba3 0309 	sub.w	r3, r3, r9
 800b180:	4543      	cmp	r3, r8
 800b182:	f77f af79 	ble.w	800b078 <_printf_float+0x23c>
 800b186:	2301      	movs	r3, #1
 800b188:	465a      	mov	r2, fp
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	47b8      	blx	r7
 800b190:	3001      	adds	r0, #1
 800b192:	f43f aeae 	beq.w	800aef2 <_printf_float+0xb6>
 800b196:	f108 0801 	add.w	r8, r8, #1
 800b19a:	e7ec      	b.n	800b176 <_printf_float+0x33a>
 800b19c:	4642      	mov	r2, r8
 800b19e:	4631      	mov	r1, r6
 800b1a0:	4628      	mov	r0, r5
 800b1a2:	47b8      	blx	r7
 800b1a4:	3001      	adds	r0, #1
 800b1a6:	d1c2      	bne.n	800b12e <_printf_float+0x2f2>
 800b1a8:	e6a3      	b.n	800aef2 <_printf_float+0xb6>
 800b1aa:	2301      	movs	r3, #1
 800b1ac:	4631      	mov	r1, r6
 800b1ae:	4628      	mov	r0, r5
 800b1b0:	9206      	str	r2, [sp, #24]
 800b1b2:	47b8      	blx	r7
 800b1b4:	3001      	adds	r0, #1
 800b1b6:	f43f ae9c 	beq.w	800aef2 <_printf_float+0xb6>
 800b1ba:	9a06      	ldr	r2, [sp, #24]
 800b1bc:	f10b 0b01 	add.w	fp, fp, #1
 800b1c0:	e7bb      	b.n	800b13a <_printf_float+0x2fe>
 800b1c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d1c0      	bne.n	800b152 <_printf_float+0x316>
 800b1d0:	e68f      	b.n	800aef2 <_printf_float+0xb6>
 800b1d2:	9a06      	ldr	r2, [sp, #24]
 800b1d4:	464b      	mov	r3, r9
 800b1d6:	4442      	add	r2, r8
 800b1d8:	4631      	mov	r1, r6
 800b1da:	4628      	mov	r0, r5
 800b1dc:	47b8      	blx	r7
 800b1de:	3001      	adds	r0, #1
 800b1e0:	d1c3      	bne.n	800b16a <_printf_float+0x32e>
 800b1e2:	e686      	b.n	800aef2 <_printf_float+0xb6>
 800b1e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b1e8:	f1ba 0f01 	cmp.w	sl, #1
 800b1ec:	dc01      	bgt.n	800b1f2 <_printf_float+0x3b6>
 800b1ee:	07db      	lsls	r3, r3, #31
 800b1f0:	d536      	bpl.n	800b260 <_printf_float+0x424>
 800b1f2:	2301      	movs	r3, #1
 800b1f4:	4642      	mov	r2, r8
 800b1f6:	4631      	mov	r1, r6
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	47b8      	blx	r7
 800b1fc:	3001      	adds	r0, #1
 800b1fe:	f43f ae78 	beq.w	800aef2 <_printf_float+0xb6>
 800b202:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b206:	4631      	mov	r1, r6
 800b208:	4628      	mov	r0, r5
 800b20a:	47b8      	blx	r7
 800b20c:	3001      	adds	r0, #1
 800b20e:	f43f ae70 	beq.w	800aef2 <_printf_float+0xb6>
 800b212:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b216:	2200      	movs	r2, #0
 800b218:	2300      	movs	r3, #0
 800b21a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b21e:	f7f5 fc53 	bl	8000ac8 <__aeabi_dcmpeq>
 800b222:	b9c0      	cbnz	r0, 800b256 <_printf_float+0x41a>
 800b224:	4653      	mov	r3, sl
 800b226:	f108 0201 	add.w	r2, r8, #1
 800b22a:	4631      	mov	r1, r6
 800b22c:	4628      	mov	r0, r5
 800b22e:	47b8      	blx	r7
 800b230:	3001      	adds	r0, #1
 800b232:	d10c      	bne.n	800b24e <_printf_float+0x412>
 800b234:	e65d      	b.n	800aef2 <_printf_float+0xb6>
 800b236:	2301      	movs	r3, #1
 800b238:	465a      	mov	r2, fp
 800b23a:	4631      	mov	r1, r6
 800b23c:	4628      	mov	r0, r5
 800b23e:	47b8      	blx	r7
 800b240:	3001      	adds	r0, #1
 800b242:	f43f ae56 	beq.w	800aef2 <_printf_float+0xb6>
 800b246:	f108 0801 	add.w	r8, r8, #1
 800b24a:	45d0      	cmp	r8, sl
 800b24c:	dbf3      	blt.n	800b236 <_printf_float+0x3fa>
 800b24e:	464b      	mov	r3, r9
 800b250:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b254:	e6df      	b.n	800b016 <_printf_float+0x1da>
 800b256:	f04f 0800 	mov.w	r8, #0
 800b25a:	f104 0b1a 	add.w	fp, r4, #26
 800b25e:	e7f4      	b.n	800b24a <_printf_float+0x40e>
 800b260:	2301      	movs	r3, #1
 800b262:	4642      	mov	r2, r8
 800b264:	e7e1      	b.n	800b22a <_printf_float+0x3ee>
 800b266:	2301      	movs	r3, #1
 800b268:	464a      	mov	r2, r9
 800b26a:	4631      	mov	r1, r6
 800b26c:	4628      	mov	r0, r5
 800b26e:	47b8      	blx	r7
 800b270:	3001      	adds	r0, #1
 800b272:	f43f ae3e 	beq.w	800aef2 <_printf_float+0xb6>
 800b276:	f108 0801 	add.w	r8, r8, #1
 800b27a:	68e3      	ldr	r3, [r4, #12]
 800b27c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b27e:	1a5b      	subs	r3, r3, r1
 800b280:	4543      	cmp	r3, r8
 800b282:	dcf0      	bgt.n	800b266 <_printf_float+0x42a>
 800b284:	e6fc      	b.n	800b080 <_printf_float+0x244>
 800b286:	f04f 0800 	mov.w	r8, #0
 800b28a:	f104 0919 	add.w	r9, r4, #25
 800b28e:	e7f4      	b.n	800b27a <_printf_float+0x43e>

0800b290 <_printf_common>:
 800b290:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b294:	4616      	mov	r6, r2
 800b296:	4698      	mov	r8, r3
 800b298:	688a      	ldr	r2, [r1, #8]
 800b29a:	690b      	ldr	r3, [r1, #16]
 800b29c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b2a0:	4293      	cmp	r3, r2
 800b2a2:	bfb8      	it	lt
 800b2a4:	4613      	movlt	r3, r2
 800b2a6:	6033      	str	r3, [r6, #0]
 800b2a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b2ac:	4607      	mov	r7, r0
 800b2ae:	460c      	mov	r4, r1
 800b2b0:	b10a      	cbz	r2, 800b2b6 <_printf_common+0x26>
 800b2b2:	3301      	adds	r3, #1
 800b2b4:	6033      	str	r3, [r6, #0]
 800b2b6:	6823      	ldr	r3, [r4, #0]
 800b2b8:	0699      	lsls	r1, r3, #26
 800b2ba:	bf42      	ittt	mi
 800b2bc:	6833      	ldrmi	r3, [r6, #0]
 800b2be:	3302      	addmi	r3, #2
 800b2c0:	6033      	strmi	r3, [r6, #0]
 800b2c2:	6825      	ldr	r5, [r4, #0]
 800b2c4:	f015 0506 	ands.w	r5, r5, #6
 800b2c8:	d106      	bne.n	800b2d8 <_printf_common+0x48>
 800b2ca:	f104 0a19 	add.w	sl, r4, #25
 800b2ce:	68e3      	ldr	r3, [r4, #12]
 800b2d0:	6832      	ldr	r2, [r6, #0]
 800b2d2:	1a9b      	subs	r3, r3, r2
 800b2d4:	42ab      	cmp	r3, r5
 800b2d6:	dc26      	bgt.n	800b326 <_printf_common+0x96>
 800b2d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b2dc:	6822      	ldr	r2, [r4, #0]
 800b2de:	3b00      	subs	r3, #0
 800b2e0:	bf18      	it	ne
 800b2e2:	2301      	movne	r3, #1
 800b2e4:	0692      	lsls	r2, r2, #26
 800b2e6:	d42b      	bmi.n	800b340 <_printf_common+0xb0>
 800b2e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b2ec:	4641      	mov	r1, r8
 800b2ee:	4638      	mov	r0, r7
 800b2f0:	47c8      	blx	r9
 800b2f2:	3001      	adds	r0, #1
 800b2f4:	d01e      	beq.n	800b334 <_printf_common+0xa4>
 800b2f6:	6823      	ldr	r3, [r4, #0]
 800b2f8:	6922      	ldr	r2, [r4, #16]
 800b2fa:	f003 0306 	and.w	r3, r3, #6
 800b2fe:	2b04      	cmp	r3, #4
 800b300:	bf02      	ittt	eq
 800b302:	68e5      	ldreq	r5, [r4, #12]
 800b304:	6833      	ldreq	r3, [r6, #0]
 800b306:	1aed      	subeq	r5, r5, r3
 800b308:	68a3      	ldr	r3, [r4, #8]
 800b30a:	bf0c      	ite	eq
 800b30c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b310:	2500      	movne	r5, #0
 800b312:	4293      	cmp	r3, r2
 800b314:	bfc4      	itt	gt
 800b316:	1a9b      	subgt	r3, r3, r2
 800b318:	18ed      	addgt	r5, r5, r3
 800b31a:	2600      	movs	r6, #0
 800b31c:	341a      	adds	r4, #26
 800b31e:	42b5      	cmp	r5, r6
 800b320:	d11a      	bne.n	800b358 <_printf_common+0xc8>
 800b322:	2000      	movs	r0, #0
 800b324:	e008      	b.n	800b338 <_printf_common+0xa8>
 800b326:	2301      	movs	r3, #1
 800b328:	4652      	mov	r2, sl
 800b32a:	4641      	mov	r1, r8
 800b32c:	4638      	mov	r0, r7
 800b32e:	47c8      	blx	r9
 800b330:	3001      	adds	r0, #1
 800b332:	d103      	bne.n	800b33c <_printf_common+0xac>
 800b334:	f04f 30ff 	mov.w	r0, #4294967295
 800b338:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b33c:	3501      	adds	r5, #1
 800b33e:	e7c6      	b.n	800b2ce <_printf_common+0x3e>
 800b340:	18e1      	adds	r1, r4, r3
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	2030      	movs	r0, #48	@ 0x30
 800b346:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b34a:	4422      	add	r2, r4
 800b34c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b350:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b354:	3302      	adds	r3, #2
 800b356:	e7c7      	b.n	800b2e8 <_printf_common+0x58>
 800b358:	2301      	movs	r3, #1
 800b35a:	4622      	mov	r2, r4
 800b35c:	4641      	mov	r1, r8
 800b35e:	4638      	mov	r0, r7
 800b360:	47c8      	blx	r9
 800b362:	3001      	adds	r0, #1
 800b364:	d0e6      	beq.n	800b334 <_printf_common+0xa4>
 800b366:	3601      	adds	r6, #1
 800b368:	e7d9      	b.n	800b31e <_printf_common+0x8e>
	...

0800b36c <_printf_i>:
 800b36c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b370:	7e0f      	ldrb	r7, [r1, #24]
 800b372:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b374:	2f78      	cmp	r7, #120	@ 0x78
 800b376:	4691      	mov	r9, r2
 800b378:	4680      	mov	r8, r0
 800b37a:	460c      	mov	r4, r1
 800b37c:	469a      	mov	sl, r3
 800b37e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b382:	d807      	bhi.n	800b394 <_printf_i+0x28>
 800b384:	2f62      	cmp	r7, #98	@ 0x62
 800b386:	d80a      	bhi.n	800b39e <_printf_i+0x32>
 800b388:	2f00      	cmp	r7, #0
 800b38a:	f000 80d2 	beq.w	800b532 <_printf_i+0x1c6>
 800b38e:	2f58      	cmp	r7, #88	@ 0x58
 800b390:	f000 80b9 	beq.w	800b506 <_printf_i+0x19a>
 800b394:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b398:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b39c:	e03a      	b.n	800b414 <_printf_i+0xa8>
 800b39e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b3a2:	2b15      	cmp	r3, #21
 800b3a4:	d8f6      	bhi.n	800b394 <_printf_i+0x28>
 800b3a6:	a101      	add	r1, pc, #4	@ (adr r1, 800b3ac <_printf_i+0x40>)
 800b3a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3ac:	0800b405 	.word	0x0800b405
 800b3b0:	0800b419 	.word	0x0800b419
 800b3b4:	0800b395 	.word	0x0800b395
 800b3b8:	0800b395 	.word	0x0800b395
 800b3bc:	0800b395 	.word	0x0800b395
 800b3c0:	0800b395 	.word	0x0800b395
 800b3c4:	0800b419 	.word	0x0800b419
 800b3c8:	0800b395 	.word	0x0800b395
 800b3cc:	0800b395 	.word	0x0800b395
 800b3d0:	0800b395 	.word	0x0800b395
 800b3d4:	0800b395 	.word	0x0800b395
 800b3d8:	0800b519 	.word	0x0800b519
 800b3dc:	0800b443 	.word	0x0800b443
 800b3e0:	0800b4d3 	.word	0x0800b4d3
 800b3e4:	0800b395 	.word	0x0800b395
 800b3e8:	0800b395 	.word	0x0800b395
 800b3ec:	0800b53b 	.word	0x0800b53b
 800b3f0:	0800b395 	.word	0x0800b395
 800b3f4:	0800b443 	.word	0x0800b443
 800b3f8:	0800b395 	.word	0x0800b395
 800b3fc:	0800b395 	.word	0x0800b395
 800b400:	0800b4db 	.word	0x0800b4db
 800b404:	6833      	ldr	r3, [r6, #0]
 800b406:	1d1a      	adds	r2, r3, #4
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	6032      	str	r2, [r6, #0]
 800b40c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b410:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b414:	2301      	movs	r3, #1
 800b416:	e09d      	b.n	800b554 <_printf_i+0x1e8>
 800b418:	6833      	ldr	r3, [r6, #0]
 800b41a:	6820      	ldr	r0, [r4, #0]
 800b41c:	1d19      	adds	r1, r3, #4
 800b41e:	6031      	str	r1, [r6, #0]
 800b420:	0606      	lsls	r6, r0, #24
 800b422:	d501      	bpl.n	800b428 <_printf_i+0xbc>
 800b424:	681d      	ldr	r5, [r3, #0]
 800b426:	e003      	b.n	800b430 <_printf_i+0xc4>
 800b428:	0645      	lsls	r5, r0, #25
 800b42a:	d5fb      	bpl.n	800b424 <_printf_i+0xb8>
 800b42c:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b430:	2d00      	cmp	r5, #0
 800b432:	da03      	bge.n	800b43c <_printf_i+0xd0>
 800b434:	232d      	movs	r3, #45	@ 0x2d
 800b436:	426d      	negs	r5, r5
 800b438:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b43c:	4859      	ldr	r0, [pc, #356]	@ (800b5a4 <_printf_i+0x238>)
 800b43e:	230a      	movs	r3, #10
 800b440:	e011      	b.n	800b466 <_printf_i+0xfa>
 800b442:	6821      	ldr	r1, [r4, #0]
 800b444:	6833      	ldr	r3, [r6, #0]
 800b446:	0608      	lsls	r0, r1, #24
 800b448:	f853 5b04 	ldr.w	r5, [r3], #4
 800b44c:	d402      	bmi.n	800b454 <_printf_i+0xe8>
 800b44e:	0649      	lsls	r1, r1, #25
 800b450:	bf48      	it	mi
 800b452:	b2ad      	uxthmi	r5, r5
 800b454:	2f6f      	cmp	r7, #111	@ 0x6f
 800b456:	4853      	ldr	r0, [pc, #332]	@ (800b5a4 <_printf_i+0x238>)
 800b458:	6033      	str	r3, [r6, #0]
 800b45a:	bf14      	ite	ne
 800b45c:	230a      	movne	r3, #10
 800b45e:	2308      	moveq	r3, #8
 800b460:	2100      	movs	r1, #0
 800b462:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b466:	6866      	ldr	r6, [r4, #4]
 800b468:	60a6      	str	r6, [r4, #8]
 800b46a:	2e00      	cmp	r6, #0
 800b46c:	bfa2      	ittt	ge
 800b46e:	6821      	ldrge	r1, [r4, #0]
 800b470:	f021 0104 	bicge.w	r1, r1, #4
 800b474:	6021      	strge	r1, [r4, #0]
 800b476:	b90d      	cbnz	r5, 800b47c <_printf_i+0x110>
 800b478:	2e00      	cmp	r6, #0
 800b47a:	d04b      	beq.n	800b514 <_printf_i+0x1a8>
 800b47c:	4616      	mov	r6, r2
 800b47e:	fbb5 f1f3 	udiv	r1, r5, r3
 800b482:	fb03 5711 	mls	r7, r3, r1, r5
 800b486:	5dc7      	ldrb	r7, [r0, r7]
 800b488:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b48c:	462f      	mov	r7, r5
 800b48e:	42bb      	cmp	r3, r7
 800b490:	460d      	mov	r5, r1
 800b492:	d9f4      	bls.n	800b47e <_printf_i+0x112>
 800b494:	2b08      	cmp	r3, #8
 800b496:	d10b      	bne.n	800b4b0 <_printf_i+0x144>
 800b498:	6823      	ldr	r3, [r4, #0]
 800b49a:	07df      	lsls	r7, r3, #31
 800b49c:	d508      	bpl.n	800b4b0 <_printf_i+0x144>
 800b49e:	6923      	ldr	r3, [r4, #16]
 800b4a0:	6861      	ldr	r1, [r4, #4]
 800b4a2:	4299      	cmp	r1, r3
 800b4a4:	bfde      	ittt	le
 800b4a6:	2330      	movle	r3, #48	@ 0x30
 800b4a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b4ac:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b4b0:	1b92      	subs	r2, r2, r6
 800b4b2:	6122      	str	r2, [r4, #16]
 800b4b4:	f8cd a000 	str.w	sl, [sp]
 800b4b8:	464b      	mov	r3, r9
 800b4ba:	aa03      	add	r2, sp, #12
 800b4bc:	4621      	mov	r1, r4
 800b4be:	4640      	mov	r0, r8
 800b4c0:	f7ff fee6 	bl	800b290 <_printf_common>
 800b4c4:	3001      	adds	r0, #1
 800b4c6:	d14a      	bne.n	800b55e <_printf_i+0x1f2>
 800b4c8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4cc:	b004      	add	sp, #16
 800b4ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4d2:	6823      	ldr	r3, [r4, #0]
 800b4d4:	f043 0320 	orr.w	r3, r3, #32
 800b4d8:	6023      	str	r3, [r4, #0]
 800b4da:	4833      	ldr	r0, [pc, #204]	@ (800b5a8 <_printf_i+0x23c>)
 800b4dc:	2778      	movs	r7, #120	@ 0x78
 800b4de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b4e2:	6823      	ldr	r3, [r4, #0]
 800b4e4:	6831      	ldr	r1, [r6, #0]
 800b4e6:	061f      	lsls	r7, r3, #24
 800b4e8:	f851 5b04 	ldr.w	r5, [r1], #4
 800b4ec:	d402      	bmi.n	800b4f4 <_printf_i+0x188>
 800b4ee:	065f      	lsls	r7, r3, #25
 800b4f0:	bf48      	it	mi
 800b4f2:	b2ad      	uxthmi	r5, r5
 800b4f4:	6031      	str	r1, [r6, #0]
 800b4f6:	07d9      	lsls	r1, r3, #31
 800b4f8:	bf44      	itt	mi
 800b4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b4fe:	6023      	strmi	r3, [r4, #0]
 800b500:	b11d      	cbz	r5, 800b50a <_printf_i+0x19e>
 800b502:	2310      	movs	r3, #16
 800b504:	e7ac      	b.n	800b460 <_printf_i+0xf4>
 800b506:	4827      	ldr	r0, [pc, #156]	@ (800b5a4 <_printf_i+0x238>)
 800b508:	e7e9      	b.n	800b4de <_printf_i+0x172>
 800b50a:	6823      	ldr	r3, [r4, #0]
 800b50c:	f023 0320 	bic.w	r3, r3, #32
 800b510:	6023      	str	r3, [r4, #0]
 800b512:	e7f6      	b.n	800b502 <_printf_i+0x196>
 800b514:	4616      	mov	r6, r2
 800b516:	e7bd      	b.n	800b494 <_printf_i+0x128>
 800b518:	6833      	ldr	r3, [r6, #0]
 800b51a:	6825      	ldr	r5, [r4, #0]
 800b51c:	6961      	ldr	r1, [r4, #20]
 800b51e:	1d18      	adds	r0, r3, #4
 800b520:	6030      	str	r0, [r6, #0]
 800b522:	062e      	lsls	r6, r5, #24
 800b524:	681b      	ldr	r3, [r3, #0]
 800b526:	d501      	bpl.n	800b52c <_printf_i+0x1c0>
 800b528:	6019      	str	r1, [r3, #0]
 800b52a:	e002      	b.n	800b532 <_printf_i+0x1c6>
 800b52c:	0668      	lsls	r0, r5, #25
 800b52e:	d5fb      	bpl.n	800b528 <_printf_i+0x1bc>
 800b530:	8019      	strh	r1, [r3, #0]
 800b532:	2300      	movs	r3, #0
 800b534:	6123      	str	r3, [r4, #16]
 800b536:	4616      	mov	r6, r2
 800b538:	e7bc      	b.n	800b4b4 <_printf_i+0x148>
 800b53a:	6833      	ldr	r3, [r6, #0]
 800b53c:	1d1a      	adds	r2, r3, #4
 800b53e:	6032      	str	r2, [r6, #0]
 800b540:	681e      	ldr	r6, [r3, #0]
 800b542:	6862      	ldr	r2, [r4, #4]
 800b544:	2100      	movs	r1, #0
 800b546:	4630      	mov	r0, r6
 800b548:	f7f4 fe42 	bl	80001d0 <memchr>
 800b54c:	b108      	cbz	r0, 800b552 <_printf_i+0x1e6>
 800b54e:	1b80      	subs	r0, r0, r6
 800b550:	6060      	str	r0, [r4, #4]
 800b552:	6863      	ldr	r3, [r4, #4]
 800b554:	6123      	str	r3, [r4, #16]
 800b556:	2300      	movs	r3, #0
 800b558:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b55c:	e7aa      	b.n	800b4b4 <_printf_i+0x148>
 800b55e:	6923      	ldr	r3, [r4, #16]
 800b560:	4632      	mov	r2, r6
 800b562:	4649      	mov	r1, r9
 800b564:	4640      	mov	r0, r8
 800b566:	47d0      	blx	sl
 800b568:	3001      	adds	r0, #1
 800b56a:	d0ad      	beq.n	800b4c8 <_printf_i+0x15c>
 800b56c:	6823      	ldr	r3, [r4, #0]
 800b56e:	079b      	lsls	r3, r3, #30
 800b570:	d413      	bmi.n	800b59a <_printf_i+0x22e>
 800b572:	68e0      	ldr	r0, [r4, #12]
 800b574:	9b03      	ldr	r3, [sp, #12]
 800b576:	4298      	cmp	r0, r3
 800b578:	bfb8      	it	lt
 800b57a:	4618      	movlt	r0, r3
 800b57c:	e7a6      	b.n	800b4cc <_printf_i+0x160>
 800b57e:	2301      	movs	r3, #1
 800b580:	4632      	mov	r2, r6
 800b582:	4649      	mov	r1, r9
 800b584:	4640      	mov	r0, r8
 800b586:	47d0      	blx	sl
 800b588:	3001      	adds	r0, #1
 800b58a:	d09d      	beq.n	800b4c8 <_printf_i+0x15c>
 800b58c:	3501      	adds	r5, #1
 800b58e:	68e3      	ldr	r3, [r4, #12]
 800b590:	9903      	ldr	r1, [sp, #12]
 800b592:	1a5b      	subs	r3, r3, r1
 800b594:	42ab      	cmp	r3, r5
 800b596:	dcf2      	bgt.n	800b57e <_printf_i+0x212>
 800b598:	e7eb      	b.n	800b572 <_printf_i+0x206>
 800b59a:	2500      	movs	r5, #0
 800b59c:	f104 0619 	add.w	r6, r4, #25
 800b5a0:	e7f5      	b.n	800b58e <_printf_i+0x222>
 800b5a2:	bf00      	nop
 800b5a4:	0800e22d 	.word	0x0800e22d
 800b5a8:	0800e23e 	.word	0x0800e23e

0800b5ac <std>:
 800b5ac:	2300      	movs	r3, #0
 800b5ae:	b510      	push	{r4, lr}
 800b5b0:	4604      	mov	r4, r0
 800b5b2:	e9c0 3300 	strd	r3, r3, [r0]
 800b5b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b5ba:	6083      	str	r3, [r0, #8]
 800b5bc:	8181      	strh	r1, [r0, #12]
 800b5be:	6643      	str	r3, [r0, #100]	@ 0x64
 800b5c0:	81c2      	strh	r2, [r0, #14]
 800b5c2:	6183      	str	r3, [r0, #24]
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	305c      	adds	r0, #92	@ 0x5c
 800b5ca:	f000 f92e 	bl	800b82a <memset>
 800b5ce:	4b0d      	ldr	r3, [pc, #52]	@ (800b604 <std+0x58>)
 800b5d0:	6263      	str	r3, [r4, #36]	@ 0x24
 800b5d2:	4b0d      	ldr	r3, [pc, #52]	@ (800b608 <std+0x5c>)
 800b5d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b5d6:	4b0d      	ldr	r3, [pc, #52]	@ (800b60c <std+0x60>)
 800b5d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b5da:	4b0d      	ldr	r3, [pc, #52]	@ (800b610 <std+0x64>)
 800b5dc:	6323      	str	r3, [r4, #48]	@ 0x30
 800b5de:	4b0d      	ldr	r3, [pc, #52]	@ (800b614 <std+0x68>)
 800b5e0:	6224      	str	r4, [r4, #32]
 800b5e2:	429c      	cmp	r4, r3
 800b5e4:	d006      	beq.n	800b5f4 <std+0x48>
 800b5e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b5ea:	4294      	cmp	r4, r2
 800b5ec:	d002      	beq.n	800b5f4 <std+0x48>
 800b5ee:	33d0      	adds	r3, #208	@ 0xd0
 800b5f0:	429c      	cmp	r4, r3
 800b5f2:	d105      	bne.n	800b600 <std+0x54>
 800b5f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b5f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5fc:	f000 b9e6 	b.w	800b9cc <__retarget_lock_init_recursive>
 800b600:	bd10      	pop	{r4, pc}
 800b602:	bf00      	nop
 800b604:	0800b771 	.word	0x0800b771
 800b608:	0800b793 	.word	0x0800b793
 800b60c:	0800b7cb 	.word	0x0800b7cb
 800b610:	0800b7ef 	.word	0x0800b7ef
 800b614:	200008f8 	.word	0x200008f8

0800b618 <stdio_exit_handler>:
 800b618:	4a02      	ldr	r2, [pc, #8]	@ (800b624 <stdio_exit_handler+0xc>)
 800b61a:	4903      	ldr	r1, [pc, #12]	@ (800b628 <stdio_exit_handler+0x10>)
 800b61c:	4803      	ldr	r0, [pc, #12]	@ (800b62c <stdio_exit_handler+0x14>)
 800b61e:	f000 b869 	b.w	800b6f4 <_fwalk_sglue>
 800b622:	bf00      	nop
 800b624:	20000010 	.word	0x20000010
 800b628:	0800d1e9 	.word	0x0800d1e9
 800b62c:	20000020 	.word	0x20000020

0800b630 <cleanup_stdio>:
 800b630:	6841      	ldr	r1, [r0, #4]
 800b632:	4b0c      	ldr	r3, [pc, #48]	@ (800b664 <cleanup_stdio+0x34>)
 800b634:	4299      	cmp	r1, r3
 800b636:	b510      	push	{r4, lr}
 800b638:	4604      	mov	r4, r0
 800b63a:	d001      	beq.n	800b640 <cleanup_stdio+0x10>
 800b63c:	f001 fdd4 	bl	800d1e8 <_fflush_r>
 800b640:	68a1      	ldr	r1, [r4, #8]
 800b642:	4b09      	ldr	r3, [pc, #36]	@ (800b668 <cleanup_stdio+0x38>)
 800b644:	4299      	cmp	r1, r3
 800b646:	d002      	beq.n	800b64e <cleanup_stdio+0x1e>
 800b648:	4620      	mov	r0, r4
 800b64a:	f001 fdcd 	bl	800d1e8 <_fflush_r>
 800b64e:	68e1      	ldr	r1, [r4, #12]
 800b650:	4b06      	ldr	r3, [pc, #24]	@ (800b66c <cleanup_stdio+0x3c>)
 800b652:	4299      	cmp	r1, r3
 800b654:	d004      	beq.n	800b660 <cleanup_stdio+0x30>
 800b656:	4620      	mov	r0, r4
 800b658:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b65c:	f001 bdc4 	b.w	800d1e8 <_fflush_r>
 800b660:	bd10      	pop	{r4, pc}
 800b662:	bf00      	nop
 800b664:	200008f8 	.word	0x200008f8
 800b668:	20000960 	.word	0x20000960
 800b66c:	200009c8 	.word	0x200009c8

0800b670 <global_stdio_init.part.0>:
 800b670:	b510      	push	{r4, lr}
 800b672:	4b0b      	ldr	r3, [pc, #44]	@ (800b6a0 <global_stdio_init.part.0+0x30>)
 800b674:	4c0b      	ldr	r4, [pc, #44]	@ (800b6a4 <global_stdio_init.part.0+0x34>)
 800b676:	4a0c      	ldr	r2, [pc, #48]	@ (800b6a8 <global_stdio_init.part.0+0x38>)
 800b678:	601a      	str	r2, [r3, #0]
 800b67a:	4620      	mov	r0, r4
 800b67c:	2200      	movs	r2, #0
 800b67e:	2104      	movs	r1, #4
 800b680:	f7ff ff94 	bl	800b5ac <std>
 800b684:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b688:	2201      	movs	r2, #1
 800b68a:	2109      	movs	r1, #9
 800b68c:	f7ff ff8e 	bl	800b5ac <std>
 800b690:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b694:	2202      	movs	r2, #2
 800b696:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b69a:	2112      	movs	r1, #18
 800b69c:	f7ff bf86 	b.w	800b5ac <std>
 800b6a0:	20000a30 	.word	0x20000a30
 800b6a4:	200008f8 	.word	0x200008f8
 800b6a8:	0800b619 	.word	0x0800b619

0800b6ac <__sfp_lock_acquire>:
 800b6ac:	4801      	ldr	r0, [pc, #4]	@ (800b6b4 <__sfp_lock_acquire+0x8>)
 800b6ae:	f000 b98e 	b.w	800b9ce <__retarget_lock_acquire_recursive>
 800b6b2:	bf00      	nop
 800b6b4:	20000a39 	.word	0x20000a39

0800b6b8 <__sfp_lock_release>:
 800b6b8:	4801      	ldr	r0, [pc, #4]	@ (800b6c0 <__sfp_lock_release+0x8>)
 800b6ba:	f000 b989 	b.w	800b9d0 <__retarget_lock_release_recursive>
 800b6be:	bf00      	nop
 800b6c0:	20000a39 	.word	0x20000a39

0800b6c4 <__sinit>:
 800b6c4:	b510      	push	{r4, lr}
 800b6c6:	4604      	mov	r4, r0
 800b6c8:	f7ff fff0 	bl	800b6ac <__sfp_lock_acquire>
 800b6cc:	6a23      	ldr	r3, [r4, #32]
 800b6ce:	b11b      	cbz	r3, 800b6d8 <__sinit+0x14>
 800b6d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b6d4:	f7ff bff0 	b.w	800b6b8 <__sfp_lock_release>
 800b6d8:	4b04      	ldr	r3, [pc, #16]	@ (800b6ec <__sinit+0x28>)
 800b6da:	6223      	str	r3, [r4, #32]
 800b6dc:	4b04      	ldr	r3, [pc, #16]	@ (800b6f0 <__sinit+0x2c>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d1f5      	bne.n	800b6d0 <__sinit+0xc>
 800b6e4:	f7ff ffc4 	bl	800b670 <global_stdio_init.part.0>
 800b6e8:	e7f2      	b.n	800b6d0 <__sinit+0xc>
 800b6ea:	bf00      	nop
 800b6ec:	0800b631 	.word	0x0800b631
 800b6f0:	20000a30 	.word	0x20000a30

0800b6f4 <_fwalk_sglue>:
 800b6f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b6f8:	4607      	mov	r7, r0
 800b6fa:	4688      	mov	r8, r1
 800b6fc:	4614      	mov	r4, r2
 800b6fe:	2600      	movs	r6, #0
 800b700:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b704:	f1b9 0901 	subs.w	r9, r9, #1
 800b708:	d505      	bpl.n	800b716 <_fwalk_sglue+0x22>
 800b70a:	6824      	ldr	r4, [r4, #0]
 800b70c:	2c00      	cmp	r4, #0
 800b70e:	d1f7      	bne.n	800b700 <_fwalk_sglue+0xc>
 800b710:	4630      	mov	r0, r6
 800b712:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b716:	89ab      	ldrh	r3, [r5, #12]
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d907      	bls.n	800b72c <_fwalk_sglue+0x38>
 800b71c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b720:	3301      	adds	r3, #1
 800b722:	d003      	beq.n	800b72c <_fwalk_sglue+0x38>
 800b724:	4629      	mov	r1, r5
 800b726:	4638      	mov	r0, r7
 800b728:	47c0      	blx	r8
 800b72a:	4306      	orrs	r6, r0
 800b72c:	3568      	adds	r5, #104	@ 0x68
 800b72e:	e7e9      	b.n	800b704 <_fwalk_sglue+0x10>

0800b730 <siprintf>:
 800b730:	b40e      	push	{r1, r2, r3}
 800b732:	b500      	push	{lr}
 800b734:	b09c      	sub	sp, #112	@ 0x70
 800b736:	ab1d      	add	r3, sp, #116	@ 0x74
 800b738:	9002      	str	r0, [sp, #8]
 800b73a:	9006      	str	r0, [sp, #24]
 800b73c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800b740:	4809      	ldr	r0, [pc, #36]	@ (800b768 <siprintf+0x38>)
 800b742:	9107      	str	r1, [sp, #28]
 800b744:	9104      	str	r1, [sp, #16]
 800b746:	4909      	ldr	r1, [pc, #36]	@ (800b76c <siprintf+0x3c>)
 800b748:	f853 2b04 	ldr.w	r2, [r3], #4
 800b74c:	9105      	str	r1, [sp, #20]
 800b74e:	6800      	ldr	r0, [r0, #0]
 800b750:	9301      	str	r3, [sp, #4]
 800b752:	a902      	add	r1, sp, #8
 800b754:	f001 fbc8 	bl	800cee8 <_svfiprintf_r>
 800b758:	9b02      	ldr	r3, [sp, #8]
 800b75a:	2200      	movs	r2, #0
 800b75c:	701a      	strb	r2, [r3, #0]
 800b75e:	b01c      	add	sp, #112	@ 0x70
 800b760:	f85d eb04 	ldr.w	lr, [sp], #4
 800b764:	b003      	add	sp, #12
 800b766:	4770      	bx	lr
 800b768:	2000001c 	.word	0x2000001c
 800b76c:	ffff0208 	.word	0xffff0208

0800b770 <__sread>:
 800b770:	b510      	push	{r4, lr}
 800b772:	460c      	mov	r4, r1
 800b774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b778:	f000 f8b6 	bl	800b8e8 <_read_r>
 800b77c:	2800      	cmp	r0, #0
 800b77e:	bfab      	itete	ge
 800b780:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b782:	89a3      	ldrhlt	r3, [r4, #12]
 800b784:	181b      	addge	r3, r3, r0
 800b786:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b78a:	bfac      	ite	ge
 800b78c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b78e:	81a3      	strhlt	r3, [r4, #12]
 800b790:	bd10      	pop	{r4, pc}

0800b792 <__swrite>:
 800b792:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b796:	461f      	mov	r7, r3
 800b798:	898b      	ldrh	r3, [r1, #12]
 800b79a:	05db      	lsls	r3, r3, #23
 800b79c:	4605      	mov	r5, r0
 800b79e:	460c      	mov	r4, r1
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	d505      	bpl.n	800b7b0 <__swrite+0x1e>
 800b7a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7a8:	2302      	movs	r3, #2
 800b7aa:	2200      	movs	r2, #0
 800b7ac:	f000 f88a 	bl	800b8c4 <_lseek_r>
 800b7b0:	89a3      	ldrh	r3, [r4, #12]
 800b7b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b7b6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b7ba:	81a3      	strh	r3, [r4, #12]
 800b7bc:	4632      	mov	r2, r6
 800b7be:	463b      	mov	r3, r7
 800b7c0:	4628      	mov	r0, r5
 800b7c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b7c6:	f000 b8c5 	b.w	800b954 <_write_r>

0800b7ca <__sseek>:
 800b7ca:	b510      	push	{r4, lr}
 800b7cc:	460c      	mov	r4, r1
 800b7ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7d2:	f000 f877 	bl	800b8c4 <_lseek_r>
 800b7d6:	1c43      	adds	r3, r0, #1
 800b7d8:	89a3      	ldrh	r3, [r4, #12]
 800b7da:	bf15      	itete	ne
 800b7dc:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b7de:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b7e2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b7e6:	81a3      	strheq	r3, [r4, #12]
 800b7e8:	bf18      	it	ne
 800b7ea:	81a3      	strhne	r3, [r4, #12]
 800b7ec:	bd10      	pop	{r4, pc}

0800b7ee <__sclose>:
 800b7ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b7f2:	f000 b857 	b.w	800b8a4 <_close_r>

0800b7f6 <memmove>:
 800b7f6:	4288      	cmp	r0, r1
 800b7f8:	b510      	push	{r4, lr}
 800b7fa:	eb01 0402 	add.w	r4, r1, r2
 800b7fe:	d902      	bls.n	800b806 <memmove+0x10>
 800b800:	4284      	cmp	r4, r0
 800b802:	4623      	mov	r3, r4
 800b804:	d807      	bhi.n	800b816 <memmove+0x20>
 800b806:	1e43      	subs	r3, r0, #1
 800b808:	42a1      	cmp	r1, r4
 800b80a:	d008      	beq.n	800b81e <memmove+0x28>
 800b80c:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b810:	f803 2f01 	strb.w	r2, [r3, #1]!
 800b814:	e7f8      	b.n	800b808 <memmove+0x12>
 800b816:	4402      	add	r2, r0
 800b818:	4601      	mov	r1, r0
 800b81a:	428a      	cmp	r2, r1
 800b81c:	d100      	bne.n	800b820 <memmove+0x2a>
 800b81e:	bd10      	pop	{r4, pc}
 800b820:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800b824:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800b828:	e7f7      	b.n	800b81a <memmove+0x24>

0800b82a <memset>:
 800b82a:	4402      	add	r2, r0
 800b82c:	4603      	mov	r3, r0
 800b82e:	4293      	cmp	r3, r2
 800b830:	d100      	bne.n	800b834 <memset+0xa>
 800b832:	4770      	bx	lr
 800b834:	f803 1b01 	strb.w	r1, [r3], #1
 800b838:	e7f9      	b.n	800b82e <memset+0x4>

0800b83a <_raise_r>:
 800b83a:	291f      	cmp	r1, #31
 800b83c:	b538      	push	{r3, r4, r5, lr}
 800b83e:	4605      	mov	r5, r0
 800b840:	460c      	mov	r4, r1
 800b842:	d904      	bls.n	800b84e <_raise_r+0x14>
 800b844:	2316      	movs	r3, #22
 800b846:	6003      	str	r3, [r0, #0]
 800b848:	f04f 30ff 	mov.w	r0, #4294967295
 800b84c:	bd38      	pop	{r3, r4, r5, pc}
 800b84e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b850:	b112      	cbz	r2, 800b858 <_raise_r+0x1e>
 800b852:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b856:	b94b      	cbnz	r3, 800b86c <_raise_r+0x32>
 800b858:	4628      	mov	r0, r5
 800b85a:	f000 f869 	bl	800b930 <_getpid_r>
 800b85e:	4622      	mov	r2, r4
 800b860:	4601      	mov	r1, r0
 800b862:	4628      	mov	r0, r5
 800b864:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b868:	f000 b850 	b.w	800b90c <_kill_r>
 800b86c:	2b01      	cmp	r3, #1
 800b86e:	d00a      	beq.n	800b886 <_raise_r+0x4c>
 800b870:	1c59      	adds	r1, r3, #1
 800b872:	d103      	bne.n	800b87c <_raise_r+0x42>
 800b874:	2316      	movs	r3, #22
 800b876:	6003      	str	r3, [r0, #0]
 800b878:	2001      	movs	r0, #1
 800b87a:	e7e7      	b.n	800b84c <_raise_r+0x12>
 800b87c:	2100      	movs	r1, #0
 800b87e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b882:	4620      	mov	r0, r4
 800b884:	4798      	blx	r3
 800b886:	2000      	movs	r0, #0
 800b888:	e7e0      	b.n	800b84c <_raise_r+0x12>
	...

0800b88c <raise>:
 800b88c:	4b02      	ldr	r3, [pc, #8]	@ (800b898 <raise+0xc>)
 800b88e:	4601      	mov	r1, r0
 800b890:	6818      	ldr	r0, [r3, #0]
 800b892:	f7ff bfd2 	b.w	800b83a <_raise_r>
 800b896:	bf00      	nop
 800b898:	2000001c 	.word	0x2000001c

0800b89c <_localeconv_r>:
 800b89c:	4800      	ldr	r0, [pc, #0]	@ (800b8a0 <_localeconv_r+0x4>)
 800b89e:	4770      	bx	lr
 800b8a0:	2000015c 	.word	0x2000015c

0800b8a4 <_close_r>:
 800b8a4:	b538      	push	{r3, r4, r5, lr}
 800b8a6:	4d06      	ldr	r5, [pc, #24]	@ (800b8c0 <_close_r+0x1c>)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	4604      	mov	r4, r0
 800b8ac:	4608      	mov	r0, r1
 800b8ae:	602b      	str	r3, [r5, #0]
 800b8b0:	f7f8 fed6 	bl	8004660 <_close>
 800b8b4:	1c43      	adds	r3, r0, #1
 800b8b6:	d102      	bne.n	800b8be <_close_r+0x1a>
 800b8b8:	682b      	ldr	r3, [r5, #0]
 800b8ba:	b103      	cbz	r3, 800b8be <_close_r+0x1a>
 800b8bc:	6023      	str	r3, [r4, #0]
 800b8be:	bd38      	pop	{r3, r4, r5, pc}
 800b8c0:	20000a34 	.word	0x20000a34

0800b8c4 <_lseek_r>:
 800b8c4:	b538      	push	{r3, r4, r5, lr}
 800b8c6:	4d07      	ldr	r5, [pc, #28]	@ (800b8e4 <_lseek_r+0x20>)
 800b8c8:	4604      	mov	r4, r0
 800b8ca:	4608      	mov	r0, r1
 800b8cc:	4611      	mov	r1, r2
 800b8ce:	2200      	movs	r2, #0
 800b8d0:	602a      	str	r2, [r5, #0]
 800b8d2:	461a      	mov	r2, r3
 800b8d4:	f7f8 feeb 	bl	80046ae <_lseek>
 800b8d8:	1c43      	adds	r3, r0, #1
 800b8da:	d102      	bne.n	800b8e2 <_lseek_r+0x1e>
 800b8dc:	682b      	ldr	r3, [r5, #0]
 800b8de:	b103      	cbz	r3, 800b8e2 <_lseek_r+0x1e>
 800b8e0:	6023      	str	r3, [r4, #0]
 800b8e2:	bd38      	pop	{r3, r4, r5, pc}
 800b8e4:	20000a34 	.word	0x20000a34

0800b8e8 <_read_r>:
 800b8e8:	b538      	push	{r3, r4, r5, lr}
 800b8ea:	4d07      	ldr	r5, [pc, #28]	@ (800b908 <_read_r+0x20>)
 800b8ec:	4604      	mov	r4, r0
 800b8ee:	4608      	mov	r0, r1
 800b8f0:	4611      	mov	r1, r2
 800b8f2:	2200      	movs	r2, #0
 800b8f4:	602a      	str	r2, [r5, #0]
 800b8f6:	461a      	mov	r2, r3
 800b8f8:	f7f8 fe79 	bl	80045ee <_read>
 800b8fc:	1c43      	adds	r3, r0, #1
 800b8fe:	d102      	bne.n	800b906 <_read_r+0x1e>
 800b900:	682b      	ldr	r3, [r5, #0]
 800b902:	b103      	cbz	r3, 800b906 <_read_r+0x1e>
 800b904:	6023      	str	r3, [r4, #0]
 800b906:	bd38      	pop	{r3, r4, r5, pc}
 800b908:	20000a34 	.word	0x20000a34

0800b90c <_kill_r>:
 800b90c:	b538      	push	{r3, r4, r5, lr}
 800b90e:	4d07      	ldr	r5, [pc, #28]	@ (800b92c <_kill_r+0x20>)
 800b910:	2300      	movs	r3, #0
 800b912:	4604      	mov	r4, r0
 800b914:	4608      	mov	r0, r1
 800b916:	4611      	mov	r1, r2
 800b918:	602b      	str	r3, [r5, #0]
 800b91a:	f7f8 fe4d 	bl	80045b8 <_kill>
 800b91e:	1c43      	adds	r3, r0, #1
 800b920:	d102      	bne.n	800b928 <_kill_r+0x1c>
 800b922:	682b      	ldr	r3, [r5, #0]
 800b924:	b103      	cbz	r3, 800b928 <_kill_r+0x1c>
 800b926:	6023      	str	r3, [r4, #0]
 800b928:	bd38      	pop	{r3, r4, r5, pc}
 800b92a:	bf00      	nop
 800b92c:	20000a34 	.word	0x20000a34

0800b930 <_getpid_r>:
 800b930:	f7f8 be3a 	b.w	80045a8 <_getpid>

0800b934 <_sbrk_r>:
 800b934:	b538      	push	{r3, r4, r5, lr}
 800b936:	4d06      	ldr	r5, [pc, #24]	@ (800b950 <_sbrk_r+0x1c>)
 800b938:	2300      	movs	r3, #0
 800b93a:	4604      	mov	r4, r0
 800b93c:	4608      	mov	r0, r1
 800b93e:	602b      	str	r3, [r5, #0]
 800b940:	f7f8 fec2 	bl	80046c8 <_sbrk>
 800b944:	1c43      	adds	r3, r0, #1
 800b946:	d102      	bne.n	800b94e <_sbrk_r+0x1a>
 800b948:	682b      	ldr	r3, [r5, #0]
 800b94a:	b103      	cbz	r3, 800b94e <_sbrk_r+0x1a>
 800b94c:	6023      	str	r3, [r4, #0]
 800b94e:	bd38      	pop	{r3, r4, r5, pc}
 800b950:	20000a34 	.word	0x20000a34

0800b954 <_write_r>:
 800b954:	b538      	push	{r3, r4, r5, lr}
 800b956:	4d07      	ldr	r5, [pc, #28]	@ (800b974 <_write_r+0x20>)
 800b958:	4604      	mov	r4, r0
 800b95a:	4608      	mov	r0, r1
 800b95c:	4611      	mov	r1, r2
 800b95e:	2200      	movs	r2, #0
 800b960:	602a      	str	r2, [r5, #0]
 800b962:	461a      	mov	r2, r3
 800b964:	f7f8 fe60 	bl	8004628 <_write>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_write_r+0x1e>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_write_r+0x1e>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	20000a34 	.word	0x20000a34

0800b978 <__errno>:
 800b978:	4b01      	ldr	r3, [pc, #4]	@ (800b980 <__errno+0x8>)
 800b97a:	6818      	ldr	r0, [r3, #0]
 800b97c:	4770      	bx	lr
 800b97e:	bf00      	nop
 800b980:	2000001c 	.word	0x2000001c

0800b984 <__libc_init_array>:
 800b984:	b570      	push	{r4, r5, r6, lr}
 800b986:	4d0d      	ldr	r5, [pc, #52]	@ (800b9bc <__libc_init_array+0x38>)
 800b988:	4c0d      	ldr	r4, [pc, #52]	@ (800b9c0 <__libc_init_array+0x3c>)
 800b98a:	1b64      	subs	r4, r4, r5
 800b98c:	10a4      	asrs	r4, r4, #2
 800b98e:	2600      	movs	r6, #0
 800b990:	42a6      	cmp	r6, r4
 800b992:	d109      	bne.n	800b9a8 <__libc_init_array+0x24>
 800b994:	4d0b      	ldr	r5, [pc, #44]	@ (800b9c4 <__libc_init_array+0x40>)
 800b996:	4c0c      	ldr	r4, [pc, #48]	@ (800b9c8 <__libc_init_array+0x44>)
 800b998:	f001 ff42 	bl	800d820 <_init>
 800b99c:	1b64      	subs	r4, r4, r5
 800b99e:	10a4      	asrs	r4, r4, #2
 800b9a0:	2600      	movs	r6, #0
 800b9a2:	42a6      	cmp	r6, r4
 800b9a4:	d105      	bne.n	800b9b2 <__libc_init_array+0x2e>
 800b9a6:	bd70      	pop	{r4, r5, r6, pc}
 800b9a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9ac:	4798      	blx	r3
 800b9ae:	3601      	adds	r6, #1
 800b9b0:	e7ee      	b.n	800b990 <__libc_init_array+0xc>
 800b9b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b9b6:	4798      	blx	r3
 800b9b8:	3601      	adds	r6, #1
 800b9ba:	e7f2      	b.n	800b9a2 <__libc_init_array+0x1e>
 800b9bc:	0800e598 	.word	0x0800e598
 800b9c0:	0800e598 	.word	0x0800e598
 800b9c4:	0800e598 	.word	0x0800e598
 800b9c8:	0800e59c 	.word	0x0800e59c

0800b9cc <__retarget_lock_init_recursive>:
 800b9cc:	4770      	bx	lr

0800b9ce <__retarget_lock_acquire_recursive>:
 800b9ce:	4770      	bx	lr

0800b9d0 <__retarget_lock_release_recursive>:
 800b9d0:	4770      	bx	lr

0800b9d2 <strcpy>:
 800b9d2:	4603      	mov	r3, r0
 800b9d4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b9d8:	f803 2b01 	strb.w	r2, [r3], #1
 800b9dc:	2a00      	cmp	r2, #0
 800b9de:	d1f9      	bne.n	800b9d4 <strcpy+0x2>
 800b9e0:	4770      	bx	lr

0800b9e2 <memcpy>:
 800b9e2:	440a      	add	r2, r1
 800b9e4:	4291      	cmp	r1, r2
 800b9e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9ea:	d100      	bne.n	800b9ee <memcpy+0xc>
 800b9ec:	4770      	bx	lr
 800b9ee:	b510      	push	{r4, lr}
 800b9f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9f8:	4291      	cmp	r1, r2
 800b9fa:	d1f9      	bne.n	800b9f0 <memcpy+0xe>
 800b9fc:	bd10      	pop	{r4, pc}

0800b9fe <quorem>:
 800b9fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba02:	6903      	ldr	r3, [r0, #16]
 800ba04:	690c      	ldr	r4, [r1, #16]
 800ba06:	42a3      	cmp	r3, r4
 800ba08:	4607      	mov	r7, r0
 800ba0a:	db7e      	blt.n	800bb0a <quorem+0x10c>
 800ba0c:	3c01      	subs	r4, #1
 800ba0e:	f101 0814 	add.w	r8, r1, #20
 800ba12:	00a3      	lsls	r3, r4, #2
 800ba14:	f100 0514 	add.w	r5, r0, #20
 800ba18:	9300      	str	r3, [sp, #0]
 800ba1a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ba1e:	9301      	str	r3, [sp, #4]
 800ba20:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ba24:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ba28:	3301      	adds	r3, #1
 800ba2a:	429a      	cmp	r2, r3
 800ba2c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ba30:	fbb2 f6f3 	udiv	r6, r2, r3
 800ba34:	d32e      	bcc.n	800ba94 <quorem+0x96>
 800ba36:	f04f 0a00 	mov.w	sl, #0
 800ba3a:	46c4      	mov	ip, r8
 800ba3c:	46ae      	mov	lr, r5
 800ba3e:	46d3      	mov	fp, sl
 800ba40:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ba44:	b298      	uxth	r0, r3
 800ba46:	fb06 a000 	mla	r0, r6, r0, sl
 800ba4a:	0c02      	lsrs	r2, r0, #16
 800ba4c:	0c1b      	lsrs	r3, r3, #16
 800ba4e:	fb06 2303 	mla	r3, r6, r3, r2
 800ba52:	f8de 2000 	ldr.w	r2, [lr]
 800ba56:	b280      	uxth	r0, r0
 800ba58:	b292      	uxth	r2, r2
 800ba5a:	1a12      	subs	r2, r2, r0
 800ba5c:	445a      	add	r2, fp
 800ba5e:	f8de 0000 	ldr.w	r0, [lr]
 800ba62:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ba66:	b29b      	uxth	r3, r3
 800ba68:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800ba6c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800ba70:	b292      	uxth	r2, r2
 800ba72:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800ba76:	45e1      	cmp	r9, ip
 800ba78:	f84e 2b04 	str.w	r2, [lr], #4
 800ba7c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800ba80:	d2de      	bcs.n	800ba40 <quorem+0x42>
 800ba82:	9b00      	ldr	r3, [sp, #0]
 800ba84:	58eb      	ldr	r3, [r5, r3]
 800ba86:	b92b      	cbnz	r3, 800ba94 <quorem+0x96>
 800ba88:	9b01      	ldr	r3, [sp, #4]
 800ba8a:	3b04      	subs	r3, #4
 800ba8c:	429d      	cmp	r5, r3
 800ba8e:	461a      	mov	r2, r3
 800ba90:	d32f      	bcc.n	800baf2 <quorem+0xf4>
 800ba92:	613c      	str	r4, [r7, #16]
 800ba94:	4638      	mov	r0, r7
 800ba96:	f001 f8c3 	bl	800cc20 <__mcmp>
 800ba9a:	2800      	cmp	r0, #0
 800ba9c:	db25      	blt.n	800baea <quorem+0xec>
 800ba9e:	4629      	mov	r1, r5
 800baa0:	2000      	movs	r0, #0
 800baa2:	f858 2b04 	ldr.w	r2, [r8], #4
 800baa6:	f8d1 c000 	ldr.w	ip, [r1]
 800baaa:	fa1f fe82 	uxth.w	lr, r2
 800baae:	fa1f f38c 	uxth.w	r3, ip
 800bab2:	eba3 030e 	sub.w	r3, r3, lr
 800bab6:	4403      	add	r3, r0
 800bab8:	0c12      	lsrs	r2, r2, #16
 800baba:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800babe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bac2:	b29b      	uxth	r3, r3
 800bac4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bac8:	45c1      	cmp	r9, r8
 800baca:	f841 3b04 	str.w	r3, [r1], #4
 800bace:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bad2:	d2e6      	bcs.n	800baa2 <quorem+0xa4>
 800bad4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bad8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800badc:	b922      	cbnz	r2, 800bae8 <quorem+0xea>
 800bade:	3b04      	subs	r3, #4
 800bae0:	429d      	cmp	r5, r3
 800bae2:	461a      	mov	r2, r3
 800bae4:	d30b      	bcc.n	800bafe <quorem+0x100>
 800bae6:	613c      	str	r4, [r7, #16]
 800bae8:	3601      	adds	r6, #1
 800baea:	4630      	mov	r0, r6
 800baec:	b003      	add	sp, #12
 800baee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800baf2:	6812      	ldr	r2, [r2, #0]
 800baf4:	3b04      	subs	r3, #4
 800baf6:	2a00      	cmp	r2, #0
 800baf8:	d1cb      	bne.n	800ba92 <quorem+0x94>
 800bafa:	3c01      	subs	r4, #1
 800bafc:	e7c6      	b.n	800ba8c <quorem+0x8e>
 800bafe:	6812      	ldr	r2, [r2, #0]
 800bb00:	3b04      	subs	r3, #4
 800bb02:	2a00      	cmp	r2, #0
 800bb04:	d1ef      	bne.n	800bae6 <quorem+0xe8>
 800bb06:	3c01      	subs	r4, #1
 800bb08:	e7ea      	b.n	800bae0 <quorem+0xe2>
 800bb0a:	2000      	movs	r0, #0
 800bb0c:	e7ee      	b.n	800baec <quorem+0xee>
	...

0800bb10 <_dtoa_r>:
 800bb10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb14:	69c7      	ldr	r7, [r0, #28]
 800bb16:	b099      	sub	sp, #100	@ 0x64
 800bb18:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bb1c:	ec55 4b10 	vmov	r4, r5, d0
 800bb20:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bb22:	9109      	str	r1, [sp, #36]	@ 0x24
 800bb24:	4683      	mov	fp, r0
 800bb26:	920e      	str	r2, [sp, #56]	@ 0x38
 800bb28:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bb2a:	b97f      	cbnz	r7, 800bb4c <_dtoa_r+0x3c>
 800bb2c:	2010      	movs	r0, #16
 800bb2e:	f7ff f827 	bl	800ab80 <malloc>
 800bb32:	4602      	mov	r2, r0
 800bb34:	f8cb 001c 	str.w	r0, [fp, #28]
 800bb38:	b920      	cbnz	r0, 800bb44 <_dtoa_r+0x34>
 800bb3a:	4ba7      	ldr	r3, [pc, #668]	@ (800bdd8 <_dtoa_r+0x2c8>)
 800bb3c:	21ef      	movs	r1, #239	@ 0xef
 800bb3e:	48a7      	ldr	r0, [pc, #668]	@ (800bddc <_dtoa_r+0x2cc>)
 800bb40:	f001 fb7a 	bl	800d238 <__assert_func>
 800bb44:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bb48:	6007      	str	r7, [r0, #0]
 800bb4a:	60c7      	str	r7, [r0, #12]
 800bb4c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb50:	6819      	ldr	r1, [r3, #0]
 800bb52:	b159      	cbz	r1, 800bb6c <_dtoa_r+0x5c>
 800bb54:	685a      	ldr	r2, [r3, #4]
 800bb56:	604a      	str	r2, [r1, #4]
 800bb58:	2301      	movs	r3, #1
 800bb5a:	4093      	lsls	r3, r2
 800bb5c:	608b      	str	r3, [r1, #8]
 800bb5e:	4658      	mov	r0, fp
 800bb60:	f000 fe24 	bl	800c7ac <_Bfree>
 800bb64:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bb68:	2200      	movs	r2, #0
 800bb6a:	601a      	str	r2, [r3, #0]
 800bb6c:	1e2b      	subs	r3, r5, #0
 800bb6e:	bfb9      	ittee	lt
 800bb70:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bb74:	9303      	strlt	r3, [sp, #12]
 800bb76:	2300      	movge	r3, #0
 800bb78:	6033      	strge	r3, [r6, #0]
 800bb7a:	9f03      	ldr	r7, [sp, #12]
 800bb7c:	4b98      	ldr	r3, [pc, #608]	@ (800bde0 <_dtoa_r+0x2d0>)
 800bb7e:	bfbc      	itt	lt
 800bb80:	2201      	movlt	r2, #1
 800bb82:	6032      	strlt	r2, [r6, #0]
 800bb84:	43bb      	bics	r3, r7
 800bb86:	d112      	bne.n	800bbae <_dtoa_r+0x9e>
 800bb88:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bb8a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bb8e:	6013      	str	r3, [r2, #0]
 800bb90:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bb94:	4323      	orrs	r3, r4
 800bb96:	f000 854d 	beq.w	800c634 <_dtoa_r+0xb24>
 800bb9a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bb9c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bdf4 <_dtoa_r+0x2e4>
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	f000 854f 	beq.w	800c644 <_dtoa_r+0xb34>
 800bba6:	f10a 0303 	add.w	r3, sl, #3
 800bbaa:	f000 bd49 	b.w	800c640 <_dtoa_r+0xb30>
 800bbae:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bbb2:	2200      	movs	r2, #0
 800bbb4:	ec51 0b17 	vmov	r0, r1, d7
 800bbb8:	2300      	movs	r3, #0
 800bbba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bbbe:	f7f4 ff83 	bl	8000ac8 <__aeabi_dcmpeq>
 800bbc2:	4680      	mov	r8, r0
 800bbc4:	b158      	cbz	r0, 800bbde <_dtoa_r+0xce>
 800bbc6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bbc8:	2301      	movs	r3, #1
 800bbca:	6013      	str	r3, [r2, #0]
 800bbcc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bbce:	b113      	cbz	r3, 800bbd6 <_dtoa_r+0xc6>
 800bbd0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bbd2:	4b84      	ldr	r3, [pc, #528]	@ (800bde4 <_dtoa_r+0x2d4>)
 800bbd4:	6013      	str	r3, [r2, #0]
 800bbd6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bdf8 <_dtoa_r+0x2e8>
 800bbda:	f000 bd33 	b.w	800c644 <_dtoa_r+0xb34>
 800bbde:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bbe2:	aa16      	add	r2, sp, #88	@ 0x58
 800bbe4:	a917      	add	r1, sp, #92	@ 0x5c
 800bbe6:	4658      	mov	r0, fp
 800bbe8:	f001 f8ca 	bl	800cd80 <__d2b>
 800bbec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bbf0:	4681      	mov	r9, r0
 800bbf2:	2e00      	cmp	r6, #0
 800bbf4:	d077      	beq.n	800bce6 <_dtoa_r+0x1d6>
 800bbf6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bbf8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bbfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bc00:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc04:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bc08:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bc0c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bc10:	4619      	mov	r1, r3
 800bc12:	2200      	movs	r2, #0
 800bc14:	4b74      	ldr	r3, [pc, #464]	@ (800bde8 <_dtoa_r+0x2d8>)
 800bc16:	f7f4 fb37 	bl	8000288 <__aeabi_dsub>
 800bc1a:	a369      	add	r3, pc, #420	@ (adr r3, 800bdc0 <_dtoa_r+0x2b0>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fcea 	bl	80005f8 <__aeabi_dmul>
 800bc24:	a368      	add	r3, pc, #416	@ (adr r3, 800bdc8 <_dtoa_r+0x2b8>)
 800bc26:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc2a:	f7f4 fb2f 	bl	800028c <__adddf3>
 800bc2e:	4604      	mov	r4, r0
 800bc30:	4630      	mov	r0, r6
 800bc32:	460d      	mov	r5, r1
 800bc34:	f7f4 fc76 	bl	8000524 <__aeabi_i2d>
 800bc38:	a365      	add	r3, pc, #404	@ (adr r3, 800bdd0 <_dtoa_r+0x2c0>)
 800bc3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc3e:	f7f4 fcdb 	bl	80005f8 <__aeabi_dmul>
 800bc42:	4602      	mov	r2, r0
 800bc44:	460b      	mov	r3, r1
 800bc46:	4620      	mov	r0, r4
 800bc48:	4629      	mov	r1, r5
 800bc4a:	f7f4 fb1f 	bl	800028c <__adddf3>
 800bc4e:	4604      	mov	r4, r0
 800bc50:	460d      	mov	r5, r1
 800bc52:	f7f4 ff81 	bl	8000b58 <__aeabi_d2iz>
 800bc56:	2200      	movs	r2, #0
 800bc58:	4607      	mov	r7, r0
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	4620      	mov	r0, r4
 800bc5e:	4629      	mov	r1, r5
 800bc60:	f7f4 ff3c 	bl	8000adc <__aeabi_dcmplt>
 800bc64:	b140      	cbz	r0, 800bc78 <_dtoa_r+0x168>
 800bc66:	4638      	mov	r0, r7
 800bc68:	f7f4 fc5c 	bl	8000524 <__aeabi_i2d>
 800bc6c:	4622      	mov	r2, r4
 800bc6e:	462b      	mov	r3, r5
 800bc70:	f7f4 ff2a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc74:	b900      	cbnz	r0, 800bc78 <_dtoa_r+0x168>
 800bc76:	3f01      	subs	r7, #1
 800bc78:	2f16      	cmp	r7, #22
 800bc7a:	d851      	bhi.n	800bd20 <_dtoa_r+0x210>
 800bc7c:	4b5b      	ldr	r3, [pc, #364]	@ (800bdec <_dtoa_r+0x2dc>)
 800bc7e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bc82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bc8a:	f7f4 ff27 	bl	8000adc <__aeabi_dcmplt>
 800bc8e:	2800      	cmp	r0, #0
 800bc90:	d048      	beq.n	800bd24 <_dtoa_r+0x214>
 800bc92:	3f01      	subs	r7, #1
 800bc94:	2300      	movs	r3, #0
 800bc96:	9312      	str	r3, [sp, #72]	@ 0x48
 800bc98:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bc9a:	1b9b      	subs	r3, r3, r6
 800bc9c:	1e5a      	subs	r2, r3, #1
 800bc9e:	bf44      	itt	mi
 800bca0:	f1c3 0801 	rsbmi	r8, r3, #1
 800bca4:	2300      	movmi	r3, #0
 800bca6:	9208      	str	r2, [sp, #32]
 800bca8:	bf54      	ite	pl
 800bcaa:	f04f 0800 	movpl.w	r8, #0
 800bcae:	9308      	strmi	r3, [sp, #32]
 800bcb0:	2f00      	cmp	r7, #0
 800bcb2:	db39      	blt.n	800bd28 <_dtoa_r+0x218>
 800bcb4:	9b08      	ldr	r3, [sp, #32]
 800bcb6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bcb8:	443b      	add	r3, r7
 800bcba:	9308      	str	r3, [sp, #32]
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	930a      	str	r3, [sp, #40]	@ 0x28
 800bcc0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcc2:	2b09      	cmp	r3, #9
 800bcc4:	d864      	bhi.n	800bd90 <_dtoa_r+0x280>
 800bcc6:	2b05      	cmp	r3, #5
 800bcc8:	bfc4      	itt	gt
 800bcca:	3b04      	subgt	r3, #4
 800bccc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bcce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bcd0:	f1a3 0302 	sub.w	r3, r3, #2
 800bcd4:	bfcc      	ite	gt
 800bcd6:	2400      	movgt	r4, #0
 800bcd8:	2401      	movle	r4, #1
 800bcda:	2b03      	cmp	r3, #3
 800bcdc:	d863      	bhi.n	800bda6 <_dtoa_r+0x296>
 800bcde:	e8df f003 	tbb	[pc, r3]
 800bce2:	372a      	.short	0x372a
 800bce4:	5535      	.short	0x5535
 800bce6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bcea:	441e      	add	r6, r3
 800bcec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bcf0:	2b20      	cmp	r3, #32
 800bcf2:	bfc1      	itttt	gt
 800bcf4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bcf8:	409f      	lslgt	r7, r3
 800bcfa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bcfe:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bd02:	bfd6      	itet	le
 800bd04:	f1c3 0320 	rsble	r3, r3, #32
 800bd08:	ea47 0003 	orrgt.w	r0, r7, r3
 800bd0c:	fa04 f003 	lslle.w	r0, r4, r3
 800bd10:	f7f4 fbf8 	bl	8000504 <__aeabi_ui2d>
 800bd14:	2201      	movs	r2, #1
 800bd16:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bd1a:	3e01      	subs	r6, #1
 800bd1c:	9214      	str	r2, [sp, #80]	@ 0x50
 800bd1e:	e777      	b.n	800bc10 <_dtoa_r+0x100>
 800bd20:	2301      	movs	r3, #1
 800bd22:	e7b8      	b.n	800bc96 <_dtoa_r+0x186>
 800bd24:	9012      	str	r0, [sp, #72]	@ 0x48
 800bd26:	e7b7      	b.n	800bc98 <_dtoa_r+0x188>
 800bd28:	427b      	negs	r3, r7
 800bd2a:	930a      	str	r3, [sp, #40]	@ 0x28
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	eba8 0807 	sub.w	r8, r8, r7
 800bd32:	930f      	str	r3, [sp, #60]	@ 0x3c
 800bd34:	e7c4      	b.n	800bcc0 <_dtoa_r+0x1b0>
 800bd36:	2300      	movs	r3, #0
 800bd38:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd3a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	dc35      	bgt.n	800bdac <_dtoa_r+0x29c>
 800bd40:	2301      	movs	r3, #1
 800bd42:	9300      	str	r3, [sp, #0]
 800bd44:	9307      	str	r3, [sp, #28]
 800bd46:	461a      	mov	r2, r3
 800bd48:	920e      	str	r2, [sp, #56]	@ 0x38
 800bd4a:	e00b      	b.n	800bd64 <_dtoa_r+0x254>
 800bd4c:	2301      	movs	r3, #1
 800bd4e:	e7f3      	b.n	800bd38 <_dtoa_r+0x228>
 800bd50:	2300      	movs	r3, #0
 800bd52:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bd54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bd56:	18fb      	adds	r3, r7, r3
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	3301      	adds	r3, #1
 800bd5c:	2b01      	cmp	r3, #1
 800bd5e:	9307      	str	r3, [sp, #28]
 800bd60:	bfb8      	it	lt
 800bd62:	2301      	movlt	r3, #1
 800bd64:	f8db 001c 	ldr.w	r0, [fp, #28]
 800bd68:	2100      	movs	r1, #0
 800bd6a:	2204      	movs	r2, #4
 800bd6c:	f102 0514 	add.w	r5, r2, #20
 800bd70:	429d      	cmp	r5, r3
 800bd72:	d91f      	bls.n	800bdb4 <_dtoa_r+0x2a4>
 800bd74:	6041      	str	r1, [r0, #4]
 800bd76:	4658      	mov	r0, fp
 800bd78:	f000 fcd8 	bl	800c72c <_Balloc>
 800bd7c:	4682      	mov	sl, r0
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d13c      	bne.n	800bdfc <_dtoa_r+0x2ec>
 800bd82:	4b1b      	ldr	r3, [pc, #108]	@ (800bdf0 <_dtoa_r+0x2e0>)
 800bd84:	4602      	mov	r2, r0
 800bd86:	f240 11af 	movw	r1, #431	@ 0x1af
 800bd8a:	e6d8      	b.n	800bb3e <_dtoa_r+0x2e>
 800bd8c:	2301      	movs	r3, #1
 800bd8e:	e7e0      	b.n	800bd52 <_dtoa_r+0x242>
 800bd90:	2401      	movs	r4, #1
 800bd92:	2300      	movs	r3, #0
 800bd94:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd96:	940b      	str	r4, [sp, #44]	@ 0x2c
 800bd98:	f04f 33ff 	mov.w	r3, #4294967295
 800bd9c:	9300      	str	r3, [sp, #0]
 800bd9e:	9307      	str	r3, [sp, #28]
 800bda0:	2200      	movs	r2, #0
 800bda2:	2312      	movs	r3, #18
 800bda4:	e7d0      	b.n	800bd48 <_dtoa_r+0x238>
 800bda6:	2301      	movs	r3, #1
 800bda8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bdaa:	e7f5      	b.n	800bd98 <_dtoa_r+0x288>
 800bdac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bdae:	9300      	str	r3, [sp, #0]
 800bdb0:	9307      	str	r3, [sp, #28]
 800bdb2:	e7d7      	b.n	800bd64 <_dtoa_r+0x254>
 800bdb4:	3101      	adds	r1, #1
 800bdb6:	0052      	lsls	r2, r2, #1
 800bdb8:	e7d8      	b.n	800bd6c <_dtoa_r+0x25c>
 800bdba:	bf00      	nop
 800bdbc:	f3af 8000 	nop.w
 800bdc0:	636f4361 	.word	0x636f4361
 800bdc4:	3fd287a7 	.word	0x3fd287a7
 800bdc8:	8b60c8b3 	.word	0x8b60c8b3
 800bdcc:	3fc68a28 	.word	0x3fc68a28
 800bdd0:	509f79fb 	.word	0x509f79fb
 800bdd4:	3fd34413 	.word	0x3fd34413
 800bdd8:	0800e25c 	.word	0x0800e25c
 800bddc:	0800e273 	.word	0x0800e273
 800bde0:	7ff00000 	.word	0x7ff00000
 800bde4:	0800e22c 	.word	0x0800e22c
 800bde8:	3ff80000 	.word	0x3ff80000
 800bdec:	0800e370 	.word	0x0800e370
 800bdf0:	0800e2cb 	.word	0x0800e2cb
 800bdf4:	0800e258 	.word	0x0800e258
 800bdf8:	0800e22b 	.word	0x0800e22b
 800bdfc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800be00:	6018      	str	r0, [r3, #0]
 800be02:	9b07      	ldr	r3, [sp, #28]
 800be04:	2b0e      	cmp	r3, #14
 800be06:	f200 80a4 	bhi.w	800bf52 <_dtoa_r+0x442>
 800be0a:	2c00      	cmp	r4, #0
 800be0c:	f000 80a1 	beq.w	800bf52 <_dtoa_r+0x442>
 800be10:	2f00      	cmp	r7, #0
 800be12:	dd33      	ble.n	800be7c <_dtoa_r+0x36c>
 800be14:	4bad      	ldr	r3, [pc, #692]	@ (800c0cc <_dtoa_r+0x5bc>)
 800be16:	f007 020f 	and.w	r2, r7, #15
 800be1a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be1e:	ed93 7b00 	vldr	d7, [r3]
 800be22:	05f8      	lsls	r0, r7, #23
 800be24:	ed8d 7b04 	vstr	d7, [sp, #16]
 800be28:	ea4f 1427 	mov.w	r4, r7, asr #4
 800be2c:	d516      	bpl.n	800be5c <_dtoa_r+0x34c>
 800be2e:	4ba8      	ldr	r3, [pc, #672]	@ (800c0d0 <_dtoa_r+0x5c0>)
 800be30:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be34:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800be38:	f7f4 fd08 	bl	800084c <__aeabi_ddiv>
 800be3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be40:	f004 040f 	and.w	r4, r4, #15
 800be44:	2603      	movs	r6, #3
 800be46:	4da2      	ldr	r5, [pc, #648]	@ (800c0d0 <_dtoa_r+0x5c0>)
 800be48:	b954      	cbnz	r4, 800be60 <_dtoa_r+0x350>
 800be4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800be4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800be52:	f7f4 fcfb 	bl	800084c <__aeabi_ddiv>
 800be56:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be5a:	e028      	b.n	800beae <_dtoa_r+0x39e>
 800be5c:	2602      	movs	r6, #2
 800be5e:	e7f2      	b.n	800be46 <_dtoa_r+0x336>
 800be60:	07e1      	lsls	r1, r4, #31
 800be62:	d508      	bpl.n	800be76 <_dtoa_r+0x366>
 800be64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800be68:	e9d5 2300 	ldrd	r2, r3, [r5]
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be74:	3601      	adds	r6, #1
 800be76:	1064      	asrs	r4, r4, #1
 800be78:	3508      	adds	r5, #8
 800be7a:	e7e5      	b.n	800be48 <_dtoa_r+0x338>
 800be7c:	f000 80d2 	beq.w	800c024 <_dtoa_r+0x514>
 800be80:	427c      	negs	r4, r7
 800be82:	4b92      	ldr	r3, [pc, #584]	@ (800c0cc <_dtoa_r+0x5bc>)
 800be84:	4d92      	ldr	r5, [pc, #584]	@ (800c0d0 <_dtoa_r+0x5c0>)
 800be86:	f004 020f 	and.w	r2, r4, #15
 800be8a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800be8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be92:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800be96:	f7f4 fbaf 	bl	80005f8 <__aeabi_dmul>
 800be9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be9e:	1124      	asrs	r4, r4, #4
 800bea0:	2300      	movs	r3, #0
 800bea2:	2602      	movs	r6, #2
 800bea4:	2c00      	cmp	r4, #0
 800bea6:	f040 80b2 	bne.w	800c00e <_dtoa_r+0x4fe>
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d1d3      	bne.n	800be56 <_dtoa_r+0x346>
 800beae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800beb0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	f000 80b7 	beq.w	800c028 <_dtoa_r+0x518>
 800beba:	4b86      	ldr	r3, [pc, #536]	@ (800c0d4 <_dtoa_r+0x5c4>)
 800bebc:	2200      	movs	r2, #0
 800bebe:	4620      	mov	r0, r4
 800bec0:	4629      	mov	r1, r5
 800bec2:	f7f4 fe0b 	bl	8000adc <__aeabi_dcmplt>
 800bec6:	2800      	cmp	r0, #0
 800bec8:	f000 80ae 	beq.w	800c028 <_dtoa_r+0x518>
 800becc:	9b07      	ldr	r3, [sp, #28]
 800bece:	2b00      	cmp	r3, #0
 800bed0:	f000 80aa 	beq.w	800c028 <_dtoa_r+0x518>
 800bed4:	9b00      	ldr	r3, [sp, #0]
 800bed6:	2b00      	cmp	r3, #0
 800bed8:	dd37      	ble.n	800bf4a <_dtoa_r+0x43a>
 800beda:	1e7b      	subs	r3, r7, #1
 800bedc:	9304      	str	r3, [sp, #16]
 800bede:	4620      	mov	r0, r4
 800bee0:	4b7d      	ldr	r3, [pc, #500]	@ (800c0d8 <_dtoa_r+0x5c8>)
 800bee2:	2200      	movs	r2, #0
 800bee4:	4629      	mov	r1, r5
 800bee6:	f7f4 fb87 	bl	80005f8 <__aeabi_dmul>
 800beea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beee:	9c00      	ldr	r4, [sp, #0]
 800bef0:	3601      	adds	r6, #1
 800bef2:	4630      	mov	r0, r6
 800bef4:	f7f4 fb16 	bl	8000524 <__aeabi_i2d>
 800bef8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800befc:	f7f4 fb7c 	bl	80005f8 <__aeabi_dmul>
 800bf00:	4b76      	ldr	r3, [pc, #472]	@ (800c0dc <_dtoa_r+0x5cc>)
 800bf02:	2200      	movs	r2, #0
 800bf04:	f7f4 f9c2 	bl	800028c <__adddf3>
 800bf08:	4605      	mov	r5, r0
 800bf0a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bf0e:	2c00      	cmp	r4, #0
 800bf10:	f040 808d 	bne.w	800c02e <_dtoa_r+0x51e>
 800bf14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf18:	4b71      	ldr	r3, [pc, #452]	@ (800c0e0 <_dtoa_r+0x5d0>)
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	f7f4 f9b4 	bl	8000288 <__aeabi_dsub>
 800bf20:	4602      	mov	r2, r0
 800bf22:	460b      	mov	r3, r1
 800bf24:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bf28:	462a      	mov	r2, r5
 800bf2a:	4633      	mov	r3, r6
 800bf2c:	f7f4 fdf4 	bl	8000b18 <__aeabi_dcmpgt>
 800bf30:	2800      	cmp	r0, #0
 800bf32:	f040 828b 	bne.w	800c44c <_dtoa_r+0x93c>
 800bf36:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf3a:	462a      	mov	r2, r5
 800bf3c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800bf40:	f7f4 fdcc 	bl	8000adc <__aeabi_dcmplt>
 800bf44:	2800      	cmp	r0, #0
 800bf46:	f040 8128 	bne.w	800c19a <_dtoa_r+0x68a>
 800bf4a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800bf4e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800bf52:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	f2c0 815a 	blt.w	800c20e <_dtoa_r+0x6fe>
 800bf5a:	2f0e      	cmp	r7, #14
 800bf5c:	f300 8157 	bgt.w	800c20e <_dtoa_r+0x6fe>
 800bf60:	4b5a      	ldr	r3, [pc, #360]	@ (800c0cc <_dtoa_r+0x5bc>)
 800bf62:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bf66:	ed93 7b00 	vldr	d7, [r3]
 800bf6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800bf6c:	2b00      	cmp	r3, #0
 800bf6e:	ed8d 7b00 	vstr	d7, [sp]
 800bf72:	da03      	bge.n	800bf7c <_dtoa_r+0x46c>
 800bf74:	9b07      	ldr	r3, [sp, #28]
 800bf76:	2b00      	cmp	r3, #0
 800bf78:	f340 8101 	ble.w	800c17e <_dtoa_r+0x66e>
 800bf7c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf80:	4656      	mov	r6, sl
 800bf82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf86:	4620      	mov	r0, r4
 800bf88:	4629      	mov	r1, r5
 800bf8a:	f7f4 fc5f 	bl	800084c <__aeabi_ddiv>
 800bf8e:	f7f4 fde3 	bl	8000b58 <__aeabi_d2iz>
 800bf92:	4680      	mov	r8, r0
 800bf94:	f7f4 fac6 	bl	8000524 <__aeabi_i2d>
 800bf98:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bf9c:	f7f4 fb2c 	bl	80005f8 <__aeabi_dmul>
 800bfa0:	4602      	mov	r2, r0
 800bfa2:	460b      	mov	r3, r1
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	4629      	mov	r1, r5
 800bfa8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800bfac:	f7f4 f96c 	bl	8000288 <__aeabi_dsub>
 800bfb0:	f806 4b01 	strb.w	r4, [r6], #1
 800bfb4:	9d07      	ldr	r5, [sp, #28]
 800bfb6:	eba6 040a 	sub.w	r4, r6, sl
 800bfba:	42a5      	cmp	r5, r4
 800bfbc:	4602      	mov	r2, r0
 800bfbe:	460b      	mov	r3, r1
 800bfc0:	f040 8117 	bne.w	800c1f2 <_dtoa_r+0x6e2>
 800bfc4:	f7f4 f962 	bl	800028c <__adddf3>
 800bfc8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfcc:	4604      	mov	r4, r0
 800bfce:	460d      	mov	r5, r1
 800bfd0:	f7f4 fda2 	bl	8000b18 <__aeabi_dcmpgt>
 800bfd4:	2800      	cmp	r0, #0
 800bfd6:	f040 80f9 	bne.w	800c1cc <_dtoa_r+0x6bc>
 800bfda:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4629      	mov	r1, r5
 800bfe2:	f7f4 fd71 	bl	8000ac8 <__aeabi_dcmpeq>
 800bfe6:	b118      	cbz	r0, 800bff0 <_dtoa_r+0x4e0>
 800bfe8:	f018 0f01 	tst.w	r8, #1
 800bfec:	f040 80ee 	bne.w	800c1cc <_dtoa_r+0x6bc>
 800bff0:	4649      	mov	r1, r9
 800bff2:	4658      	mov	r0, fp
 800bff4:	f000 fbda 	bl	800c7ac <_Bfree>
 800bff8:	2300      	movs	r3, #0
 800bffa:	7033      	strb	r3, [r6, #0]
 800bffc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800bffe:	3701      	adds	r7, #1
 800c000:	601f      	str	r7, [r3, #0]
 800c002:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c004:	2b00      	cmp	r3, #0
 800c006:	f000 831d 	beq.w	800c644 <_dtoa_r+0xb34>
 800c00a:	601e      	str	r6, [r3, #0]
 800c00c:	e31a      	b.n	800c644 <_dtoa_r+0xb34>
 800c00e:	07e2      	lsls	r2, r4, #31
 800c010:	d505      	bpl.n	800c01e <_dtoa_r+0x50e>
 800c012:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c016:	f7f4 faef 	bl	80005f8 <__aeabi_dmul>
 800c01a:	3601      	adds	r6, #1
 800c01c:	2301      	movs	r3, #1
 800c01e:	1064      	asrs	r4, r4, #1
 800c020:	3508      	adds	r5, #8
 800c022:	e73f      	b.n	800bea4 <_dtoa_r+0x394>
 800c024:	2602      	movs	r6, #2
 800c026:	e742      	b.n	800beae <_dtoa_r+0x39e>
 800c028:	9c07      	ldr	r4, [sp, #28]
 800c02a:	9704      	str	r7, [sp, #16]
 800c02c:	e761      	b.n	800bef2 <_dtoa_r+0x3e2>
 800c02e:	4b27      	ldr	r3, [pc, #156]	@ (800c0cc <_dtoa_r+0x5bc>)
 800c030:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c032:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c036:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c03a:	4454      	add	r4, sl
 800c03c:	2900      	cmp	r1, #0
 800c03e:	d053      	beq.n	800c0e8 <_dtoa_r+0x5d8>
 800c040:	4928      	ldr	r1, [pc, #160]	@ (800c0e4 <_dtoa_r+0x5d4>)
 800c042:	2000      	movs	r0, #0
 800c044:	f7f4 fc02 	bl	800084c <__aeabi_ddiv>
 800c048:	4633      	mov	r3, r6
 800c04a:	462a      	mov	r2, r5
 800c04c:	f7f4 f91c 	bl	8000288 <__aeabi_dsub>
 800c050:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c054:	4656      	mov	r6, sl
 800c056:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c05a:	f7f4 fd7d 	bl	8000b58 <__aeabi_d2iz>
 800c05e:	4605      	mov	r5, r0
 800c060:	f7f4 fa60 	bl	8000524 <__aeabi_i2d>
 800c064:	4602      	mov	r2, r0
 800c066:	460b      	mov	r3, r1
 800c068:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c06c:	f7f4 f90c 	bl	8000288 <__aeabi_dsub>
 800c070:	3530      	adds	r5, #48	@ 0x30
 800c072:	4602      	mov	r2, r0
 800c074:	460b      	mov	r3, r1
 800c076:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c07a:	f806 5b01 	strb.w	r5, [r6], #1
 800c07e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c082:	f7f4 fd2b 	bl	8000adc <__aeabi_dcmplt>
 800c086:	2800      	cmp	r0, #0
 800c088:	d171      	bne.n	800c16e <_dtoa_r+0x65e>
 800c08a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c08e:	4911      	ldr	r1, [pc, #68]	@ (800c0d4 <_dtoa_r+0x5c4>)
 800c090:	2000      	movs	r0, #0
 800c092:	f7f4 f8f9 	bl	8000288 <__aeabi_dsub>
 800c096:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c09a:	f7f4 fd1f 	bl	8000adc <__aeabi_dcmplt>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f040 8095 	bne.w	800c1ce <_dtoa_r+0x6be>
 800c0a4:	42a6      	cmp	r6, r4
 800c0a6:	f43f af50 	beq.w	800bf4a <_dtoa_r+0x43a>
 800c0aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c0ae:	4b0a      	ldr	r3, [pc, #40]	@ (800c0d8 <_dtoa_r+0x5c8>)
 800c0b0:	2200      	movs	r2, #0
 800c0b2:	f7f4 faa1 	bl	80005f8 <__aeabi_dmul>
 800c0b6:	4b08      	ldr	r3, [pc, #32]	@ (800c0d8 <_dtoa_r+0x5c8>)
 800c0b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0bc:	2200      	movs	r2, #0
 800c0be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0c2:	f7f4 fa99 	bl	80005f8 <__aeabi_dmul>
 800c0c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0ca:	e7c4      	b.n	800c056 <_dtoa_r+0x546>
 800c0cc:	0800e370 	.word	0x0800e370
 800c0d0:	0800e348 	.word	0x0800e348
 800c0d4:	3ff00000 	.word	0x3ff00000
 800c0d8:	40240000 	.word	0x40240000
 800c0dc:	401c0000 	.word	0x401c0000
 800c0e0:	40140000 	.word	0x40140000
 800c0e4:	3fe00000 	.word	0x3fe00000
 800c0e8:	4631      	mov	r1, r6
 800c0ea:	4628      	mov	r0, r5
 800c0ec:	f7f4 fa84 	bl	80005f8 <__aeabi_dmul>
 800c0f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c0f4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c0f6:	4656      	mov	r6, sl
 800c0f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c0fc:	f7f4 fd2c 	bl	8000b58 <__aeabi_d2iz>
 800c100:	4605      	mov	r5, r0
 800c102:	f7f4 fa0f 	bl	8000524 <__aeabi_i2d>
 800c106:	4602      	mov	r2, r0
 800c108:	460b      	mov	r3, r1
 800c10a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c10e:	f7f4 f8bb 	bl	8000288 <__aeabi_dsub>
 800c112:	3530      	adds	r5, #48	@ 0x30
 800c114:	f806 5b01 	strb.w	r5, [r6], #1
 800c118:	4602      	mov	r2, r0
 800c11a:	460b      	mov	r3, r1
 800c11c:	42a6      	cmp	r6, r4
 800c11e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c122:	f04f 0200 	mov.w	r2, #0
 800c126:	d124      	bne.n	800c172 <_dtoa_r+0x662>
 800c128:	4bac      	ldr	r3, [pc, #688]	@ (800c3dc <_dtoa_r+0x8cc>)
 800c12a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c12e:	f7f4 f8ad 	bl	800028c <__adddf3>
 800c132:	4602      	mov	r2, r0
 800c134:	460b      	mov	r3, r1
 800c136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13a:	f7f4 fced 	bl	8000b18 <__aeabi_dcmpgt>
 800c13e:	2800      	cmp	r0, #0
 800c140:	d145      	bne.n	800c1ce <_dtoa_r+0x6be>
 800c142:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c146:	49a5      	ldr	r1, [pc, #660]	@ (800c3dc <_dtoa_r+0x8cc>)
 800c148:	2000      	movs	r0, #0
 800c14a:	f7f4 f89d 	bl	8000288 <__aeabi_dsub>
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c156:	f7f4 fcc1 	bl	8000adc <__aeabi_dcmplt>
 800c15a:	2800      	cmp	r0, #0
 800c15c:	f43f aef5 	beq.w	800bf4a <_dtoa_r+0x43a>
 800c160:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c162:	1e73      	subs	r3, r6, #1
 800c164:	9315      	str	r3, [sp, #84]	@ 0x54
 800c166:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c16a:	2b30      	cmp	r3, #48	@ 0x30
 800c16c:	d0f8      	beq.n	800c160 <_dtoa_r+0x650>
 800c16e:	9f04      	ldr	r7, [sp, #16]
 800c170:	e73e      	b.n	800bff0 <_dtoa_r+0x4e0>
 800c172:	4b9b      	ldr	r3, [pc, #620]	@ (800c3e0 <_dtoa_r+0x8d0>)
 800c174:	f7f4 fa40 	bl	80005f8 <__aeabi_dmul>
 800c178:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c17c:	e7bc      	b.n	800c0f8 <_dtoa_r+0x5e8>
 800c17e:	d10c      	bne.n	800c19a <_dtoa_r+0x68a>
 800c180:	4b98      	ldr	r3, [pc, #608]	@ (800c3e4 <_dtoa_r+0x8d4>)
 800c182:	2200      	movs	r2, #0
 800c184:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c188:	f7f4 fa36 	bl	80005f8 <__aeabi_dmul>
 800c18c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c190:	f7f4 fcb8 	bl	8000b04 <__aeabi_dcmpge>
 800c194:	2800      	cmp	r0, #0
 800c196:	f000 8157 	beq.w	800c448 <_dtoa_r+0x938>
 800c19a:	2400      	movs	r4, #0
 800c19c:	4625      	mov	r5, r4
 800c19e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c1a0:	43db      	mvns	r3, r3
 800c1a2:	9304      	str	r3, [sp, #16]
 800c1a4:	4656      	mov	r6, sl
 800c1a6:	2700      	movs	r7, #0
 800c1a8:	4621      	mov	r1, r4
 800c1aa:	4658      	mov	r0, fp
 800c1ac:	f000 fafe 	bl	800c7ac <_Bfree>
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	d0dc      	beq.n	800c16e <_dtoa_r+0x65e>
 800c1b4:	b12f      	cbz	r7, 800c1c2 <_dtoa_r+0x6b2>
 800c1b6:	42af      	cmp	r7, r5
 800c1b8:	d003      	beq.n	800c1c2 <_dtoa_r+0x6b2>
 800c1ba:	4639      	mov	r1, r7
 800c1bc:	4658      	mov	r0, fp
 800c1be:	f000 faf5 	bl	800c7ac <_Bfree>
 800c1c2:	4629      	mov	r1, r5
 800c1c4:	4658      	mov	r0, fp
 800c1c6:	f000 faf1 	bl	800c7ac <_Bfree>
 800c1ca:	e7d0      	b.n	800c16e <_dtoa_r+0x65e>
 800c1cc:	9704      	str	r7, [sp, #16]
 800c1ce:	4633      	mov	r3, r6
 800c1d0:	461e      	mov	r6, r3
 800c1d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c1d6:	2a39      	cmp	r2, #57	@ 0x39
 800c1d8:	d107      	bne.n	800c1ea <_dtoa_r+0x6da>
 800c1da:	459a      	cmp	sl, r3
 800c1dc:	d1f8      	bne.n	800c1d0 <_dtoa_r+0x6c0>
 800c1de:	9a04      	ldr	r2, [sp, #16]
 800c1e0:	3201      	adds	r2, #1
 800c1e2:	9204      	str	r2, [sp, #16]
 800c1e4:	2230      	movs	r2, #48	@ 0x30
 800c1e6:	f88a 2000 	strb.w	r2, [sl]
 800c1ea:	781a      	ldrb	r2, [r3, #0]
 800c1ec:	3201      	adds	r2, #1
 800c1ee:	701a      	strb	r2, [r3, #0]
 800c1f0:	e7bd      	b.n	800c16e <_dtoa_r+0x65e>
 800c1f2:	4b7b      	ldr	r3, [pc, #492]	@ (800c3e0 <_dtoa_r+0x8d0>)
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	f7f4 f9ff 	bl	80005f8 <__aeabi_dmul>
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	2300      	movs	r3, #0
 800c1fe:	4604      	mov	r4, r0
 800c200:	460d      	mov	r5, r1
 800c202:	f7f4 fc61 	bl	8000ac8 <__aeabi_dcmpeq>
 800c206:	2800      	cmp	r0, #0
 800c208:	f43f aebb 	beq.w	800bf82 <_dtoa_r+0x472>
 800c20c:	e6f0      	b.n	800bff0 <_dtoa_r+0x4e0>
 800c20e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c210:	2a00      	cmp	r2, #0
 800c212:	f000 80db 	beq.w	800c3cc <_dtoa_r+0x8bc>
 800c216:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c218:	2a01      	cmp	r2, #1
 800c21a:	f300 80bf 	bgt.w	800c39c <_dtoa_r+0x88c>
 800c21e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c220:	2a00      	cmp	r2, #0
 800c222:	f000 80b7 	beq.w	800c394 <_dtoa_r+0x884>
 800c226:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c22a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c22c:	4646      	mov	r6, r8
 800c22e:	9a08      	ldr	r2, [sp, #32]
 800c230:	2101      	movs	r1, #1
 800c232:	441a      	add	r2, r3
 800c234:	4658      	mov	r0, fp
 800c236:	4498      	add	r8, r3
 800c238:	9208      	str	r2, [sp, #32]
 800c23a:	f000 fb6b 	bl	800c914 <__i2b>
 800c23e:	4605      	mov	r5, r0
 800c240:	b15e      	cbz	r6, 800c25a <_dtoa_r+0x74a>
 800c242:	9b08      	ldr	r3, [sp, #32]
 800c244:	2b00      	cmp	r3, #0
 800c246:	dd08      	ble.n	800c25a <_dtoa_r+0x74a>
 800c248:	42b3      	cmp	r3, r6
 800c24a:	9a08      	ldr	r2, [sp, #32]
 800c24c:	bfa8      	it	ge
 800c24e:	4633      	movge	r3, r6
 800c250:	eba8 0803 	sub.w	r8, r8, r3
 800c254:	1af6      	subs	r6, r6, r3
 800c256:	1ad3      	subs	r3, r2, r3
 800c258:	9308      	str	r3, [sp, #32]
 800c25a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c25c:	b1f3      	cbz	r3, 800c29c <_dtoa_r+0x78c>
 800c25e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c260:	2b00      	cmp	r3, #0
 800c262:	f000 80b7 	beq.w	800c3d4 <_dtoa_r+0x8c4>
 800c266:	b18c      	cbz	r4, 800c28c <_dtoa_r+0x77c>
 800c268:	4629      	mov	r1, r5
 800c26a:	4622      	mov	r2, r4
 800c26c:	4658      	mov	r0, fp
 800c26e:	f000 fc11 	bl	800ca94 <__pow5mult>
 800c272:	464a      	mov	r2, r9
 800c274:	4601      	mov	r1, r0
 800c276:	4605      	mov	r5, r0
 800c278:	4658      	mov	r0, fp
 800c27a:	f000 fb61 	bl	800c940 <__multiply>
 800c27e:	4649      	mov	r1, r9
 800c280:	9004      	str	r0, [sp, #16]
 800c282:	4658      	mov	r0, fp
 800c284:	f000 fa92 	bl	800c7ac <_Bfree>
 800c288:	9b04      	ldr	r3, [sp, #16]
 800c28a:	4699      	mov	r9, r3
 800c28c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c28e:	1b1a      	subs	r2, r3, r4
 800c290:	d004      	beq.n	800c29c <_dtoa_r+0x78c>
 800c292:	4649      	mov	r1, r9
 800c294:	4658      	mov	r0, fp
 800c296:	f000 fbfd 	bl	800ca94 <__pow5mult>
 800c29a:	4681      	mov	r9, r0
 800c29c:	2101      	movs	r1, #1
 800c29e:	4658      	mov	r0, fp
 800c2a0:	f000 fb38 	bl	800c914 <__i2b>
 800c2a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2a6:	4604      	mov	r4, r0
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	f000 81cf 	beq.w	800c64c <_dtoa_r+0xb3c>
 800c2ae:	461a      	mov	r2, r3
 800c2b0:	4601      	mov	r1, r0
 800c2b2:	4658      	mov	r0, fp
 800c2b4:	f000 fbee 	bl	800ca94 <__pow5mult>
 800c2b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c2ba:	2b01      	cmp	r3, #1
 800c2bc:	4604      	mov	r4, r0
 800c2be:	f300 8095 	bgt.w	800c3ec <_dtoa_r+0x8dc>
 800c2c2:	9b02      	ldr	r3, [sp, #8]
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	f040 8087 	bne.w	800c3d8 <_dtoa_r+0x8c8>
 800c2ca:	9b03      	ldr	r3, [sp, #12]
 800c2cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f040 8089 	bne.w	800c3e8 <_dtoa_r+0x8d8>
 800c2d6:	9b03      	ldr	r3, [sp, #12]
 800c2d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c2dc:	0d1b      	lsrs	r3, r3, #20
 800c2de:	051b      	lsls	r3, r3, #20
 800c2e0:	b12b      	cbz	r3, 800c2ee <_dtoa_r+0x7de>
 800c2e2:	9b08      	ldr	r3, [sp, #32]
 800c2e4:	3301      	adds	r3, #1
 800c2e6:	9308      	str	r3, [sp, #32]
 800c2e8:	f108 0801 	add.w	r8, r8, #1
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c2f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	f000 81b0 	beq.w	800c658 <_dtoa_r+0xb48>
 800c2f8:	6923      	ldr	r3, [r4, #16]
 800c2fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c2fe:	6918      	ldr	r0, [r3, #16]
 800c300:	f000 fabc 	bl	800c87c <__hi0bits>
 800c304:	f1c0 0020 	rsb	r0, r0, #32
 800c308:	9b08      	ldr	r3, [sp, #32]
 800c30a:	4418      	add	r0, r3
 800c30c:	f010 001f 	ands.w	r0, r0, #31
 800c310:	d077      	beq.n	800c402 <_dtoa_r+0x8f2>
 800c312:	f1c0 0320 	rsb	r3, r0, #32
 800c316:	2b04      	cmp	r3, #4
 800c318:	dd6b      	ble.n	800c3f2 <_dtoa_r+0x8e2>
 800c31a:	9b08      	ldr	r3, [sp, #32]
 800c31c:	f1c0 001c 	rsb	r0, r0, #28
 800c320:	4403      	add	r3, r0
 800c322:	4480      	add	r8, r0
 800c324:	4406      	add	r6, r0
 800c326:	9308      	str	r3, [sp, #32]
 800c328:	f1b8 0f00 	cmp.w	r8, #0
 800c32c:	dd05      	ble.n	800c33a <_dtoa_r+0x82a>
 800c32e:	4649      	mov	r1, r9
 800c330:	4642      	mov	r2, r8
 800c332:	4658      	mov	r0, fp
 800c334:	f000 fc08 	bl	800cb48 <__lshift>
 800c338:	4681      	mov	r9, r0
 800c33a:	9b08      	ldr	r3, [sp, #32]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	dd05      	ble.n	800c34c <_dtoa_r+0x83c>
 800c340:	4621      	mov	r1, r4
 800c342:	461a      	mov	r2, r3
 800c344:	4658      	mov	r0, fp
 800c346:	f000 fbff 	bl	800cb48 <__lshift>
 800c34a:	4604      	mov	r4, r0
 800c34c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d059      	beq.n	800c406 <_dtoa_r+0x8f6>
 800c352:	4621      	mov	r1, r4
 800c354:	4648      	mov	r0, r9
 800c356:	f000 fc63 	bl	800cc20 <__mcmp>
 800c35a:	2800      	cmp	r0, #0
 800c35c:	da53      	bge.n	800c406 <_dtoa_r+0x8f6>
 800c35e:	1e7b      	subs	r3, r7, #1
 800c360:	9304      	str	r3, [sp, #16]
 800c362:	4649      	mov	r1, r9
 800c364:	2300      	movs	r3, #0
 800c366:	220a      	movs	r2, #10
 800c368:	4658      	mov	r0, fp
 800c36a:	f000 fa41 	bl	800c7f0 <__multadd>
 800c36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c370:	4681      	mov	r9, r0
 800c372:	2b00      	cmp	r3, #0
 800c374:	f000 8172 	beq.w	800c65c <_dtoa_r+0xb4c>
 800c378:	2300      	movs	r3, #0
 800c37a:	4629      	mov	r1, r5
 800c37c:	220a      	movs	r2, #10
 800c37e:	4658      	mov	r0, fp
 800c380:	f000 fa36 	bl	800c7f0 <__multadd>
 800c384:	9b00      	ldr	r3, [sp, #0]
 800c386:	2b00      	cmp	r3, #0
 800c388:	4605      	mov	r5, r0
 800c38a:	dc67      	bgt.n	800c45c <_dtoa_r+0x94c>
 800c38c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c38e:	2b02      	cmp	r3, #2
 800c390:	dc41      	bgt.n	800c416 <_dtoa_r+0x906>
 800c392:	e063      	b.n	800c45c <_dtoa_r+0x94c>
 800c394:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c396:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c39a:	e746      	b.n	800c22a <_dtoa_r+0x71a>
 800c39c:	9b07      	ldr	r3, [sp, #28]
 800c39e:	1e5c      	subs	r4, r3, #1
 800c3a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c3a2:	42a3      	cmp	r3, r4
 800c3a4:	bfbf      	itttt	lt
 800c3a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c3a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c3aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c3ac:	1ae3      	sublt	r3, r4, r3
 800c3ae:	bfb4      	ite	lt
 800c3b0:	18d2      	addlt	r2, r2, r3
 800c3b2:	1b1c      	subge	r4, r3, r4
 800c3b4:	9b07      	ldr	r3, [sp, #28]
 800c3b6:	bfbc      	itt	lt
 800c3b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c3ba:	2400      	movlt	r4, #0
 800c3bc:	2b00      	cmp	r3, #0
 800c3be:	bfb5      	itete	lt
 800c3c0:	eba8 0603 	sublt.w	r6, r8, r3
 800c3c4:	9b07      	ldrge	r3, [sp, #28]
 800c3c6:	2300      	movlt	r3, #0
 800c3c8:	4646      	movge	r6, r8
 800c3ca:	e730      	b.n	800c22e <_dtoa_r+0x71e>
 800c3cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c3ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c3d0:	4646      	mov	r6, r8
 800c3d2:	e735      	b.n	800c240 <_dtoa_r+0x730>
 800c3d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c3d6:	e75c      	b.n	800c292 <_dtoa_r+0x782>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	e788      	b.n	800c2ee <_dtoa_r+0x7de>
 800c3dc:	3fe00000 	.word	0x3fe00000
 800c3e0:	40240000 	.word	0x40240000
 800c3e4:	40140000 	.word	0x40140000
 800c3e8:	9b02      	ldr	r3, [sp, #8]
 800c3ea:	e780      	b.n	800c2ee <_dtoa_r+0x7de>
 800c3ec:	2300      	movs	r3, #0
 800c3ee:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3f0:	e782      	b.n	800c2f8 <_dtoa_r+0x7e8>
 800c3f2:	d099      	beq.n	800c328 <_dtoa_r+0x818>
 800c3f4:	9a08      	ldr	r2, [sp, #32]
 800c3f6:	331c      	adds	r3, #28
 800c3f8:	441a      	add	r2, r3
 800c3fa:	4498      	add	r8, r3
 800c3fc:	441e      	add	r6, r3
 800c3fe:	9208      	str	r2, [sp, #32]
 800c400:	e792      	b.n	800c328 <_dtoa_r+0x818>
 800c402:	4603      	mov	r3, r0
 800c404:	e7f6      	b.n	800c3f4 <_dtoa_r+0x8e4>
 800c406:	9b07      	ldr	r3, [sp, #28]
 800c408:	9704      	str	r7, [sp, #16]
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	dc20      	bgt.n	800c450 <_dtoa_r+0x940>
 800c40e:	9300      	str	r3, [sp, #0]
 800c410:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c412:	2b02      	cmp	r3, #2
 800c414:	dd1e      	ble.n	800c454 <_dtoa_r+0x944>
 800c416:	9b00      	ldr	r3, [sp, #0]
 800c418:	2b00      	cmp	r3, #0
 800c41a:	f47f aec0 	bne.w	800c19e <_dtoa_r+0x68e>
 800c41e:	4621      	mov	r1, r4
 800c420:	2205      	movs	r2, #5
 800c422:	4658      	mov	r0, fp
 800c424:	f000 f9e4 	bl	800c7f0 <__multadd>
 800c428:	4601      	mov	r1, r0
 800c42a:	4604      	mov	r4, r0
 800c42c:	4648      	mov	r0, r9
 800c42e:	f000 fbf7 	bl	800cc20 <__mcmp>
 800c432:	2800      	cmp	r0, #0
 800c434:	f77f aeb3 	ble.w	800c19e <_dtoa_r+0x68e>
 800c438:	4656      	mov	r6, sl
 800c43a:	2331      	movs	r3, #49	@ 0x31
 800c43c:	f806 3b01 	strb.w	r3, [r6], #1
 800c440:	9b04      	ldr	r3, [sp, #16]
 800c442:	3301      	adds	r3, #1
 800c444:	9304      	str	r3, [sp, #16]
 800c446:	e6ae      	b.n	800c1a6 <_dtoa_r+0x696>
 800c448:	9c07      	ldr	r4, [sp, #28]
 800c44a:	9704      	str	r7, [sp, #16]
 800c44c:	4625      	mov	r5, r4
 800c44e:	e7f3      	b.n	800c438 <_dtoa_r+0x928>
 800c450:	9b07      	ldr	r3, [sp, #28]
 800c452:	9300      	str	r3, [sp, #0]
 800c454:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c456:	2b00      	cmp	r3, #0
 800c458:	f000 8104 	beq.w	800c664 <_dtoa_r+0xb54>
 800c45c:	2e00      	cmp	r6, #0
 800c45e:	dd05      	ble.n	800c46c <_dtoa_r+0x95c>
 800c460:	4629      	mov	r1, r5
 800c462:	4632      	mov	r2, r6
 800c464:	4658      	mov	r0, fp
 800c466:	f000 fb6f 	bl	800cb48 <__lshift>
 800c46a:	4605      	mov	r5, r0
 800c46c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c46e:	2b00      	cmp	r3, #0
 800c470:	d05a      	beq.n	800c528 <_dtoa_r+0xa18>
 800c472:	6869      	ldr	r1, [r5, #4]
 800c474:	4658      	mov	r0, fp
 800c476:	f000 f959 	bl	800c72c <_Balloc>
 800c47a:	4606      	mov	r6, r0
 800c47c:	b928      	cbnz	r0, 800c48a <_dtoa_r+0x97a>
 800c47e:	4b84      	ldr	r3, [pc, #528]	@ (800c690 <_dtoa_r+0xb80>)
 800c480:	4602      	mov	r2, r0
 800c482:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c486:	f7ff bb5a 	b.w	800bb3e <_dtoa_r+0x2e>
 800c48a:	692a      	ldr	r2, [r5, #16]
 800c48c:	3202      	adds	r2, #2
 800c48e:	0092      	lsls	r2, r2, #2
 800c490:	f105 010c 	add.w	r1, r5, #12
 800c494:	300c      	adds	r0, #12
 800c496:	f7ff faa4 	bl	800b9e2 <memcpy>
 800c49a:	2201      	movs	r2, #1
 800c49c:	4631      	mov	r1, r6
 800c49e:	4658      	mov	r0, fp
 800c4a0:	f000 fb52 	bl	800cb48 <__lshift>
 800c4a4:	f10a 0301 	add.w	r3, sl, #1
 800c4a8:	9307      	str	r3, [sp, #28]
 800c4aa:	9b00      	ldr	r3, [sp, #0]
 800c4ac:	4453      	add	r3, sl
 800c4ae:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c4b0:	9b02      	ldr	r3, [sp, #8]
 800c4b2:	f003 0301 	and.w	r3, r3, #1
 800c4b6:	462f      	mov	r7, r5
 800c4b8:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4ba:	4605      	mov	r5, r0
 800c4bc:	9b07      	ldr	r3, [sp, #28]
 800c4be:	4621      	mov	r1, r4
 800c4c0:	3b01      	subs	r3, #1
 800c4c2:	4648      	mov	r0, r9
 800c4c4:	9300      	str	r3, [sp, #0]
 800c4c6:	f7ff fa9a 	bl	800b9fe <quorem>
 800c4ca:	4639      	mov	r1, r7
 800c4cc:	9002      	str	r0, [sp, #8]
 800c4ce:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c4d2:	4648      	mov	r0, r9
 800c4d4:	f000 fba4 	bl	800cc20 <__mcmp>
 800c4d8:	462a      	mov	r2, r5
 800c4da:	9008      	str	r0, [sp, #32]
 800c4dc:	4621      	mov	r1, r4
 800c4de:	4658      	mov	r0, fp
 800c4e0:	f000 fbba 	bl	800cc58 <__mdiff>
 800c4e4:	68c2      	ldr	r2, [r0, #12]
 800c4e6:	4606      	mov	r6, r0
 800c4e8:	bb02      	cbnz	r2, 800c52c <_dtoa_r+0xa1c>
 800c4ea:	4601      	mov	r1, r0
 800c4ec:	4648      	mov	r0, r9
 800c4ee:	f000 fb97 	bl	800cc20 <__mcmp>
 800c4f2:	4602      	mov	r2, r0
 800c4f4:	4631      	mov	r1, r6
 800c4f6:	4658      	mov	r0, fp
 800c4f8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c4fa:	f000 f957 	bl	800c7ac <_Bfree>
 800c4fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c500:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c502:	9e07      	ldr	r6, [sp, #28]
 800c504:	ea43 0102 	orr.w	r1, r3, r2
 800c508:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c50a:	4319      	orrs	r1, r3
 800c50c:	d110      	bne.n	800c530 <_dtoa_r+0xa20>
 800c50e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c512:	d029      	beq.n	800c568 <_dtoa_r+0xa58>
 800c514:	9b08      	ldr	r3, [sp, #32]
 800c516:	2b00      	cmp	r3, #0
 800c518:	dd02      	ble.n	800c520 <_dtoa_r+0xa10>
 800c51a:	9b02      	ldr	r3, [sp, #8]
 800c51c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c520:	9b00      	ldr	r3, [sp, #0]
 800c522:	f883 8000 	strb.w	r8, [r3]
 800c526:	e63f      	b.n	800c1a8 <_dtoa_r+0x698>
 800c528:	4628      	mov	r0, r5
 800c52a:	e7bb      	b.n	800c4a4 <_dtoa_r+0x994>
 800c52c:	2201      	movs	r2, #1
 800c52e:	e7e1      	b.n	800c4f4 <_dtoa_r+0x9e4>
 800c530:	9b08      	ldr	r3, [sp, #32]
 800c532:	2b00      	cmp	r3, #0
 800c534:	db04      	blt.n	800c540 <_dtoa_r+0xa30>
 800c536:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c538:	430b      	orrs	r3, r1
 800c53a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c53c:	430b      	orrs	r3, r1
 800c53e:	d120      	bne.n	800c582 <_dtoa_r+0xa72>
 800c540:	2a00      	cmp	r2, #0
 800c542:	dded      	ble.n	800c520 <_dtoa_r+0xa10>
 800c544:	4649      	mov	r1, r9
 800c546:	2201      	movs	r2, #1
 800c548:	4658      	mov	r0, fp
 800c54a:	f000 fafd 	bl	800cb48 <__lshift>
 800c54e:	4621      	mov	r1, r4
 800c550:	4681      	mov	r9, r0
 800c552:	f000 fb65 	bl	800cc20 <__mcmp>
 800c556:	2800      	cmp	r0, #0
 800c558:	dc03      	bgt.n	800c562 <_dtoa_r+0xa52>
 800c55a:	d1e1      	bne.n	800c520 <_dtoa_r+0xa10>
 800c55c:	f018 0f01 	tst.w	r8, #1
 800c560:	d0de      	beq.n	800c520 <_dtoa_r+0xa10>
 800c562:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c566:	d1d8      	bne.n	800c51a <_dtoa_r+0xa0a>
 800c568:	9a00      	ldr	r2, [sp, #0]
 800c56a:	2339      	movs	r3, #57	@ 0x39
 800c56c:	7013      	strb	r3, [r2, #0]
 800c56e:	4633      	mov	r3, r6
 800c570:	461e      	mov	r6, r3
 800c572:	3b01      	subs	r3, #1
 800c574:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c578:	2a39      	cmp	r2, #57	@ 0x39
 800c57a:	d052      	beq.n	800c622 <_dtoa_r+0xb12>
 800c57c:	3201      	adds	r2, #1
 800c57e:	701a      	strb	r2, [r3, #0]
 800c580:	e612      	b.n	800c1a8 <_dtoa_r+0x698>
 800c582:	2a00      	cmp	r2, #0
 800c584:	dd07      	ble.n	800c596 <_dtoa_r+0xa86>
 800c586:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c58a:	d0ed      	beq.n	800c568 <_dtoa_r+0xa58>
 800c58c:	9a00      	ldr	r2, [sp, #0]
 800c58e:	f108 0301 	add.w	r3, r8, #1
 800c592:	7013      	strb	r3, [r2, #0]
 800c594:	e608      	b.n	800c1a8 <_dtoa_r+0x698>
 800c596:	9b07      	ldr	r3, [sp, #28]
 800c598:	9a07      	ldr	r2, [sp, #28]
 800c59a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c59e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d028      	beq.n	800c5f6 <_dtoa_r+0xae6>
 800c5a4:	4649      	mov	r1, r9
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	220a      	movs	r2, #10
 800c5aa:	4658      	mov	r0, fp
 800c5ac:	f000 f920 	bl	800c7f0 <__multadd>
 800c5b0:	42af      	cmp	r7, r5
 800c5b2:	4681      	mov	r9, r0
 800c5b4:	f04f 0300 	mov.w	r3, #0
 800c5b8:	f04f 020a 	mov.w	r2, #10
 800c5bc:	4639      	mov	r1, r7
 800c5be:	4658      	mov	r0, fp
 800c5c0:	d107      	bne.n	800c5d2 <_dtoa_r+0xac2>
 800c5c2:	f000 f915 	bl	800c7f0 <__multadd>
 800c5c6:	4607      	mov	r7, r0
 800c5c8:	4605      	mov	r5, r0
 800c5ca:	9b07      	ldr	r3, [sp, #28]
 800c5cc:	3301      	adds	r3, #1
 800c5ce:	9307      	str	r3, [sp, #28]
 800c5d0:	e774      	b.n	800c4bc <_dtoa_r+0x9ac>
 800c5d2:	f000 f90d 	bl	800c7f0 <__multadd>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	4607      	mov	r7, r0
 800c5da:	2300      	movs	r3, #0
 800c5dc:	220a      	movs	r2, #10
 800c5de:	4658      	mov	r0, fp
 800c5e0:	f000 f906 	bl	800c7f0 <__multadd>
 800c5e4:	4605      	mov	r5, r0
 800c5e6:	e7f0      	b.n	800c5ca <_dtoa_r+0xaba>
 800c5e8:	9b00      	ldr	r3, [sp, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	bfcc      	ite	gt
 800c5ee:	461e      	movgt	r6, r3
 800c5f0:	2601      	movle	r6, #1
 800c5f2:	4456      	add	r6, sl
 800c5f4:	2700      	movs	r7, #0
 800c5f6:	4649      	mov	r1, r9
 800c5f8:	2201      	movs	r2, #1
 800c5fa:	4658      	mov	r0, fp
 800c5fc:	f000 faa4 	bl	800cb48 <__lshift>
 800c600:	4621      	mov	r1, r4
 800c602:	4681      	mov	r9, r0
 800c604:	f000 fb0c 	bl	800cc20 <__mcmp>
 800c608:	2800      	cmp	r0, #0
 800c60a:	dcb0      	bgt.n	800c56e <_dtoa_r+0xa5e>
 800c60c:	d102      	bne.n	800c614 <_dtoa_r+0xb04>
 800c60e:	f018 0f01 	tst.w	r8, #1
 800c612:	d1ac      	bne.n	800c56e <_dtoa_r+0xa5e>
 800c614:	4633      	mov	r3, r6
 800c616:	461e      	mov	r6, r3
 800c618:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c61c:	2a30      	cmp	r2, #48	@ 0x30
 800c61e:	d0fa      	beq.n	800c616 <_dtoa_r+0xb06>
 800c620:	e5c2      	b.n	800c1a8 <_dtoa_r+0x698>
 800c622:	459a      	cmp	sl, r3
 800c624:	d1a4      	bne.n	800c570 <_dtoa_r+0xa60>
 800c626:	9b04      	ldr	r3, [sp, #16]
 800c628:	3301      	adds	r3, #1
 800c62a:	9304      	str	r3, [sp, #16]
 800c62c:	2331      	movs	r3, #49	@ 0x31
 800c62e:	f88a 3000 	strb.w	r3, [sl]
 800c632:	e5b9      	b.n	800c1a8 <_dtoa_r+0x698>
 800c634:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c636:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c694 <_dtoa_r+0xb84>
 800c63a:	b11b      	cbz	r3, 800c644 <_dtoa_r+0xb34>
 800c63c:	f10a 0308 	add.w	r3, sl, #8
 800c640:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c642:	6013      	str	r3, [r2, #0]
 800c644:	4650      	mov	r0, sl
 800c646:	b019      	add	sp, #100	@ 0x64
 800c648:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c64c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c64e:	2b01      	cmp	r3, #1
 800c650:	f77f ae37 	ble.w	800c2c2 <_dtoa_r+0x7b2>
 800c654:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c656:	930a      	str	r3, [sp, #40]	@ 0x28
 800c658:	2001      	movs	r0, #1
 800c65a:	e655      	b.n	800c308 <_dtoa_r+0x7f8>
 800c65c:	9b00      	ldr	r3, [sp, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	f77f aed6 	ble.w	800c410 <_dtoa_r+0x900>
 800c664:	4656      	mov	r6, sl
 800c666:	4621      	mov	r1, r4
 800c668:	4648      	mov	r0, r9
 800c66a:	f7ff f9c8 	bl	800b9fe <quorem>
 800c66e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c672:	f806 8b01 	strb.w	r8, [r6], #1
 800c676:	9b00      	ldr	r3, [sp, #0]
 800c678:	eba6 020a 	sub.w	r2, r6, sl
 800c67c:	4293      	cmp	r3, r2
 800c67e:	ddb3      	ble.n	800c5e8 <_dtoa_r+0xad8>
 800c680:	4649      	mov	r1, r9
 800c682:	2300      	movs	r3, #0
 800c684:	220a      	movs	r2, #10
 800c686:	4658      	mov	r0, fp
 800c688:	f000 f8b2 	bl	800c7f0 <__multadd>
 800c68c:	4681      	mov	r9, r0
 800c68e:	e7ea      	b.n	800c666 <_dtoa_r+0xb56>
 800c690:	0800e2cb 	.word	0x0800e2cb
 800c694:	0800e24f 	.word	0x0800e24f

0800c698 <_free_r>:
 800c698:	b538      	push	{r3, r4, r5, lr}
 800c69a:	4605      	mov	r5, r0
 800c69c:	2900      	cmp	r1, #0
 800c69e:	d041      	beq.n	800c724 <_free_r+0x8c>
 800c6a0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c6a4:	1f0c      	subs	r4, r1, #4
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	bfb8      	it	lt
 800c6aa:	18e4      	addlt	r4, r4, r3
 800c6ac:	f7fe fb1a 	bl	800ace4 <__malloc_lock>
 800c6b0:	4a1d      	ldr	r2, [pc, #116]	@ (800c728 <_free_r+0x90>)
 800c6b2:	6813      	ldr	r3, [r2, #0]
 800c6b4:	b933      	cbnz	r3, 800c6c4 <_free_r+0x2c>
 800c6b6:	6063      	str	r3, [r4, #4]
 800c6b8:	6014      	str	r4, [r2, #0]
 800c6ba:	4628      	mov	r0, r5
 800c6bc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c6c0:	f7fe bb16 	b.w	800acf0 <__malloc_unlock>
 800c6c4:	42a3      	cmp	r3, r4
 800c6c6:	d908      	bls.n	800c6da <_free_r+0x42>
 800c6c8:	6820      	ldr	r0, [r4, #0]
 800c6ca:	1821      	adds	r1, r4, r0
 800c6cc:	428b      	cmp	r3, r1
 800c6ce:	bf01      	itttt	eq
 800c6d0:	6819      	ldreq	r1, [r3, #0]
 800c6d2:	685b      	ldreq	r3, [r3, #4]
 800c6d4:	1809      	addeq	r1, r1, r0
 800c6d6:	6021      	streq	r1, [r4, #0]
 800c6d8:	e7ed      	b.n	800c6b6 <_free_r+0x1e>
 800c6da:	461a      	mov	r2, r3
 800c6dc:	685b      	ldr	r3, [r3, #4]
 800c6de:	b10b      	cbz	r3, 800c6e4 <_free_r+0x4c>
 800c6e0:	42a3      	cmp	r3, r4
 800c6e2:	d9fa      	bls.n	800c6da <_free_r+0x42>
 800c6e4:	6811      	ldr	r1, [r2, #0]
 800c6e6:	1850      	adds	r0, r2, r1
 800c6e8:	42a0      	cmp	r0, r4
 800c6ea:	d10b      	bne.n	800c704 <_free_r+0x6c>
 800c6ec:	6820      	ldr	r0, [r4, #0]
 800c6ee:	4401      	add	r1, r0
 800c6f0:	1850      	adds	r0, r2, r1
 800c6f2:	4283      	cmp	r3, r0
 800c6f4:	6011      	str	r1, [r2, #0]
 800c6f6:	d1e0      	bne.n	800c6ba <_free_r+0x22>
 800c6f8:	6818      	ldr	r0, [r3, #0]
 800c6fa:	685b      	ldr	r3, [r3, #4]
 800c6fc:	6053      	str	r3, [r2, #4]
 800c6fe:	4408      	add	r0, r1
 800c700:	6010      	str	r0, [r2, #0]
 800c702:	e7da      	b.n	800c6ba <_free_r+0x22>
 800c704:	d902      	bls.n	800c70c <_free_r+0x74>
 800c706:	230c      	movs	r3, #12
 800c708:	602b      	str	r3, [r5, #0]
 800c70a:	e7d6      	b.n	800c6ba <_free_r+0x22>
 800c70c:	6820      	ldr	r0, [r4, #0]
 800c70e:	1821      	adds	r1, r4, r0
 800c710:	428b      	cmp	r3, r1
 800c712:	bf04      	itt	eq
 800c714:	6819      	ldreq	r1, [r3, #0]
 800c716:	685b      	ldreq	r3, [r3, #4]
 800c718:	6063      	str	r3, [r4, #4]
 800c71a:	bf04      	itt	eq
 800c71c:	1809      	addeq	r1, r1, r0
 800c71e:	6021      	streq	r1, [r4, #0]
 800c720:	6054      	str	r4, [r2, #4]
 800c722:	e7ca      	b.n	800c6ba <_free_r+0x22>
 800c724:	bd38      	pop	{r3, r4, r5, pc}
 800c726:	bf00      	nop
 800c728:	200008f4 	.word	0x200008f4

0800c72c <_Balloc>:
 800c72c:	b570      	push	{r4, r5, r6, lr}
 800c72e:	69c6      	ldr	r6, [r0, #28]
 800c730:	4604      	mov	r4, r0
 800c732:	460d      	mov	r5, r1
 800c734:	b976      	cbnz	r6, 800c754 <_Balloc+0x28>
 800c736:	2010      	movs	r0, #16
 800c738:	f7fe fa22 	bl	800ab80 <malloc>
 800c73c:	4602      	mov	r2, r0
 800c73e:	61e0      	str	r0, [r4, #28]
 800c740:	b920      	cbnz	r0, 800c74c <_Balloc+0x20>
 800c742:	4b18      	ldr	r3, [pc, #96]	@ (800c7a4 <_Balloc+0x78>)
 800c744:	4818      	ldr	r0, [pc, #96]	@ (800c7a8 <_Balloc+0x7c>)
 800c746:	216b      	movs	r1, #107	@ 0x6b
 800c748:	f000 fd76 	bl	800d238 <__assert_func>
 800c74c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c750:	6006      	str	r6, [r0, #0]
 800c752:	60c6      	str	r6, [r0, #12]
 800c754:	69e6      	ldr	r6, [r4, #28]
 800c756:	68f3      	ldr	r3, [r6, #12]
 800c758:	b183      	cbz	r3, 800c77c <_Balloc+0x50>
 800c75a:	69e3      	ldr	r3, [r4, #28]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c762:	b9b8      	cbnz	r0, 800c794 <_Balloc+0x68>
 800c764:	2101      	movs	r1, #1
 800c766:	fa01 f605 	lsl.w	r6, r1, r5
 800c76a:	1d72      	adds	r2, r6, #5
 800c76c:	0092      	lsls	r2, r2, #2
 800c76e:	4620      	mov	r0, r4
 800c770:	f000 fd80 	bl	800d274 <_calloc_r>
 800c774:	b160      	cbz	r0, 800c790 <_Balloc+0x64>
 800c776:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c77a:	e00e      	b.n	800c79a <_Balloc+0x6e>
 800c77c:	2221      	movs	r2, #33	@ 0x21
 800c77e:	2104      	movs	r1, #4
 800c780:	4620      	mov	r0, r4
 800c782:	f000 fd77 	bl	800d274 <_calloc_r>
 800c786:	69e3      	ldr	r3, [r4, #28]
 800c788:	60f0      	str	r0, [r6, #12]
 800c78a:	68db      	ldr	r3, [r3, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d1e4      	bne.n	800c75a <_Balloc+0x2e>
 800c790:	2000      	movs	r0, #0
 800c792:	bd70      	pop	{r4, r5, r6, pc}
 800c794:	6802      	ldr	r2, [r0, #0]
 800c796:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c79a:	2300      	movs	r3, #0
 800c79c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c7a0:	e7f7      	b.n	800c792 <_Balloc+0x66>
 800c7a2:	bf00      	nop
 800c7a4:	0800e25c 	.word	0x0800e25c
 800c7a8:	0800e2dc 	.word	0x0800e2dc

0800c7ac <_Bfree>:
 800c7ac:	b570      	push	{r4, r5, r6, lr}
 800c7ae:	69c6      	ldr	r6, [r0, #28]
 800c7b0:	4605      	mov	r5, r0
 800c7b2:	460c      	mov	r4, r1
 800c7b4:	b976      	cbnz	r6, 800c7d4 <_Bfree+0x28>
 800c7b6:	2010      	movs	r0, #16
 800c7b8:	f7fe f9e2 	bl	800ab80 <malloc>
 800c7bc:	4602      	mov	r2, r0
 800c7be:	61e8      	str	r0, [r5, #28]
 800c7c0:	b920      	cbnz	r0, 800c7cc <_Bfree+0x20>
 800c7c2:	4b09      	ldr	r3, [pc, #36]	@ (800c7e8 <_Bfree+0x3c>)
 800c7c4:	4809      	ldr	r0, [pc, #36]	@ (800c7ec <_Bfree+0x40>)
 800c7c6:	218f      	movs	r1, #143	@ 0x8f
 800c7c8:	f000 fd36 	bl	800d238 <__assert_func>
 800c7cc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c7d0:	6006      	str	r6, [r0, #0]
 800c7d2:	60c6      	str	r6, [r0, #12]
 800c7d4:	b13c      	cbz	r4, 800c7e6 <_Bfree+0x3a>
 800c7d6:	69eb      	ldr	r3, [r5, #28]
 800c7d8:	6862      	ldr	r2, [r4, #4]
 800c7da:	68db      	ldr	r3, [r3, #12]
 800c7dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c7e0:	6021      	str	r1, [r4, #0]
 800c7e2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c7e6:	bd70      	pop	{r4, r5, r6, pc}
 800c7e8:	0800e25c 	.word	0x0800e25c
 800c7ec:	0800e2dc 	.word	0x0800e2dc

0800c7f0 <__multadd>:
 800c7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7f4:	690d      	ldr	r5, [r1, #16]
 800c7f6:	4607      	mov	r7, r0
 800c7f8:	460c      	mov	r4, r1
 800c7fa:	461e      	mov	r6, r3
 800c7fc:	f101 0c14 	add.w	ip, r1, #20
 800c800:	2000      	movs	r0, #0
 800c802:	f8dc 3000 	ldr.w	r3, [ip]
 800c806:	b299      	uxth	r1, r3
 800c808:	fb02 6101 	mla	r1, r2, r1, r6
 800c80c:	0c1e      	lsrs	r6, r3, #16
 800c80e:	0c0b      	lsrs	r3, r1, #16
 800c810:	fb02 3306 	mla	r3, r2, r6, r3
 800c814:	b289      	uxth	r1, r1
 800c816:	3001      	adds	r0, #1
 800c818:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c81c:	4285      	cmp	r5, r0
 800c81e:	f84c 1b04 	str.w	r1, [ip], #4
 800c822:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c826:	dcec      	bgt.n	800c802 <__multadd+0x12>
 800c828:	b30e      	cbz	r6, 800c86e <__multadd+0x7e>
 800c82a:	68a3      	ldr	r3, [r4, #8]
 800c82c:	42ab      	cmp	r3, r5
 800c82e:	dc19      	bgt.n	800c864 <__multadd+0x74>
 800c830:	6861      	ldr	r1, [r4, #4]
 800c832:	4638      	mov	r0, r7
 800c834:	3101      	adds	r1, #1
 800c836:	f7ff ff79 	bl	800c72c <_Balloc>
 800c83a:	4680      	mov	r8, r0
 800c83c:	b928      	cbnz	r0, 800c84a <__multadd+0x5a>
 800c83e:	4602      	mov	r2, r0
 800c840:	4b0c      	ldr	r3, [pc, #48]	@ (800c874 <__multadd+0x84>)
 800c842:	480d      	ldr	r0, [pc, #52]	@ (800c878 <__multadd+0x88>)
 800c844:	21ba      	movs	r1, #186	@ 0xba
 800c846:	f000 fcf7 	bl	800d238 <__assert_func>
 800c84a:	6922      	ldr	r2, [r4, #16]
 800c84c:	3202      	adds	r2, #2
 800c84e:	f104 010c 	add.w	r1, r4, #12
 800c852:	0092      	lsls	r2, r2, #2
 800c854:	300c      	adds	r0, #12
 800c856:	f7ff f8c4 	bl	800b9e2 <memcpy>
 800c85a:	4621      	mov	r1, r4
 800c85c:	4638      	mov	r0, r7
 800c85e:	f7ff ffa5 	bl	800c7ac <_Bfree>
 800c862:	4644      	mov	r4, r8
 800c864:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c868:	3501      	adds	r5, #1
 800c86a:	615e      	str	r6, [r3, #20]
 800c86c:	6125      	str	r5, [r4, #16]
 800c86e:	4620      	mov	r0, r4
 800c870:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c874:	0800e2cb 	.word	0x0800e2cb
 800c878:	0800e2dc 	.word	0x0800e2dc

0800c87c <__hi0bits>:
 800c87c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800c880:	4603      	mov	r3, r0
 800c882:	bf36      	itet	cc
 800c884:	0403      	lslcc	r3, r0, #16
 800c886:	2000      	movcs	r0, #0
 800c888:	2010      	movcc	r0, #16
 800c88a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800c88e:	bf3c      	itt	cc
 800c890:	021b      	lslcc	r3, r3, #8
 800c892:	3008      	addcc	r0, #8
 800c894:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c898:	bf3c      	itt	cc
 800c89a:	011b      	lslcc	r3, r3, #4
 800c89c:	3004      	addcc	r0, #4
 800c89e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c8a2:	bf3c      	itt	cc
 800c8a4:	009b      	lslcc	r3, r3, #2
 800c8a6:	3002      	addcc	r0, #2
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	db05      	blt.n	800c8b8 <__hi0bits+0x3c>
 800c8ac:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800c8b0:	f100 0001 	add.w	r0, r0, #1
 800c8b4:	bf08      	it	eq
 800c8b6:	2020      	moveq	r0, #32
 800c8b8:	4770      	bx	lr

0800c8ba <__lo0bits>:
 800c8ba:	6803      	ldr	r3, [r0, #0]
 800c8bc:	4602      	mov	r2, r0
 800c8be:	f013 0007 	ands.w	r0, r3, #7
 800c8c2:	d00b      	beq.n	800c8dc <__lo0bits+0x22>
 800c8c4:	07d9      	lsls	r1, r3, #31
 800c8c6:	d421      	bmi.n	800c90c <__lo0bits+0x52>
 800c8c8:	0798      	lsls	r0, r3, #30
 800c8ca:	bf49      	itett	mi
 800c8cc:	085b      	lsrmi	r3, r3, #1
 800c8ce:	089b      	lsrpl	r3, r3, #2
 800c8d0:	2001      	movmi	r0, #1
 800c8d2:	6013      	strmi	r3, [r2, #0]
 800c8d4:	bf5c      	itt	pl
 800c8d6:	6013      	strpl	r3, [r2, #0]
 800c8d8:	2002      	movpl	r0, #2
 800c8da:	4770      	bx	lr
 800c8dc:	b299      	uxth	r1, r3
 800c8de:	b909      	cbnz	r1, 800c8e4 <__lo0bits+0x2a>
 800c8e0:	0c1b      	lsrs	r3, r3, #16
 800c8e2:	2010      	movs	r0, #16
 800c8e4:	b2d9      	uxtb	r1, r3
 800c8e6:	b909      	cbnz	r1, 800c8ec <__lo0bits+0x32>
 800c8e8:	3008      	adds	r0, #8
 800c8ea:	0a1b      	lsrs	r3, r3, #8
 800c8ec:	0719      	lsls	r1, r3, #28
 800c8ee:	bf04      	itt	eq
 800c8f0:	091b      	lsreq	r3, r3, #4
 800c8f2:	3004      	addeq	r0, #4
 800c8f4:	0799      	lsls	r1, r3, #30
 800c8f6:	bf04      	itt	eq
 800c8f8:	089b      	lsreq	r3, r3, #2
 800c8fa:	3002      	addeq	r0, #2
 800c8fc:	07d9      	lsls	r1, r3, #31
 800c8fe:	d403      	bmi.n	800c908 <__lo0bits+0x4e>
 800c900:	085b      	lsrs	r3, r3, #1
 800c902:	f100 0001 	add.w	r0, r0, #1
 800c906:	d003      	beq.n	800c910 <__lo0bits+0x56>
 800c908:	6013      	str	r3, [r2, #0]
 800c90a:	4770      	bx	lr
 800c90c:	2000      	movs	r0, #0
 800c90e:	4770      	bx	lr
 800c910:	2020      	movs	r0, #32
 800c912:	4770      	bx	lr

0800c914 <__i2b>:
 800c914:	b510      	push	{r4, lr}
 800c916:	460c      	mov	r4, r1
 800c918:	2101      	movs	r1, #1
 800c91a:	f7ff ff07 	bl	800c72c <_Balloc>
 800c91e:	4602      	mov	r2, r0
 800c920:	b928      	cbnz	r0, 800c92e <__i2b+0x1a>
 800c922:	4b05      	ldr	r3, [pc, #20]	@ (800c938 <__i2b+0x24>)
 800c924:	4805      	ldr	r0, [pc, #20]	@ (800c93c <__i2b+0x28>)
 800c926:	f240 1145 	movw	r1, #325	@ 0x145
 800c92a:	f000 fc85 	bl	800d238 <__assert_func>
 800c92e:	2301      	movs	r3, #1
 800c930:	6144      	str	r4, [r0, #20]
 800c932:	6103      	str	r3, [r0, #16]
 800c934:	bd10      	pop	{r4, pc}
 800c936:	bf00      	nop
 800c938:	0800e2cb 	.word	0x0800e2cb
 800c93c:	0800e2dc 	.word	0x0800e2dc

0800c940 <__multiply>:
 800c940:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c944:	4614      	mov	r4, r2
 800c946:	690a      	ldr	r2, [r1, #16]
 800c948:	6923      	ldr	r3, [r4, #16]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	bfa8      	it	ge
 800c94e:	4623      	movge	r3, r4
 800c950:	460f      	mov	r7, r1
 800c952:	bfa4      	itt	ge
 800c954:	460c      	movge	r4, r1
 800c956:	461f      	movge	r7, r3
 800c958:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800c95c:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800c960:	68a3      	ldr	r3, [r4, #8]
 800c962:	6861      	ldr	r1, [r4, #4]
 800c964:	eb0a 0609 	add.w	r6, sl, r9
 800c968:	42b3      	cmp	r3, r6
 800c96a:	b085      	sub	sp, #20
 800c96c:	bfb8      	it	lt
 800c96e:	3101      	addlt	r1, #1
 800c970:	f7ff fedc 	bl	800c72c <_Balloc>
 800c974:	b930      	cbnz	r0, 800c984 <__multiply+0x44>
 800c976:	4602      	mov	r2, r0
 800c978:	4b44      	ldr	r3, [pc, #272]	@ (800ca8c <__multiply+0x14c>)
 800c97a:	4845      	ldr	r0, [pc, #276]	@ (800ca90 <__multiply+0x150>)
 800c97c:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800c980:	f000 fc5a 	bl	800d238 <__assert_func>
 800c984:	f100 0514 	add.w	r5, r0, #20
 800c988:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c98c:	462b      	mov	r3, r5
 800c98e:	2200      	movs	r2, #0
 800c990:	4543      	cmp	r3, r8
 800c992:	d321      	bcc.n	800c9d8 <__multiply+0x98>
 800c994:	f107 0114 	add.w	r1, r7, #20
 800c998:	f104 0214 	add.w	r2, r4, #20
 800c99c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800c9a0:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800c9a4:	9302      	str	r3, [sp, #8]
 800c9a6:	1b13      	subs	r3, r2, r4
 800c9a8:	3b15      	subs	r3, #21
 800c9aa:	f023 0303 	bic.w	r3, r3, #3
 800c9ae:	3304      	adds	r3, #4
 800c9b0:	f104 0715 	add.w	r7, r4, #21
 800c9b4:	42ba      	cmp	r2, r7
 800c9b6:	bf38      	it	cc
 800c9b8:	2304      	movcc	r3, #4
 800c9ba:	9301      	str	r3, [sp, #4]
 800c9bc:	9b02      	ldr	r3, [sp, #8]
 800c9be:	9103      	str	r1, [sp, #12]
 800c9c0:	428b      	cmp	r3, r1
 800c9c2:	d80c      	bhi.n	800c9de <__multiply+0x9e>
 800c9c4:	2e00      	cmp	r6, #0
 800c9c6:	dd03      	ble.n	800c9d0 <__multiply+0x90>
 800c9c8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d05b      	beq.n	800ca88 <__multiply+0x148>
 800c9d0:	6106      	str	r6, [r0, #16]
 800c9d2:	b005      	add	sp, #20
 800c9d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9d8:	f843 2b04 	str.w	r2, [r3], #4
 800c9dc:	e7d8      	b.n	800c990 <__multiply+0x50>
 800c9de:	f8b1 a000 	ldrh.w	sl, [r1]
 800c9e2:	f1ba 0f00 	cmp.w	sl, #0
 800c9e6:	d024      	beq.n	800ca32 <__multiply+0xf2>
 800c9e8:	f104 0e14 	add.w	lr, r4, #20
 800c9ec:	46a9      	mov	r9, r5
 800c9ee:	f04f 0c00 	mov.w	ip, #0
 800c9f2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c9f6:	f8d9 3000 	ldr.w	r3, [r9]
 800c9fa:	fa1f fb87 	uxth.w	fp, r7
 800c9fe:	b29b      	uxth	r3, r3
 800ca00:	fb0a 330b 	mla	r3, sl, fp, r3
 800ca04:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ca08:	f8d9 7000 	ldr.w	r7, [r9]
 800ca0c:	4463      	add	r3, ip
 800ca0e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca12:	fb0a c70b 	mla	r7, sl, fp, ip
 800ca16:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ca1a:	b29b      	uxth	r3, r3
 800ca1c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca20:	4572      	cmp	r2, lr
 800ca22:	f849 3b04 	str.w	r3, [r9], #4
 800ca26:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ca2a:	d8e2      	bhi.n	800c9f2 <__multiply+0xb2>
 800ca2c:	9b01      	ldr	r3, [sp, #4]
 800ca2e:	f845 c003 	str.w	ip, [r5, r3]
 800ca32:	9b03      	ldr	r3, [sp, #12]
 800ca34:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ca38:	3104      	adds	r1, #4
 800ca3a:	f1b9 0f00 	cmp.w	r9, #0
 800ca3e:	d021      	beq.n	800ca84 <__multiply+0x144>
 800ca40:	682b      	ldr	r3, [r5, #0]
 800ca42:	f104 0c14 	add.w	ip, r4, #20
 800ca46:	46ae      	mov	lr, r5
 800ca48:	f04f 0a00 	mov.w	sl, #0
 800ca4c:	f8bc b000 	ldrh.w	fp, [ip]
 800ca50:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ca54:	fb09 770b 	mla	r7, r9, fp, r7
 800ca58:	4457      	add	r7, sl
 800ca5a:	b29b      	uxth	r3, r3
 800ca5c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ca60:	f84e 3b04 	str.w	r3, [lr], #4
 800ca64:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ca68:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca6c:	f8be 3000 	ldrh.w	r3, [lr]
 800ca70:	fb09 330a 	mla	r3, r9, sl, r3
 800ca74:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ca78:	4562      	cmp	r2, ip
 800ca7a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ca7e:	d8e5      	bhi.n	800ca4c <__multiply+0x10c>
 800ca80:	9f01      	ldr	r7, [sp, #4]
 800ca82:	51eb      	str	r3, [r5, r7]
 800ca84:	3504      	adds	r5, #4
 800ca86:	e799      	b.n	800c9bc <__multiply+0x7c>
 800ca88:	3e01      	subs	r6, #1
 800ca8a:	e79b      	b.n	800c9c4 <__multiply+0x84>
 800ca8c:	0800e2cb 	.word	0x0800e2cb
 800ca90:	0800e2dc 	.word	0x0800e2dc

0800ca94 <__pow5mult>:
 800ca94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ca98:	4615      	mov	r5, r2
 800ca9a:	f012 0203 	ands.w	r2, r2, #3
 800ca9e:	4607      	mov	r7, r0
 800caa0:	460e      	mov	r6, r1
 800caa2:	d007      	beq.n	800cab4 <__pow5mult+0x20>
 800caa4:	4c25      	ldr	r4, [pc, #148]	@ (800cb3c <__pow5mult+0xa8>)
 800caa6:	3a01      	subs	r2, #1
 800caa8:	2300      	movs	r3, #0
 800caaa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800caae:	f7ff fe9f 	bl	800c7f0 <__multadd>
 800cab2:	4606      	mov	r6, r0
 800cab4:	10ad      	asrs	r5, r5, #2
 800cab6:	d03d      	beq.n	800cb34 <__pow5mult+0xa0>
 800cab8:	69fc      	ldr	r4, [r7, #28]
 800caba:	b97c      	cbnz	r4, 800cadc <__pow5mult+0x48>
 800cabc:	2010      	movs	r0, #16
 800cabe:	f7fe f85f 	bl	800ab80 <malloc>
 800cac2:	4602      	mov	r2, r0
 800cac4:	61f8      	str	r0, [r7, #28]
 800cac6:	b928      	cbnz	r0, 800cad4 <__pow5mult+0x40>
 800cac8:	4b1d      	ldr	r3, [pc, #116]	@ (800cb40 <__pow5mult+0xac>)
 800caca:	481e      	ldr	r0, [pc, #120]	@ (800cb44 <__pow5mult+0xb0>)
 800cacc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cad0:	f000 fbb2 	bl	800d238 <__assert_func>
 800cad4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cad8:	6004      	str	r4, [r0, #0]
 800cada:	60c4      	str	r4, [r0, #12]
 800cadc:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cae0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cae4:	b94c      	cbnz	r4, 800cafa <__pow5mult+0x66>
 800cae6:	f240 2171 	movw	r1, #625	@ 0x271
 800caea:	4638      	mov	r0, r7
 800caec:	f7ff ff12 	bl	800c914 <__i2b>
 800caf0:	2300      	movs	r3, #0
 800caf2:	f8c8 0008 	str.w	r0, [r8, #8]
 800caf6:	4604      	mov	r4, r0
 800caf8:	6003      	str	r3, [r0, #0]
 800cafa:	f04f 0900 	mov.w	r9, #0
 800cafe:	07eb      	lsls	r3, r5, #31
 800cb00:	d50a      	bpl.n	800cb18 <__pow5mult+0x84>
 800cb02:	4631      	mov	r1, r6
 800cb04:	4622      	mov	r2, r4
 800cb06:	4638      	mov	r0, r7
 800cb08:	f7ff ff1a 	bl	800c940 <__multiply>
 800cb0c:	4631      	mov	r1, r6
 800cb0e:	4680      	mov	r8, r0
 800cb10:	4638      	mov	r0, r7
 800cb12:	f7ff fe4b 	bl	800c7ac <_Bfree>
 800cb16:	4646      	mov	r6, r8
 800cb18:	106d      	asrs	r5, r5, #1
 800cb1a:	d00b      	beq.n	800cb34 <__pow5mult+0xa0>
 800cb1c:	6820      	ldr	r0, [r4, #0]
 800cb1e:	b938      	cbnz	r0, 800cb30 <__pow5mult+0x9c>
 800cb20:	4622      	mov	r2, r4
 800cb22:	4621      	mov	r1, r4
 800cb24:	4638      	mov	r0, r7
 800cb26:	f7ff ff0b 	bl	800c940 <__multiply>
 800cb2a:	6020      	str	r0, [r4, #0]
 800cb2c:	f8c0 9000 	str.w	r9, [r0]
 800cb30:	4604      	mov	r4, r0
 800cb32:	e7e4      	b.n	800cafe <__pow5mult+0x6a>
 800cb34:	4630      	mov	r0, r6
 800cb36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb3a:	bf00      	nop
 800cb3c:	0800e338 	.word	0x0800e338
 800cb40:	0800e25c 	.word	0x0800e25c
 800cb44:	0800e2dc 	.word	0x0800e2dc

0800cb48 <__lshift>:
 800cb48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cb4c:	460c      	mov	r4, r1
 800cb4e:	6849      	ldr	r1, [r1, #4]
 800cb50:	6923      	ldr	r3, [r4, #16]
 800cb52:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cb56:	68a3      	ldr	r3, [r4, #8]
 800cb58:	4607      	mov	r7, r0
 800cb5a:	4691      	mov	r9, r2
 800cb5c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cb60:	f108 0601 	add.w	r6, r8, #1
 800cb64:	42b3      	cmp	r3, r6
 800cb66:	db0b      	blt.n	800cb80 <__lshift+0x38>
 800cb68:	4638      	mov	r0, r7
 800cb6a:	f7ff fddf 	bl	800c72c <_Balloc>
 800cb6e:	4605      	mov	r5, r0
 800cb70:	b948      	cbnz	r0, 800cb86 <__lshift+0x3e>
 800cb72:	4602      	mov	r2, r0
 800cb74:	4b28      	ldr	r3, [pc, #160]	@ (800cc18 <__lshift+0xd0>)
 800cb76:	4829      	ldr	r0, [pc, #164]	@ (800cc1c <__lshift+0xd4>)
 800cb78:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cb7c:	f000 fb5c 	bl	800d238 <__assert_func>
 800cb80:	3101      	adds	r1, #1
 800cb82:	005b      	lsls	r3, r3, #1
 800cb84:	e7ee      	b.n	800cb64 <__lshift+0x1c>
 800cb86:	2300      	movs	r3, #0
 800cb88:	f100 0114 	add.w	r1, r0, #20
 800cb8c:	f100 0210 	add.w	r2, r0, #16
 800cb90:	4618      	mov	r0, r3
 800cb92:	4553      	cmp	r3, sl
 800cb94:	db33      	blt.n	800cbfe <__lshift+0xb6>
 800cb96:	6920      	ldr	r0, [r4, #16]
 800cb98:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cb9c:	f104 0314 	add.w	r3, r4, #20
 800cba0:	f019 091f 	ands.w	r9, r9, #31
 800cba4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cba8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cbac:	d02b      	beq.n	800cc06 <__lshift+0xbe>
 800cbae:	f1c9 0e20 	rsb	lr, r9, #32
 800cbb2:	468a      	mov	sl, r1
 800cbb4:	2200      	movs	r2, #0
 800cbb6:	6818      	ldr	r0, [r3, #0]
 800cbb8:	fa00 f009 	lsl.w	r0, r0, r9
 800cbbc:	4310      	orrs	r0, r2
 800cbbe:	f84a 0b04 	str.w	r0, [sl], #4
 800cbc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbc6:	459c      	cmp	ip, r3
 800cbc8:	fa22 f20e 	lsr.w	r2, r2, lr
 800cbcc:	d8f3      	bhi.n	800cbb6 <__lshift+0x6e>
 800cbce:	ebac 0304 	sub.w	r3, ip, r4
 800cbd2:	3b15      	subs	r3, #21
 800cbd4:	f023 0303 	bic.w	r3, r3, #3
 800cbd8:	3304      	adds	r3, #4
 800cbda:	f104 0015 	add.w	r0, r4, #21
 800cbde:	4584      	cmp	ip, r0
 800cbe0:	bf38      	it	cc
 800cbe2:	2304      	movcc	r3, #4
 800cbe4:	50ca      	str	r2, [r1, r3]
 800cbe6:	b10a      	cbz	r2, 800cbec <__lshift+0xa4>
 800cbe8:	f108 0602 	add.w	r6, r8, #2
 800cbec:	3e01      	subs	r6, #1
 800cbee:	4638      	mov	r0, r7
 800cbf0:	612e      	str	r6, [r5, #16]
 800cbf2:	4621      	mov	r1, r4
 800cbf4:	f7ff fdda 	bl	800c7ac <_Bfree>
 800cbf8:	4628      	mov	r0, r5
 800cbfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cbfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800cc02:	3301      	adds	r3, #1
 800cc04:	e7c5      	b.n	800cb92 <__lshift+0x4a>
 800cc06:	3904      	subs	r1, #4
 800cc08:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800cc10:	459c      	cmp	ip, r3
 800cc12:	d8f9      	bhi.n	800cc08 <__lshift+0xc0>
 800cc14:	e7ea      	b.n	800cbec <__lshift+0xa4>
 800cc16:	bf00      	nop
 800cc18:	0800e2cb 	.word	0x0800e2cb
 800cc1c:	0800e2dc 	.word	0x0800e2dc

0800cc20 <__mcmp>:
 800cc20:	690a      	ldr	r2, [r1, #16]
 800cc22:	4603      	mov	r3, r0
 800cc24:	6900      	ldr	r0, [r0, #16]
 800cc26:	1a80      	subs	r0, r0, r2
 800cc28:	b530      	push	{r4, r5, lr}
 800cc2a:	d10e      	bne.n	800cc4a <__mcmp+0x2a>
 800cc2c:	3314      	adds	r3, #20
 800cc2e:	3114      	adds	r1, #20
 800cc30:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cc34:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800cc38:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800cc3c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800cc40:	4295      	cmp	r5, r2
 800cc42:	d003      	beq.n	800cc4c <__mcmp+0x2c>
 800cc44:	d205      	bcs.n	800cc52 <__mcmp+0x32>
 800cc46:	f04f 30ff 	mov.w	r0, #4294967295
 800cc4a:	bd30      	pop	{r4, r5, pc}
 800cc4c:	42a3      	cmp	r3, r4
 800cc4e:	d3f3      	bcc.n	800cc38 <__mcmp+0x18>
 800cc50:	e7fb      	b.n	800cc4a <__mcmp+0x2a>
 800cc52:	2001      	movs	r0, #1
 800cc54:	e7f9      	b.n	800cc4a <__mcmp+0x2a>
	...

0800cc58 <__mdiff>:
 800cc58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc5c:	4689      	mov	r9, r1
 800cc5e:	4606      	mov	r6, r0
 800cc60:	4611      	mov	r1, r2
 800cc62:	4648      	mov	r0, r9
 800cc64:	4614      	mov	r4, r2
 800cc66:	f7ff ffdb 	bl	800cc20 <__mcmp>
 800cc6a:	1e05      	subs	r5, r0, #0
 800cc6c:	d112      	bne.n	800cc94 <__mdiff+0x3c>
 800cc6e:	4629      	mov	r1, r5
 800cc70:	4630      	mov	r0, r6
 800cc72:	f7ff fd5b 	bl	800c72c <_Balloc>
 800cc76:	4602      	mov	r2, r0
 800cc78:	b928      	cbnz	r0, 800cc86 <__mdiff+0x2e>
 800cc7a:	4b3f      	ldr	r3, [pc, #252]	@ (800cd78 <__mdiff+0x120>)
 800cc7c:	f240 2137 	movw	r1, #567	@ 0x237
 800cc80:	483e      	ldr	r0, [pc, #248]	@ (800cd7c <__mdiff+0x124>)
 800cc82:	f000 fad9 	bl	800d238 <__assert_func>
 800cc86:	2301      	movs	r3, #1
 800cc88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800cc8c:	4610      	mov	r0, r2
 800cc8e:	b003      	add	sp, #12
 800cc90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc94:	bfbc      	itt	lt
 800cc96:	464b      	movlt	r3, r9
 800cc98:	46a1      	movlt	r9, r4
 800cc9a:	4630      	mov	r0, r6
 800cc9c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800cca0:	bfba      	itte	lt
 800cca2:	461c      	movlt	r4, r3
 800cca4:	2501      	movlt	r5, #1
 800cca6:	2500      	movge	r5, #0
 800cca8:	f7ff fd40 	bl	800c72c <_Balloc>
 800ccac:	4602      	mov	r2, r0
 800ccae:	b918      	cbnz	r0, 800ccb8 <__mdiff+0x60>
 800ccb0:	4b31      	ldr	r3, [pc, #196]	@ (800cd78 <__mdiff+0x120>)
 800ccb2:	f240 2145 	movw	r1, #581	@ 0x245
 800ccb6:	e7e3      	b.n	800cc80 <__mdiff+0x28>
 800ccb8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ccbc:	6926      	ldr	r6, [r4, #16]
 800ccbe:	60c5      	str	r5, [r0, #12]
 800ccc0:	f109 0310 	add.w	r3, r9, #16
 800ccc4:	f109 0514 	add.w	r5, r9, #20
 800ccc8:	f104 0e14 	add.w	lr, r4, #20
 800cccc:	f100 0b14 	add.w	fp, r0, #20
 800ccd0:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ccd4:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ccd8:	9301      	str	r3, [sp, #4]
 800ccda:	46d9      	mov	r9, fp
 800ccdc:	f04f 0c00 	mov.w	ip, #0
 800cce0:	9b01      	ldr	r3, [sp, #4]
 800cce2:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cce6:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ccea:	9301      	str	r3, [sp, #4]
 800ccec:	fa1f f38a 	uxth.w	r3, sl
 800ccf0:	4619      	mov	r1, r3
 800ccf2:	b283      	uxth	r3, r0
 800ccf4:	1acb      	subs	r3, r1, r3
 800ccf6:	0c00      	lsrs	r0, r0, #16
 800ccf8:	4463      	add	r3, ip
 800ccfa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ccfe:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cd02:	b29b      	uxth	r3, r3
 800cd04:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cd08:	4576      	cmp	r6, lr
 800cd0a:	f849 3b04 	str.w	r3, [r9], #4
 800cd0e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd12:	d8e5      	bhi.n	800cce0 <__mdiff+0x88>
 800cd14:	1b33      	subs	r3, r6, r4
 800cd16:	3b15      	subs	r3, #21
 800cd18:	f023 0303 	bic.w	r3, r3, #3
 800cd1c:	3415      	adds	r4, #21
 800cd1e:	3304      	adds	r3, #4
 800cd20:	42a6      	cmp	r6, r4
 800cd22:	bf38      	it	cc
 800cd24:	2304      	movcc	r3, #4
 800cd26:	441d      	add	r5, r3
 800cd28:	445b      	add	r3, fp
 800cd2a:	461e      	mov	r6, r3
 800cd2c:	462c      	mov	r4, r5
 800cd2e:	4544      	cmp	r4, r8
 800cd30:	d30e      	bcc.n	800cd50 <__mdiff+0xf8>
 800cd32:	f108 0103 	add.w	r1, r8, #3
 800cd36:	1b49      	subs	r1, r1, r5
 800cd38:	f021 0103 	bic.w	r1, r1, #3
 800cd3c:	3d03      	subs	r5, #3
 800cd3e:	45a8      	cmp	r8, r5
 800cd40:	bf38      	it	cc
 800cd42:	2100      	movcc	r1, #0
 800cd44:	440b      	add	r3, r1
 800cd46:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cd4a:	b191      	cbz	r1, 800cd72 <__mdiff+0x11a>
 800cd4c:	6117      	str	r7, [r2, #16]
 800cd4e:	e79d      	b.n	800cc8c <__mdiff+0x34>
 800cd50:	f854 1b04 	ldr.w	r1, [r4], #4
 800cd54:	46e6      	mov	lr, ip
 800cd56:	0c08      	lsrs	r0, r1, #16
 800cd58:	fa1c fc81 	uxtah	ip, ip, r1
 800cd5c:	4471      	add	r1, lr
 800cd5e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cd62:	b289      	uxth	r1, r1
 800cd64:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cd68:	f846 1b04 	str.w	r1, [r6], #4
 800cd6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cd70:	e7dd      	b.n	800cd2e <__mdiff+0xd6>
 800cd72:	3f01      	subs	r7, #1
 800cd74:	e7e7      	b.n	800cd46 <__mdiff+0xee>
 800cd76:	bf00      	nop
 800cd78:	0800e2cb 	.word	0x0800e2cb
 800cd7c:	0800e2dc 	.word	0x0800e2dc

0800cd80 <__d2b>:
 800cd80:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cd84:	460f      	mov	r7, r1
 800cd86:	2101      	movs	r1, #1
 800cd88:	ec59 8b10 	vmov	r8, r9, d0
 800cd8c:	4616      	mov	r6, r2
 800cd8e:	f7ff fccd 	bl	800c72c <_Balloc>
 800cd92:	4604      	mov	r4, r0
 800cd94:	b930      	cbnz	r0, 800cda4 <__d2b+0x24>
 800cd96:	4602      	mov	r2, r0
 800cd98:	4b23      	ldr	r3, [pc, #140]	@ (800ce28 <__d2b+0xa8>)
 800cd9a:	4824      	ldr	r0, [pc, #144]	@ (800ce2c <__d2b+0xac>)
 800cd9c:	f240 310f 	movw	r1, #783	@ 0x30f
 800cda0:	f000 fa4a 	bl	800d238 <__assert_func>
 800cda4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cda8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cdac:	b10d      	cbz	r5, 800cdb2 <__d2b+0x32>
 800cdae:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cdb2:	9301      	str	r3, [sp, #4]
 800cdb4:	f1b8 0300 	subs.w	r3, r8, #0
 800cdb8:	d023      	beq.n	800ce02 <__d2b+0x82>
 800cdba:	4668      	mov	r0, sp
 800cdbc:	9300      	str	r3, [sp, #0]
 800cdbe:	f7ff fd7c 	bl	800c8ba <__lo0bits>
 800cdc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800cdc6:	b1d0      	cbz	r0, 800cdfe <__d2b+0x7e>
 800cdc8:	f1c0 0320 	rsb	r3, r0, #32
 800cdcc:	fa02 f303 	lsl.w	r3, r2, r3
 800cdd0:	430b      	orrs	r3, r1
 800cdd2:	40c2      	lsrs	r2, r0
 800cdd4:	6163      	str	r3, [r4, #20]
 800cdd6:	9201      	str	r2, [sp, #4]
 800cdd8:	9b01      	ldr	r3, [sp, #4]
 800cdda:	61a3      	str	r3, [r4, #24]
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bf0c      	ite	eq
 800cde0:	2201      	moveq	r2, #1
 800cde2:	2202      	movne	r2, #2
 800cde4:	6122      	str	r2, [r4, #16]
 800cde6:	b1a5      	cbz	r5, 800ce12 <__d2b+0x92>
 800cde8:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800cdec:	4405      	add	r5, r0
 800cdee:	603d      	str	r5, [r7, #0]
 800cdf0:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800cdf4:	6030      	str	r0, [r6, #0]
 800cdf6:	4620      	mov	r0, r4
 800cdf8:	b003      	add	sp, #12
 800cdfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cdfe:	6161      	str	r1, [r4, #20]
 800ce00:	e7ea      	b.n	800cdd8 <__d2b+0x58>
 800ce02:	a801      	add	r0, sp, #4
 800ce04:	f7ff fd59 	bl	800c8ba <__lo0bits>
 800ce08:	9b01      	ldr	r3, [sp, #4]
 800ce0a:	6163      	str	r3, [r4, #20]
 800ce0c:	3020      	adds	r0, #32
 800ce0e:	2201      	movs	r2, #1
 800ce10:	e7e8      	b.n	800cde4 <__d2b+0x64>
 800ce12:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ce16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ce1a:	6038      	str	r0, [r7, #0]
 800ce1c:	6918      	ldr	r0, [r3, #16]
 800ce1e:	f7ff fd2d 	bl	800c87c <__hi0bits>
 800ce22:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ce26:	e7e5      	b.n	800cdf4 <__d2b+0x74>
 800ce28:	0800e2cb 	.word	0x0800e2cb
 800ce2c:	0800e2dc 	.word	0x0800e2dc

0800ce30 <__ssputs_r>:
 800ce30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce34:	688e      	ldr	r6, [r1, #8]
 800ce36:	461f      	mov	r7, r3
 800ce38:	42be      	cmp	r6, r7
 800ce3a:	680b      	ldr	r3, [r1, #0]
 800ce3c:	4682      	mov	sl, r0
 800ce3e:	460c      	mov	r4, r1
 800ce40:	4690      	mov	r8, r2
 800ce42:	d82d      	bhi.n	800cea0 <__ssputs_r+0x70>
 800ce44:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ce48:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ce4c:	d026      	beq.n	800ce9c <__ssputs_r+0x6c>
 800ce4e:	6965      	ldr	r5, [r4, #20]
 800ce50:	6909      	ldr	r1, [r1, #16]
 800ce52:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce56:	eba3 0901 	sub.w	r9, r3, r1
 800ce5a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce5e:	1c7b      	adds	r3, r7, #1
 800ce60:	444b      	add	r3, r9
 800ce62:	106d      	asrs	r5, r5, #1
 800ce64:	429d      	cmp	r5, r3
 800ce66:	bf38      	it	cc
 800ce68:	461d      	movcc	r5, r3
 800ce6a:	0553      	lsls	r3, r2, #21
 800ce6c:	d527      	bpl.n	800cebe <__ssputs_r+0x8e>
 800ce6e:	4629      	mov	r1, r5
 800ce70:	f7fd feb8 	bl	800abe4 <_malloc_r>
 800ce74:	4606      	mov	r6, r0
 800ce76:	b360      	cbz	r0, 800ced2 <__ssputs_r+0xa2>
 800ce78:	6921      	ldr	r1, [r4, #16]
 800ce7a:	464a      	mov	r2, r9
 800ce7c:	f7fe fdb1 	bl	800b9e2 <memcpy>
 800ce80:	89a3      	ldrh	r3, [r4, #12]
 800ce82:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ce86:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ce8a:	81a3      	strh	r3, [r4, #12]
 800ce8c:	6126      	str	r6, [r4, #16]
 800ce8e:	6165      	str	r5, [r4, #20]
 800ce90:	444e      	add	r6, r9
 800ce92:	eba5 0509 	sub.w	r5, r5, r9
 800ce96:	6026      	str	r6, [r4, #0]
 800ce98:	60a5      	str	r5, [r4, #8]
 800ce9a:	463e      	mov	r6, r7
 800ce9c:	42be      	cmp	r6, r7
 800ce9e:	d900      	bls.n	800cea2 <__ssputs_r+0x72>
 800cea0:	463e      	mov	r6, r7
 800cea2:	6820      	ldr	r0, [r4, #0]
 800cea4:	4632      	mov	r2, r6
 800cea6:	4641      	mov	r1, r8
 800cea8:	f7fe fca5 	bl	800b7f6 <memmove>
 800ceac:	68a3      	ldr	r3, [r4, #8]
 800ceae:	1b9b      	subs	r3, r3, r6
 800ceb0:	60a3      	str	r3, [r4, #8]
 800ceb2:	6823      	ldr	r3, [r4, #0]
 800ceb4:	4433      	add	r3, r6
 800ceb6:	6023      	str	r3, [r4, #0]
 800ceb8:	2000      	movs	r0, #0
 800ceba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cebe:	462a      	mov	r2, r5
 800cec0:	f000 f9fe 	bl	800d2c0 <_realloc_r>
 800cec4:	4606      	mov	r6, r0
 800cec6:	2800      	cmp	r0, #0
 800cec8:	d1e0      	bne.n	800ce8c <__ssputs_r+0x5c>
 800ceca:	6921      	ldr	r1, [r4, #16]
 800cecc:	4650      	mov	r0, sl
 800cece:	f7ff fbe3 	bl	800c698 <_free_r>
 800ced2:	230c      	movs	r3, #12
 800ced4:	f8ca 3000 	str.w	r3, [sl]
 800ced8:	89a3      	ldrh	r3, [r4, #12]
 800ceda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	f04f 30ff 	mov.w	r0, #4294967295
 800cee4:	e7e9      	b.n	800ceba <__ssputs_r+0x8a>
	...

0800cee8 <_svfiprintf_r>:
 800cee8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ceec:	4698      	mov	r8, r3
 800ceee:	898b      	ldrh	r3, [r1, #12]
 800cef0:	061b      	lsls	r3, r3, #24
 800cef2:	b09d      	sub	sp, #116	@ 0x74
 800cef4:	4607      	mov	r7, r0
 800cef6:	460d      	mov	r5, r1
 800cef8:	4614      	mov	r4, r2
 800cefa:	d510      	bpl.n	800cf1e <_svfiprintf_r+0x36>
 800cefc:	690b      	ldr	r3, [r1, #16]
 800cefe:	b973      	cbnz	r3, 800cf1e <_svfiprintf_r+0x36>
 800cf00:	2140      	movs	r1, #64	@ 0x40
 800cf02:	f7fd fe6f 	bl	800abe4 <_malloc_r>
 800cf06:	6028      	str	r0, [r5, #0]
 800cf08:	6128      	str	r0, [r5, #16]
 800cf0a:	b930      	cbnz	r0, 800cf1a <_svfiprintf_r+0x32>
 800cf0c:	230c      	movs	r3, #12
 800cf0e:	603b      	str	r3, [r7, #0]
 800cf10:	f04f 30ff 	mov.w	r0, #4294967295
 800cf14:	b01d      	add	sp, #116	@ 0x74
 800cf16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf1a:	2340      	movs	r3, #64	@ 0x40
 800cf1c:	616b      	str	r3, [r5, #20]
 800cf1e:	2300      	movs	r3, #0
 800cf20:	9309      	str	r3, [sp, #36]	@ 0x24
 800cf22:	2320      	movs	r3, #32
 800cf24:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cf28:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf2c:	2330      	movs	r3, #48	@ 0x30
 800cf2e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d0cc <_svfiprintf_r+0x1e4>
 800cf32:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cf36:	f04f 0901 	mov.w	r9, #1
 800cf3a:	4623      	mov	r3, r4
 800cf3c:	469a      	mov	sl, r3
 800cf3e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf42:	b10a      	cbz	r2, 800cf48 <_svfiprintf_r+0x60>
 800cf44:	2a25      	cmp	r2, #37	@ 0x25
 800cf46:	d1f9      	bne.n	800cf3c <_svfiprintf_r+0x54>
 800cf48:	ebba 0b04 	subs.w	fp, sl, r4
 800cf4c:	d00b      	beq.n	800cf66 <_svfiprintf_r+0x7e>
 800cf4e:	465b      	mov	r3, fp
 800cf50:	4622      	mov	r2, r4
 800cf52:	4629      	mov	r1, r5
 800cf54:	4638      	mov	r0, r7
 800cf56:	f7ff ff6b 	bl	800ce30 <__ssputs_r>
 800cf5a:	3001      	adds	r0, #1
 800cf5c:	f000 80a7 	beq.w	800d0ae <_svfiprintf_r+0x1c6>
 800cf60:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf62:	445a      	add	r2, fp
 800cf64:	9209      	str	r2, [sp, #36]	@ 0x24
 800cf66:	f89a 3000 	ldrb.w	r3, [sl]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	f000 809f 	beq.w	800d0ae <_svfiprintf_r+0x1c6>
 800cf70:	2300      	movs	r3, #0
 800cf72:	f04f 32ff 	mov.w	r2, #4294967295
 800cf76:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cf7a:	f10a 0a01 	add.w	sl, sl, #1
 800cf7e:	9304      	str	r3, [sp, #16]
 800cf80:	9307      	str	r3, [sp, #28]
 800cf82:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cf86:	931a      	str	r3, [sp, #104]	@ 0x68
 800cf88:	4654      	mov	r4, sl
 800cf8a:	2205      	movs	r2, #5
 800cf8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf90:	484e      	ldr	r0, [pc, #312]	@ (800d0cc <_svfiprintf_r+0x1e4>)
 800cf92:	f7f3 f91d 	bl	80001d0 <memchr>
 800cf96:	9a04      	ldr	r2, [sp, #16]
 800cf98:	b9d8      	cbnz	r0, 800cfd2 <_svfiprintf_r+0xea>
 800cf9a:	06d0      	lsls	r0, r2, #27
 800cf9c:	bf44      	itt	mi
 800cf9e:	2320      	movmi	r3, #32
 800cfa0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfa4:	0711      	lsls	r1, r2, #28
 800cfa6:	bf44      	itt	mi
 800cfa8:	232b      	movmi	r3, #43	@ 0x2b
 800cfaa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cfae:	f89a 3000 	ldrb.w	r3, [sl]
 800cfb2:	2b2a      	cmp	r3, #42	@ 0x2a
 800cfb4:	d015      	beq.n	800cfe2 <_svfiprintf_r+0xfa>
 800cfb6:	9a07      	ldr	r2, [sp, #28]
 800cfb8:	4654      	mov	r4, sl
 800cfba:	2000      	movs	r0, #0
 800cfbc:	f04f 0c0a 	mov.w	ip, #10
 800cfc0:	4621      	mov	r1, r4
 800cfc2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cfc6:	3b30      	subs	r3, #48	@ 0x30
 800cfc8:	2b09      	cmp	r3, #9
 800cfca:	d94b      	bls.n	800d064 <_svfiprintf_r+0x17c>
 800cfcc:	b1b0      	cbz	r0, 800cffc <_svfiprintf_r+0x114>
 800cfce:	9207      	str	r2, [sp, #28]
 800cfd0:	e014      	b.n	800cffc <_svfiprintf_r+0x114>
 800cfd2:	eba0 0308 	sub.w	r3, r0, r8
 800cfd6:	fa09 f303 	lsl.w	r3, r9, r3
 800cfda:	4313      	orrs	r3, r2
 800cfdc:	9304      	str	r3, [sp, #16]
 800cfde:	46a2      	mov	sl, r4
 800cfe0:	e7d2      	b.n	800cf88 <_svfiprintf_r+0xa0>
 800cfe2:	9b03      	ldr	r3, [sp, #12]
 800cfe4:	1d19      	adds	r1, r3, #4
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	9103      	str	r1, [sp, #12]
 800cfea:	2b00      	cmp	r3, #0
 800cfec:	bfbb      	ittet	lt
 800cfee:	425b      	neglt	r3, r3
 800cff0:	f042 0202 	orrlt.w	r2, r2, #2
 800cff4:	9307      	strge	r3, [sp, #28]
 800cff6:	9307      	strlt	r3, [sp, #28]
 800cff8:	bfb8      	it	lt
 800cffa:	9204      	strlt	r2, [sp, #16]
 800cffc:	7823      	ldrb	r3, [r4, #0]
 800cffe:	2b2e      	cmp	r3, #46	@ 0x2e
 800d000:	d10a      	bne.n	800d018 <_svfiprintf_r+0x130>
 800d002:	7863      	ldrb	r3, [r4, #1]
 800d004:	2b2a      	cmp	r3, #42	@ 0x2a
 800d006:	d132      	bne.n	800d06e <_svfiprintf_r+0x186>
 800d008:	9b03      	ldr	r3, [sp, #12]
 800d00a:	1d1a      	adds	r2, r3, #4
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	9203      	str	r2, [sp, #12]
 800d010:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d014:	3402      	adds	r4, #2
 800d016:	9305      	str	r3, [sp, #20]
 800d018:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d0dc <_svfiprintf_r+0x1f4>
 800d01c:	7821      	ldrb	r1, [r4, #0]
 800d01e:	2203      	movs	r2, #3
 800d020:	4650      	mov	r0, sl
 800d022:	f7f3 f8d5 	bl	80001d0 <memchr>
 800d026:	b138      	cbz	r0, 800d038 <_svfiprintf_r+0x150>
 800d028:	9b04      	ldr	r3, [sp, #16]
 800d02a:	eba0 000a 	sub.w	r0, r0, sl
 800d02e:	2240      	movs	r2, #64	@ 0x40
 800d030:	4082      	lsls	r2, r0
 800d032:	4313      	orrs	r3, r2
 800d034:	3401      	adds	r4, #1
 800d036:	9304      	str	r3, [sp, #16]
 800d038:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d03c:	4824      	ldr	r0, [pc, #144]	@ (800d0d0 <_svfiprintf_r+0x1e8>)
 800d03e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d042:	2206      	movs	r2, #6
 800d044:	f7f3 f8c4 	bl	80001d0 <memchr>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d036      	beq.n	800d0ba <_svfiprintf_r+0x1d2>
 800d04c:	4b21      	ldr	r3, [pc, #132]	@ (800d0d4 <_svfiprintf_r+0x1ec>)
 800d04e:	bb1b      	cbnz	r3, 800d098 <_svfiprintf_r+0x1b0>
 800d050:	9b03      	ldr	r3, [sp, #12]
 800d052:	3307      	adds	r3, #7
 800d054:	f023 0307 	bic.w	r3, r3, #7
 800d058:	3308      	adds	r3, #8
 800d05a:	9303      	str	r3, [sp, #12]
 800d05c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d05e:	4433      	add	r3, r6
 800d060:	9309      	str	r3, [sp, #36]	@ 0x24
 800d062:	e76a      	b.n	800cf3a <_svfiprintf_r+0x52>
 800d064:	fb0c 3202 	mla	r2, ip, r2, r3
 800d068:	460c      	mov	r4, r1
 800d06a:	2001      	movs	r0, #1
 800d06c:	e7a8      	b.n	800cfc0 <_svfiprintf_r+0xd8>
 800d06e:	2300      	movs	r3, #0
 800d070:	3401      	adds	r4, #1
 800d072:	9305      	str	r3, [sp, #20]
 800d074:	4619      	mov	r1, r3
 800d076:	f04f 0c0a 	mov.w	ip, #10
 800d07a:	4620      	mov	r0, r4
 800d07c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d080:	3a30      	subs	r2, #48	@ 0x30
 800d082:	2a09      	cmp	r2, #9
 800d084:	d903      	bls.n	800d08e <_svfiprintf_r+0x1a6>
 800d086:	2b00      	cmp	r3, #0
 800d088:	d0c6      	beq.n	800d018 <_svfiprintf_r+0x130>
 800d08a:	9105      	str	r1, [sp, #20]
 800d08c:	e7c4      	b.n	800d018 <_svfiprintf_r+0x130>
 800d08e:	fb0c 2101 	mla	r1, ip, r1, r2
 800d092:	4604      	mov	r4, r0
 800d094:	2301      	movs	r3, #1
 800d096:	e7f0      	b.n	800d07a <_svfiprintf_r+0x192>
 800d098:	ab03      	add	r3, sp, #12
 800d09a:	9300      	str	r3, [sp, #0]
 800d09c:	462a      	mov	r2, r5
 800d09e:	4b0e      	ldr	r3, [pc, #56]	@ (800d0d8 <_svfiprintf_r+0x1f0>)
 800d0a0:	a904      	add	r1, sp, #16
 800d0a2:	4638      	mov	r0, r7
 800d0a4:	f7fd feca 	bl	800ae3c <_printf_float>
 800d0a8:	1c42      	adds	r2, r0, #1
 800d0aa:	4606      	mov	r6, r0
 800d0ac:	d1d6      	bne.n	800d05c <_svfiprintf_r+0x174>
 800d0ae:	89ab      	ldrh	r3, [r5, #12]
 800d0b0:	065b      	lsls	r3, r3, #25
 800d0b2:	f53f af2d 	bmi.w	800cf10 <_svfiprintf_r+0x28>
 800d0b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d0b8:	e72c      	b.n	800cf14 <_svfiprintf_r+0x2c>
 800d0ba:	ab03      	add	r3, sp, #12
 800d0bc:	9300      	str	r3, [sp, #0]
 800d0be:	462a      	mov	r2, r5
 800d0c0:	4b05      	ldr	r3, [pc, #20]	@ (800d0d8 <_svfiprintf_r+0x1f0>)
 800d0c2:	a904      	add	r1, sp, #16
 800d0c4:	4638      	mov	r0, r7
 800d0c6:	f7fe f951 	bl	800b36c <_printf_i>
 800d0ca:	e7ed      	b.n	800d0a8 <_svfiprintf_r+0x1c0>
 800d0cc:	0800e438 	.word	0x0800e438
 800d0d0:	0800e442 	.word	0x0800e442
 800d0d4:	0800ae3d 	.word	0x0800ae3d
 800d0d8:	0800ce31 	.word	0x0800ce31
 800d0dc:	0800e43e 	.word	0x0800e43e

0800d0e0 <__sflush_r>:
 800d0e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d0e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0e8:	0716      	lsls	r6, r2, #28
 800d0ea:	4605      	mov	r5, r0
 800d0ec:	460c      	mov	r4, r1
 800d0ee:	d454      	bmi.n	800d19a <__sflush_r+0xba>
 800d0f0:	684b      	ldr	r3, [r1, #4]
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	dc02      	bgt.n	800d0fc <__sflush_r+0x1c>
 800d0f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	dd48      	ble.n	800d18e <__sflush_r+0xae>
 800d0fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d0fe:	2e00      	cmp	r6, #0
 800d100:	d045      	beq.n	800d18e <__sflush_r+0xae>
 800d102:	2300      	movs	r3, #0
 800d104:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d108:	682f      	ldr	r7, [r5, #0]
 800d10a:	6a21      	ldr	r1, [r4, #32]
 800d10c:	602b      	str	r3, [r5, #0]
 800d10e:	d030      	beq.n	800d172 <__sflush_r+0x92>
 800d110:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d112:	89a3      	ldrh	r3, [r4, #12]
 800d114:	0759      	lsls	r1, r3, #29
 800d116:	d505      	bpl.n	800d124 <__sflush_r+0x44>
 800d118:	6863      	ldr	r3, [r4, #4]
 800d11a:	1ad2      	subs	r2, r2, r3
 800d11c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d11e:	b10b      	cbz	r3, 800d124 <__sflush_r+0x44>
 800d120:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d122:	1ad2      	subs	r2, r2, r3
 800d124:	2300      	movs	r3, #0
 800d126:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d128:	6a21      	ldr	r1, [r4, #32]
 800d12a:	4628      	mov	r0, r5
 800d12c:	47b0      	blx	r6
 800d12e:	1c43      	adds	r3, r0, #1
 800d130:	89a3      	ldrh	r3, [r4, #12]
 800d132:	d106      	bne.n	800d142 <__sflush_r+0x62>
 800d134:	6829      	ldr	r1, [r5, #0]
 800d136:	291d      	cmp	r1, #29
 800d138:	d82b      	bhi.n	800d192 <__sflush_r+0xb2>
 800d13a:	4a2a      	ldr	r2, [pc, #168]	@ (800d1e4 <__sflush_r+0x104>)
 800d13c:	410a      	asrs	r2, r1
 800d13e:	07d6      	lsls	r6, r2, #31
 800d140:	d427      	bmi.n	800d192 <__sflush_r+0xb2>
 800d142:	2200      	movs	r2, #0
 800d144:	6062      	str	r2, [r4, #4]
 800d146:	04d9      	lsls	r1, r3, #19
 800d148:	6922      	ldr	r2, [r4, #16]
 800d14a:	6022      	str	r2, [r4, #0]
 800d14c:	d504      	bpl.n	800d158 <__sflush_r+0x78>
 800d14e:	1c42      	adds	r2, r0, #1
 800d150:	d101      	bne.n	800d156 <__sflush_r+0x76>
 800d152:	682b      	ldr	r3, [r5, #0]
 800d154:	b903      	cbnz	r3, 800d158 <__sflush_r+0x78>
 800d156:	6560      	str	r0, [r4, #84]	@ 0x54
 800d158:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d15a:	602f      	str	r7, [r5, #0]
 800d15c:	b1b9      	cbz	r1, 800d18e <__sflush_r+0xae>
 800d15e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d162:	4299      	cmp	r1, r3
 800d164:	d002      	beq.n	800d16c <__sflush_r+0x8c>
 800d166:	4628      	mov	r0, r5
 800d168:	f7ff fa96 	bl	800c698 <_free_r>
 800d16c:	2300      	movs	r3, #0
 800d16e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d170:	e00d      	b.n	800d18e <__sflush_r+0xae>
 800d172:	2301      	movs	r3, #1
 800d174:	4628      	mov	r0, r5
 800d176:	47b0      	blx	r6
 800d178:	4602      	mov	r2, r0
 800d17a:	1c50      	adds	r0, r2, #1
 800d17c:	d1c9      	bne.n	800d112 <__sflush_r+0x32>
 800d17e:	682b      	ldr	r3, [r5, #0]
 800d180:	2b00      	cmp	r3, #0
 800d182:	d0c6      	beq.n	800d112 <__sflush_r+0x32>
 800d184:	2b1d      	cmp	r3, #29
 800d186:	d001      	beq.n	800d18c <__sflush_r+0xac>
 800d188:	2b16      	cmp	r3, #22
 800d18a:	d11e      	bne.n	800d1ca <__sflush_r+0xea>
 800d18c:	602f      	str	r7, [r5, #0]
 800d18e:	2000      	movs	r0, #0
 800d190:	e022      	b.n	800d1d8 <__sflush_r+0xf8>
 800d192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d196:	b21b      	sxth	r3, r3
 800d198:	e01b      	b.n	800d1d2 <__sflush_r+0xf2>
 800d19a:	690f      	ldr	r7, [r1, #16]
 800d19c:	2f00      	cmp	r7, #0
 800d19e:	d0f6      	beq.n	800d18e <__sflush_r+0xae>
 800d1a0:	0793      	lsls	r3, r2, #30
 800d1a2:	680e      	ldr	r6, [r1, #0]
 800d1a4:	bf08      	it	eq
 800d1a6:	694b      	ldreq	r3, [r1, #20]
 800d1a8:	600f      	str	r7, [r1, #0]
 800d1aa:	bf18      	it	ne
 800d1ac:	2300      	movne	r3, #0
 800d1ae:	eba6 0807 	sub.w	r8, r6, r7
 800d1b2:	608b      	str	r3, [r1, #8]
 800d1b4:	f1b8 0f00 	cmp.w	r8, #0
 800d1b8:	dde9      	ble.n	800d18e <__sflush_r+0xae>
 800d1ba:	6a21      	ldr	r1, [r4, #32]
 800d1bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d1be:	4643      	mov	r3, r8
 800d1c0:	463a      	mov	r2, r7
 800d1c2:	4628      	mov	r0, r5
 800d1c4:	47b0      	blx	r6
 800d1c6:	2800      	cmp	r0, #0
 800d1c8:	dc08      	bgt.n	800d1dc <__sflush_r+0xfc>
 800d1ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1d2:	81a3      	strh	r3, [r4, #12]
 800d1d4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d1dc:	4407      	add	r7, r0
 800d1de:	eba8 0800 	sub.w	r8, r8, r0
 800d1e2:	e7e7      	b.n	800d1b4 <__sflush_r+0xd4>
 800d1e4:	dfbffffe 	.word	0xdfbffffe

0800d1e8 <_fflush_r>:
 800d1e8:	b538      	push	{r3, r4, r5, lr}
 800d1ea:	690b      	ldr	r3, [r1, #16]
 800d1ec:	4605      	mov	r5, r0
 800d1ee:	460c      	mov	r4, r1
 800d1f0:	b913      	cbnz	r3, 800d1f8 <_fflush_r+0x10>
 800d1f2:	2500      	movs	r5, #0
 800d1f4:	4628      	mov	r0, r5
 800d1f6:	bd38      	pop	{r3, r4, r5, pc}
 800d1f8:	b118      	cbz	r0, 800d202 <_fflush_r+0x1a>
 800d1fa:	6a03      	ldr	r3, [r0, #32]
 800d1fc:	b90b      	cbnz	r3, 800d202 <_fflush_r+0x1a>
 800d1fe:	f7fe fa61 	bl	800b6c4 <__sinit>
 800d202:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d206:	2b00      	cmp	r3, #0
 800d208:	d0f3      	beq.n	800d1f2 <_fflush_r+0xa>
 800d20a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d20c:	07d0      	lsls	r0, r2, #31
 800d20e:	d404      	bmi.n	800d21a <_fflush_r+0x32>
 800d210:	0599      	lsls	r1, r3, #22
 800d212:	d402      	bmi.n	800d21a <_fflush_r+0x32>
 800d214:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d216:	f7fe fbda 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800d21a:	4628      	mov	r0, r5
 800d21c:	4621      	mov	r1, r4
 800d21e:	f7ff ff5f 	bl	800d0e0 <__sflush_r>
 800d222:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d224:	07da      	lsls	r2, r3, #31
 800d226:	4605      	mov	r5, r0
 800d228:	d4e4      	bmi.n	800d1f4 <_fflush_r+0xc>
 800d22a:	89a3      	ldrh	r3, [r4, #12]
 800d22c:	059b      	lsls	r3, r3, #22
 800d22e:	d4e1      	bmi.n	800d1f4 <_fflush_r+0xc>
 800d230:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d232:	f7fe fbcd 	bl	800b9d0 <__retarget_lock_release_recursive>
 800d236:	e7dd      	b.n	800d1f4 <_fflush_r+0xc>

0800d238 <__assert_func>:
 800d238:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d23a:	4614      	mov	r4, r2
 800d23c:	461a      	mov	r2, r3
 800d23e:	4b09      	ldr	r3, [pc, #36]	@ (800d264 <__assert_func+0x2c>)
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	4605      	mov	r5, r0
 800d244:	68d8      	ldr	r0, [r3, #12]
 800d246:	b954      	cbnz	r4, 800d25e <__assert_func+0x26>
 800d248:	4b07      	ldr	r3, [pc, #28]	@ (800d268 <__assert_func+0x30>)
 800d24a:	461c      	mov	r4, r3
 800d24c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d250:	9100      	str	r1, [sp, #0]
 800d252:	462b      	mov	r3, r5
 800d254:	4905      	ldr	r1, [pc, #20]	@ (800d26c <__assert_func+0x34>)
 800d256:	f000 f86f 	bl	800d338 <fiprintf>
 800d25a:	f7fd fc89 	bl	800ab70 <abort>
 800d25e:	4b04      	ldr	r3, [pc, #16]	@ (800d270 <__assert_func+0x38>)
 800d260:	e7f4      	b.n	800d24c <__assert_func+0x14>
 800d262:	bf00      	nop
 800d264:	2000001c 	.word	0x2000001c
 800d268:	0800e48e 	.word	0x0800e48e
 800d26c:	0800e460 	.word	0x0800e460
 800d270:	0800e453 	.word	0x0800e453

0800d274 <_calloc_r>:
 800d274:	b570      	push	{r4, r5, r6, lr}
 800d276:	fba1 5402 	umull	r5, r4, r1, r2
 800d27a:	b93c      	cbnz	r4, 800d28c <_calloc_r+0x18>
 800d27c:	4629      	mov	r1, r5
 800d27e:	f7fd fcb1 	bl	800abe4 <_malloc_r>
 800d282:	4606      	mov	r6, r0
 800d284:	b928      	cbnz	r0, 800d292 <_calloc_r+0x1e>
 800d286:	2600      	movs	r6, #0
 800d288:	4630      	mov	r0, r6
 800d28a:	bd70      	pop	{r4, r5, r6, pc}
 800d28c:	220c      	movs	r2, #12
 800d28e:	6002      	str	r2, [r0, #0]
 800d290:	e7f9      	b.n	800d286 <_calloc_r+0x12>
 800d292:	462a      	mov	r2, r5
 800d294:	4621      	mov	r1, r4
 800d296:	f7fe fac8 	bl	800b82a <memset>
 800d29a:	e7f5      	b.n	800d288 <_calloc_r+0x14>

0800d29c <__ascii_mbtowc>:
 800d29c:	b082      	sub	sp, #8
 800d29e:	b901      	cbnz	r1, 800d2a2 <__ascii_mbtowc+0x6>
 800d2a0:	a901      	add	r1, sp, #4
 800d2a2:	b142      	cbz	r2, 800d2b6 <__ascii_mbtowc+0x1a>
 800d2a4:	b14b      	cbz	r3, 800d2ba <__ascii_mbtowc+0x1e>
 800d2a6:	7813      	ldrb	r3, [r2, #0]
 800d2a8:	600b      	str	r3, [r1, #0]
 800d2aa:	7812      	ldrb	r2, [r2, #0]
 800d2ac:	1e10      	subs	r0, r2, #0
 800d2ae:	bf18      	it	ne
 800d2b0:	2001      	movne	r0, #1
 800d2b2:	b002      	add	sp, #8
 800d2b4:	4770      	bx	lr
 800d2b6:	4610      	mov	r0, r2
 800d2b8:	e7fb      	b.n	800d2b2 <__ascii_mbtowc+0x16>
 800d2ba:	f06f 0001 	mvn.w	r0, #1
 800d2be:	e7f8      	b.n	800d2b2 <__ascii_mbtowc+0x16>

0800d2c0 <_realloc_r>:
 800d2c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2c4:	4680      	mov	r8, r0
 800d2c6:	4615      	mov	r5, r2
 800d2c8:	460c      	mov	r4, r1
 800d2ca:	b921      	cbnz	r1, 800d2d6 <_realloc_r+0x16>
 800d2cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2d0:	4611      	mov	r1, r2
 800d2d2:	f7fd bc87 	b.w	800abe4 <_malloc_r>
 800d2d6:	b92a      	cbnz	r2, 800d2e4 <_realloc_r+0x24>
 800d2d8:	f7ff f9de 	bl	800c698 <_free_r>
 800d2dc:	2400      	movs	r4, #0
 800d2de:	4620      	mov	r0, r4
 800d2e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2e4:	f000 f83a 	bl	800d35c <_malloc_usable_size_r>
 800d2e8:	4285      	cmp	r5, r0
 800d2ea:	4606      	mov	r6, r0
 800d2ec:	d802      	bhi.n	800d2f4 <_realloc_r+0x34>
 800d2ee:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d2f2:	d8f4      	bhi.n	800d2de <_realloc_r+0x1e>
 800d2f4:	4629      	mov	r1, r5
 800d2f6:	4640      	mov	r0, r8
 800d2f8:	f7fd fc74 	bl	800abe4 <_malloc_r>
 800d2fc:	4607      	mov	r7, r0
 800d2fe:	2800      	cmp	r0, #0
 800d300:	d0ec      	beq.n	800d2dc <_realloc_r+0x1c>
 800d302:	42b5      	cmp	r5, r6
 800d304:	462a      	mov	r2, r5
 800d306:	4621      	mov	r1, r4
 800d308:	bf28      	it	cs
 800d30a:	4632      	movcs	r2, r6
 800d30c:	f7fe fb69 	bl	800b9e2 <memcpy>
 800d310:	4621      	mov	r1, r4
 800d312:	4640      	mov	r0, r8
 800d314:	f7ff f9c0 	bl	800c698 <_free_r>
 800d318:	463c      	mov	r4, r7
 800d31a:	e7e0      	b.n	800d2de <_realloc_r+0x1e>

0800d31c <__ascii_wctomb>:
 800d31c:	4603      	mov	r3, r0
 800d31e:	4608      	mov	r0, r1
 800d320:	b141      	cbz	r1, 800d334 <__ascii_wctomb+0x18>
 800d322:	2aff      	cmp	r2, #255	@ 0xff
 800d324:	d904      	bls.n	800d330 <__ascii_wctomb+0x14>
 800d326:	228a      	movs	r2, #138	@ 0x8a
 800d328:	601a      	str	r2, [r3, #0]
 800d32a:	f04f 30ff 	mov.w	r0, #4294967295
 800d32e:	4770      	bx	lr
 800d330:	700a      	strb	r2, [r1, #0]
 800d332:	2001      	movs	r0, #1
 800d334:	4770      	bx	lr
	...

0800d338 <fiprintf>:
 800d338:	b40e      	push	{r1, r2, r3}
 800d33a:	b503      	push	{r0, r1, lr}
 800d33c:	4601      	mov	r1, r0
 800d33e:	ab03      	add	r3, sp, #12
 800d340:	4805      	ldr	r0, [pc, #20]	@ (800d358 <fiprintf+0x20>)
 800d342:	f853 2b04 	ldr.w	r2, [r3], #4
 800d346:	6800      	ldr	r0, [r0, #0]
 800d348:	9301      	str	r3, [sp, #4]
 800d34a:	f000 f839 	bl	800d3c0 <_vfiprintf_r>
 800d34e:	b002      	add	sp, #8
 800d350:	f85d eb04 	ldr.w	lr, [sp], #4
 800d354:	b003      	add	sp, #12
 800d356:	4770      	bx	lr
 800d358:	2000001c 	.word	0x2000001c

0800d35c <_malloc_usable_size_r>:
 800d35c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d360:	1f18      	subs	r0, r3, #4
 800d362:	2b00      	cmp	r3, #0
 800d364:	bfbc      	itt	lt
 800d366:	580b      	ldrlt	r3, [r1, r0]
 800d368:	18c0      	addlt	r0, r0, r3
 800d36a:	4770      	bx	lr

0800d36c <__sfputc_r>:
 800d36c:	6893      	ldr	r3, [r2, #8]
 800d36e:	3b01      	subs	r3, #1
 800d370:	2b00      	cmp	r3, #0
 800d372:	b410      	push	{r4}
 800d374:	6093      	str	r3, [r2, #8]
 800d376:	da08      	bge.n	800d38a <__sfputc_r+0x1e>
 800d378:	6994      	ldr	r4, [r2, #24]
 800d37a:	42a3      	cmp	r3, r4
 800d37c:	db01      	blt.n	800d382 <__sfputc_r+0x16>
 800d37e:	290a      	cmp	r1, #10
 800d380:	d103      	bne.n	800d38a <__sfputc_r+0x1e>
 800d382:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d386:	f000 b933 	b.w	800d5f0 <__swbuf_r>
 800d38a:	6813      	ldr	r3, [r2, #0]
 800d38c:	1c58      	adds	r0, r3, #1
 800d38e:	6010      	str	r0, [r2, #0]
 800d390:	7019      	strb	r1, [r3, #0]
 800d392:	4608      	mov	r0, r1
 800d394:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d398:	4770      	bx	lr

0800d39a <__sfputs_r>:
 800d39a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d39c:	4606      	mov	r6, r0
 800d39e:	460f      	mov	r7, r1
 800d3a0:	4614      	mov	r4, r2
 800d3a2:	18d5      	adds	r5, r2, r3
 800d3a4:	42ac      	cmp	r4, r5
 800d3a6:	d101      	bne.n	800d3ac <__sfputs_r+0x12>
 800d3a8:	2000      	movs	r0, #0
 800d3aa:	e007      	b.n	800d3bc <__sfputs_r+0x22>
 800d3ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3b0:	463a      	mov	r2, r7
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f7ff ffda 	bl	800d36c <__sfputc_r>
 800d3b8:	1c43      	adds	r3, r0, #1
 800d3ba:	d1f3      	bne.n	800d3a4 <__sfputs_r+0xa>
 800d3bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d3c0 <_vfiprintf_r>:
 800d3c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3c4:	460d      	mov	r5, r1
 800d3c6:	b09d      	sub	sp, #116	@ 0x74
 800d3c8:	4614      	mov	r4, r2
 800d3ca:	4698      	mov	r8, r3
 800d3cc:	4606      	mov	r6, r0
 800d3ce:	b118      	cbz	r0, 800d3d8 <_vfiprintf_r+0x18>
 800d3d0:	6a03      	ldr	r3, [r0, #32]
 800d3d2:	b90b      	cbnz	r3, 800d3d8 <_vfiprintf_r+0x18>
 800d3d4:	f7fe f976 	bl	800b6c4 <__sinit>
 800d3d8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3da:	07d9      	lsls	r1, r3, #31
 800d3dc:	d405      	bmi.n	800d3ea <_vfiprintf_r+0x2a>
 800d3de:	89ab      	ldrh	r3, [r5, #12]
 800d3e0:	059a      	lsls	r2, r3, #22
 800d3e2:	d402      	bmi.n	800d3ea <_vfiprintf_r+0x2a>
 800d3e4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3e6:	f7fe faf2 	bl	800b9ce <__retarget_lock_acquire_recursive>
 800d3ea:	89ab      	ldrh	r3, [r5, #12]
 800d3ec:	071b      	lsls	r3, r3, #28
 800d3ee:	d501      	bpl.n	800d3f4 <_vfiprintf_r+0x34>
 800d3f0:	692b      	ldr	r3, [r5, #16]
 800d3f2:	b99b      	cbnz	r3, 800d41c <_vfiprintf_r+0x5c>
 800d3f4:	4629      	mov	r1, r5
 800d3f6:	4630      	mov	r0, r6
 800d3f8:	f000 f938 	bl	800d66c <__swsetup_r>
 800d3fc:	b170      	cbz	r0, 800d41c <_vfiprintf_r+0x5c>
 800d3fe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d400:	07dc      	lsls	r4, r3, #31
 800d402:	d504      	bpl.n	800d40e <_vfiprintf_r+0x4e>
 800d404:	f04f 30ff 	mov.w	r0, #4294967295
 800d408:	b01d      	add	sp, #116	@ 0x74
 800d40a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d40e:	89ab      	ldrh	r3, [r5, #12]
 800d410:	0598      	lsls	r0, r3, #22
 800d412:	d4f7      	bmi.n	800d404 <_vfiprintf_r+0x44>
 800d414:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d416:	f7fe fadb 	bl	800b9d0 <__retarget_lock_release_recursive>
 800d41a:	e7f3      	b.n	800d404 <_vfiprintf_r+0x44>
 800d41c:	2300      	movs	r3, #0
 800d41e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d420:	2320      	movs	r3, #32
 800d422:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d426:	f8cd 800c 	str.w	r8, [sp, #12]
 800d42a:	2330      	movs	r3, #48	@ 0x30
 800d42c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d5dc <_vfiprintf_r+0x21c>
 800d430:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d434:	f04f 0901 	mov.w	r9, #1
 800d438:	4623      	mov	r3, r4
 800d43a:	469a      	mov	sl, r3
 800d43c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d440:	b10a      	cbz	r2, 800d446 <_vfiprintf_r+0x86>
 800d442:	2a25      	cmp	r2, #37	@ 0x25
 800d444:	d1f9      	bne.n	800d43a <_vfiprintf_r+0x7a>
 800d446:	ebba 0b04 	subs.w	fp, sl, r4
 800d44a:	d00b      	beq.n	800d464 <_vfiprintf_r+0xa4>
 800d44c:	465b      	mov	r3, fp
 800d44e:	4622      	mov	r2, r4
 800d450:	4629      	mov	r1, r5
 800d452:	4630      	mov	r0, r6
 800d454:	f7ff ffa1 	bl	800d39a <__sfputs_r>
 800d458:	3001      	adds	r0, #1
 800d45a:	f000 80a7 	beq.w	800d5ac <_vfiprintf_r+0x1ec>
 800d45e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d460:	445a      	add	r2, fp
 800d462:	9209      	str	r2, [sp, #36]	@ 0x24
 800d464:	f89a 3000 	ldrb.w	r3, [sl]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	f000 809f 	beq.w	800d5ac <_vfiprintf_r+0x1ec>
 800d46e:	2300      	movs	r3, #0
 800d470:	f04f 32ff 	mov.w	r2, #4294967295
 800d474:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d478:	f10a 0a01 	add.w	sl, sl, #1
 800d47c:	9304      	str	r3, [sp, #16]
 800d47e:	9307      	str	r3, [sp, #28]
 800d480:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d484:	931a      	str	r3, [sp, #104]	@ 0x68
 800d486:	4654      	mov	r4, sl
 800d488:	2205      	movs	r2, #5
 800d48a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d48e:	4853      	ldr	r0, [pc, #332]	@ (800d5dc <_vfiprintf_r+0x21c>)
 800d490:	f7f2 fe9e 	bl	80001d0 <memchr>
 800d494:	9a04      	ldr	r2, [sp, #16]
 800d496:	b9d8      	cbnz	r0, 800d4d0 <_vfiprintf_r+0x110>
 800d498:	06d1      	lsls	r1, r2, #27
 800d49a:	bf44      	itt	mi
 800d49c:	2320      	movmi	r3, #32
 800d49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4a2:	0713      	lsls	r3, r2, #28
 800d4a4:	bf44      	itt	mi
 800d4a6:	232b      	movmi	r3, #43	@ 0x2b
 800d4a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d4ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d4b0:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4b2:	d015      	beq.n	800d4e0 <_vfiprintf_r+0x120>
 800d4b4:	9a07      	ldr	r2, [sp, #28]
 800d4b6:	4654      	mov	r4, sl
 800d4b8:	2000      	movs	r0, #0
 800d4ba:	f04f 0c0a 	mov.w	ip, #10
 800d4be:	4621      	mov	r1, r4
 800d4c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d4c4:	3b30      	subs	r3, #48	@ 0x30
 800d4c6:	2b09      	cmp	r3, #9
 800d4c8:	d94b      	bls.n	800d562 <_vfiprintf_r+0x1a2>
 800d4ca:	b1b0      	cbz	r0, 800d4fa <_vfiprintf_r+0x13a>
 800d4cc:	9207      	str	r2, [sp, #28]
 800d4ce:	e014      	b.n	800d4fa <_vfiprintf_r+0x13a>
 800d4d0:	eba0 0308 	sub.w	r3, r0, r8
 800d4d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d4d8:	4313      	orrs	r3, r2
 800d4da:	9304      	str	r3, [sp, #16]
 800d4dc:	46a2      	mov	sl, r4
 800d4de:	e7d2      	b.n	800d486 <_vfiprintf_r+0xc6>
 800d4e0:	9b03      	ldr	r3, [sp, #12]
 800d4e2:	1d19      	adds	r1, r3, #4
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	9103      	str	r1, [sp, #12]
 800d4e8:	2b00      	cmp	r3, #0
 800d4ea:	bfbb      	ittet	lt
 800d4ec:	425b      	neglt	r3, r3
 800d4ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d4f2:	9307      	strge	r3, [sp, #28]
 800d4f4:	9307      	strlt	r3, [sp, #28]
 800d4f6:	bfb8      	it	lt
 800d4f8:	9204      	strlt	r2, [sp, #16]
 800d4fa:	7823      	ldrb	r3, [r4, #0]
 800d4fc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4fe:	d10a      	bne.n	800d516 <_vfiprintf_r+0x156>
 800d500:	7863      	ldrb	r3, [r4, #1]
 800d502:	2b2a      	cmp	r3, #42	@ 0x2a
 800d504:	d132      	bne.n	800d56c <_vfiprintf_r+0x1ac>
 800d506:	9b03      	ldr	r3, [sp, #12]
 800d508:	1d1a      	adds	r2, r3, #4
 800d50a:	681b      	ldr	r3, [r3, #0]
 800d50c:	9203      	str	r2, [sp, #12]
 800d50e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d512:	3402      	adds	r4, #2
 800d514:	9305      	str	r3, [sp, #20]
 800d516:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d5ec <_vfiprintf_r+0x22c>
 800d51a:	7821      	ldrb	r1, [r4, #0]
 800d51c:	2203      	movs	r2, #3
 800d51e:	4650      	mov	r0, sl
 800d520:	f7f2 fe56 	bl	80001d0 <memchr>
 800d524:	b138      	cbz	r0, 800d536 <_vfiprintf_r+0x176>
 800d526:	9b04      	ldr	r3, [sp, #16]
 800d528:	eba0 000a 	sub.w	r0, r0, sl
 800d52c:	2240      	movs	r2, #64	@ 0x40
 800d52e:	4082      	lsls	r2, r0
 800d530:	4313      	orrs	r3, r2
 800d532:	3401      	adds	r4, #1
 800d534:	9304      	str	r3, [sp, #16]
 800d536:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d53a:	4829      	ldr	r0, [pc, #164]	@ (800d5e0 <_vfiprintf_r+0x220>)
 800d53c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d540:	2206      	movs	r2, #6
 800d542:	f7f2 fe45 	bl	80001d0 <memchr>
 800d546:	2800      	cmp	r0, #0
 800d548:	d03f      	beq.n	800d5ca <_vfiprintf_r+0x20a>
 800d54a:	4b26      	ldr	r3, [pc, #152]	@ (800d5e4 <_vfiprintf_r+0x224>)
 800d54c:	bb1b      	cbnz	r3, 800d596 <_vfiprintf_r+0x1d6>
 800d54e:	9b03      	ldr	r3, [sp, #12]
 800d550:	3307      	adds	r3, #7
 800d552:	f023 0307 	bic.w	r3, r3, #7
 800d556:	3308      	adds	r3, #8
 800d558:	9303      	str	r3, [sp, #12]
 800d55a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d55c:	443b      	add	r3, r7
 800d55e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d560:	e76a      	b.n	800d438 <_vfiprintf_r+0x78>
 800d562:	fb0c 3202 	mla	r2, ip, r2, r3
 800d566:	460c      	mov	r4, r1
 800d568:	2001      	movs	r0, #1
 800d56a:	e7a8      	b.n	800d4be <_vfiprintf_r+0xfe>
 800d56c:	2300      	movs	r3, #0
 800d56e:	3401      	adds	r4, #1
 800d570:	9305      	str	r3, [sp, #20]
 800d572:	4619      	mov	r1, r3
 800d574:	f04f 0c0a 	mov.w	ip, #10
 800d578:	4620      	mov	r0, r4
 800d57a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d57e:	3a30      	subs	r2, #48	@ 0x30
 800d580:	2a09      	cmp	r2, #9
 800d582:	d903      	bls.n	800d58c <_vfiprintf_r+0x1cc>
 800d584:	2b00      	cmp	r3, #0
 800d586:	d0c6      	beq.n	800d516 <_vfiprintf_r+0x156>
 800d588:	9105      	str	r1, [sp, #20]
 800d58a:	e7c4      	b.n	800d516 <_vfiprintf_r+0x156>
 800d58c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d590:	4604      	mov	r4, r0
 800d592:	2301      	movs	r3, #1
 800d594:	e7f0      	b.n	800d578 <_vfiprintf_r+0x1b8>
 800d596:	ab03      	add	r3, sp, #12
 800d598:	9300      	str	r3, [sp, #0]
 800d59a:	462a      	mov	r2, r5
 800d59c:	4b12      	ldr	r3, [pc, #72]	@ (800d5e8 <_vfiprintf_r+0x228>)
 800d59e:	a904      	add	r1, sp, #16
 800d5a0:	4630      	mov	r0, r6
 800d5a2:	f7fd fc4b 	bl	800ae3c <_printf_float>
 800d5a6:	4607      	mov	r7, r0
 800d5a8:	1c78      	adds	r0, r7, #1
 800d5aa:	d1d6      	bne.n	800d55a <_vfiprintf_r+0x19a>
 800d5ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d5ae:	07d9      	lsls	r1, r3, #31
 800d5b0:	d405      	bmi.n	800d5be <_vfiprintf_r+0x1fe>
 800d5b2:	89ab      	ldrh	r3, [r5, #12]
 800d5b4:	059a      	lsls	r2, r3, #22
 800d5b6:	d402      	bmi.n	800d5be <_vfiprintf_r+0x1fe>
 800d5b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d5ba:	f7fe fa09 	bl	800b9d0 <__retarget_lock_release_recursive>
 800d5be:	89ab      	ldrh	r3, [r5, #12]
 800d5c0:	065b      	lsls	r3, r3, #25
 800d5c2:	f53f af1f 	bmi.w	800d404 <_vfiprintf_r+0x44>
 800d5c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d5c8:	e71e      	b.n	800d408 <_vfiprintf_r+0x48>
 800d5ca:	ab03      	add	r3, sp, #12
 800d5cc:	9300      	str	r3, [sp, #0]
 800d5ce:	462a      	mov	r2, r5
 800d5d0:	4b05      	ldr	r3, [pc, #20]	@ (800d5e8 <_vfiprintf_r+0x228>)
 800d5d2:	a904      	add	r1, sp, #16
 800d5d4:	4630      	mov	r0, r6
 800d5d6:	f7fd fec9 	bl	800b36c <_printf_i>
 800d5da:	e7e4      	b.n	800d5a6 <_vfiprintf_r+0x1e6>
 800d5dc:	0800e438 	.word	0x0800e438
 800d5e0:	0800e442 	.word	0x0800e442
 800d5e4:	0800ae3d 	.word	0x0800ae3d
 800d5e8:	0800d39b 	.word	0x0800d39b
 800d5ec:	0800e43e 	.word	0x0800e43e

0800d5f0 <__swbuf_r>:
 800d5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d5f2:	460e      	mov	r6, r1
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	4605      	mov	r5, r0
 800d5f8:	b118      	cbz	r0, 800d602 <__swbuf_r+0x12>
 800d5fa:	6a03      	ldr	r3, [r0, #32]
 800d5fc:	b90b      	cbnz	r3, 800d602 <__swbuf_r+0x12>
 800d5fe:	f7fe f861 	bl	800b6c4 <__sinit>
 800d602:	69a3      	ldr	r3, [r4, #24]
 800d604:	60a3      	str	r3, [r4, #8]
 800d606:	89a3      	ldrh	r3, [r4, #12]
 800d608:	071a      	lsls	r2, r3, #28
 800d60a:	d501      	bpl.n	800d610 <__swbuf_r+0x20>
 800d60c:	6923      	ldr	r3, [r4, #16]
 800d60e:	b943      	cbnz	r3, 800d622 <__swbuf_r+0x32>
 800d610:	4621      	mov	r1, r4
 800d612:	4628      	mov	r0, r5
 800d614:	f000 f82a 	bl	800d66c <__swsetup_r>
 800d618:	b118      	cbz	r0, 800d622 <__swbuf_r+0x32>
 800d61a:	f04f 37ff 	mov.w	r7, #4294967295
 800d61e:	4638      	mov	r0, r7
 800d620:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d622:	6823      	ldr	r3, [r4, #0]
 800d624:	6922      	ldr	r2, [r4, #16]
 800d626:	1a98      	subs	r0, r3, r2
 800d628:	6963      	ldr	r3, [r4, #20]
 800d62a:	b2f6      	uxtb	r6, r6
 800d62c:	4283      	cmp	r3, r0
 800d62e:	4637      	mov	r7, r6
 800d630:	dc05      	bgt.n	800d63e <__swbuf_r+0x4e>
 800d632:	4621      	mov	r1, r4
 800d634:	4628      	mov	r0, r5
 800d636:	f7ff fdd7 	bl	800d1e8 <_fflush_r>
 800d63a:	2800      	cmp	r0, #0
 800d63c:	d1ed      	bne.n	800d61a <__swbuf_r+0x2a>
 800d63e:	68a3      	ldr	r3, [r4, #8]
 800d640:	3b01      	subs	r3, #1
 800d642:	60a3      	str	r3, [r4, #8]
 800d644:	6823      	ldr	r3, [r4, #0]
 800d646:	1c5a      	adds	r2, r3, #1
 800d648:	6022      	str	r2, [r4, #0]
 800d64a:	701e      	strb	r6, [r3, #0]
 800d64c:	6962      	ldr	r2, [r4, #20]
 800d64e:	1c43      	adds	r3, r0, #1
 800d650:	429a      	cmp	r2, r3
 800d652:	d004      	beq.n	800d65e <__swbuf_r+0x6e>
 800d654:	89a3      	ldrh	r3, [r4, #12]
 800d656:	07db      	lsls	r3, r3, #31
 800d658:	d5e1      	bpl.n	800d61e <__swbuf_r+0x2e>
 800d65a:	2e0a      	cmp	r6, #10
 800d65c:	d1df      	bne.n	800d61e <__swbuf_r+0x2e>
 800d65e:	4621      	mov	r1, r4
 800d660:	4628      	mov	r0, r5
 800d662:	f7ff fdc1 	bl	800d1e8 <_fflush_r>
 800d666:	2800      	cmp	r0, #0
 800d668:	d0d9      	beq.n	800d61e <__swbuf_r+0x2e>
 800d66a:	e7d6      	b.n	800d61a <__swbuf_r+0x2a>

0800d66c <__swsetup_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4b29      	ldr	r3, [pc, #164]	@ (800d714 <__swsetup_r+0xa8>)
 800d670:	4605      	mov	r5, r0
 800d672:	6818      	ldr	r0, [r3, #0]
 800d674:	460c      	mov	r4, r1
 800d676:	b118      	cbz	r0, 800d680 <__swsetup_r+0x14>
 800d678:	6a03      	ldr	r3, [r0, #32]
 800d67a:	b90b      	cbnz	r3, 800d680 <__swsetup_r+0x14>
 800d67c:	f7fe f822 	bl	800b6c4 <__sinit>
 800d680:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d684:	0719      	lsls	r1, r3, #28
 800d686:	d422      	bmi.n	800d6ce <__swsetup_r+0x62>
 800d688:	06da      	lsls	r2, r3, #27
 800d68a:	d407      	bmi.n	800d69c <__swsetup_r+0x30>
 800d68c:	2209      	movs	r2, #9
 800d68e:	602a      	str	r2, [r5, #0]
 800d690:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d694:	81a3      	strh	r3, [r4, #12]
 800d696:	f04f 30ff 	mov.w	r0, #4294967295
 800d69a:	e033      	b.n	800d704 <__swsetup_r+0x98>
 800d69c:	0758      	lsls	r0, r3, #29
 800d69e:	d512      	bpl.n	800d6c6 <__swsetup_r+0x5a>
 800d6a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d6a2:	b141      	cbz	r1, 800d6b6 <__swsetup_r+0x4a>
 800d6a4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d6a8:	4299      	cmp	r1, r3
 800d6aa:	d002      	beq.n	800d6b2 <__swsetup_r+0x46>
 800d6ac:	4628      	mov	r0, r5
 800d6ae:	f7fe fff3 	bl	800c698 <_free_r>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	6363      	str	r3, [r4, #52]	@ 0x34
 800d6b6:	89a3      	ldrh	r3, [r4, #12]
 800d6b8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d6bc:	81a3      	strh	r3, [r4, #12]
 800d6be:	2300      	movs	r3, #0
 800d6c0:	6063      	str	r3, [r4, #4]
 800d6c2:	6923      	ldr	r3, [r4, #16]
 800d6c4:	6023      	str	r3, [r4, #0]
 800d6c6:	89a3      	ldrh	r3, [r4, #12]
 800d6c8:	f043 0308 	orr.w	r3, r3, #8
 800d6cc:	81a3      	strh	r3, [r4, #12]
 800d6ce:	6923      	ldr	r3, [r4, #16]
 800d6d0:	b94b      	cbnz	r3, 800d6e6 <__swsetup_r+0x7a>
 800d6d2:	89a3      	ldrh	r3, [r4, #12]
 800d6d4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d6d8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d6dc:	d003      	beq.n	800d6e6 <__swsetup_r+0x7a>
 800d6de:	4621      	mov	r1, r4
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	f000 f83f 	bl	800d764 <__smakebuf_r>
 800d6e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6ea:	f013 0201 	ands.w	r2, r3, #1
 800d6ee:	d00a      	beq.n	800d706 <__swsetup_r+0x9a>
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	60a2      	str	r2, [r4, #8]
 800d6f4:	6962      	ldr	r2, [r4, #20]
 800d6f6:	4252      	negs	r2, r2
 800d6f8:	61a2      	str	r2, [r4, #24]
 800d6fa:	6922      	ldr	r2, [r4, #16]
 800d6fc:	b942      	cbnz	r2, 800d710 <__swsetup_r+0xa4>
 800d6fe:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d702:	d1c5      	bne.n	800d690 <__swsetup_r+0x24>
 800d704:	bd38      	pop	{r3, r4, r5, pc}
 800d706:	0799      	lsls	r1, r3, #30
 800d708:	bf58      	it	pl
 800d70a:	6962      	ldrpl	r2, [r4, #20]
 800d70c:	60a2      	str	r2, [r4, #8]
 800d70e:	e7f4      	b.n	800d6fa <__swsetup_r+0x8e>
 800d710:	2000      	movs	r0, #0
 800d712:	e7f7      	b.n	800d704 <__swsetup_r+0x98>
 800d714:	2000001c 	.word	0x2000001c

0800d718 <__swhatbuf_r>:
 800d718:	b570      	push	{r4, r5, r6, lr}
 800d71a:	460c      	mov	r4, r1
 800d71c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d720:	2900      	cmp	r1, #0
 800d722:	b096      	sub	sp, #88	@ 0x58
 800d724:	4615      	mov	r5, r2
 800d726:	461e      	mov	r6, r3
 800d728:	da0d      	bge.n	800d746 <__swhatbuf_r+0x2e>
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d730:	f04f 0100 	mov.w	r1, #0
 800d734:	bf14      	ite	ne
 800d736:	2340      	movne	r3, #64	@ 0x40
 800d738:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d73c:	2000      	movs	r0, #0
 800d73e:	6031      	str	r1, [r6, #0]
 800d740:	602b      	str	r3, [r5, #0]
 800d742:	b016      	add	sp, #88	@ 0x58
 800d744:	bd70      	pop	{r4, r5, r6, pc}
 800d746:	466a      	mov	r2, sp
 800d748:	f000 f848 	bl	800d7dc <_fstat_r>
 800d74c:	2800      	cmp	r0, #0
 800d74e:	dbec      	blt.n	800d72a <__swhatbuf_r+0x12>
 800d750:	9901      	ldr	r1, [sp, #4]
 800d752:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d756:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d75a:	4259      	negs	r1, r3
 800d75c:	4159      	adcs	r1, r3
 800d75e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d762:	e7eb      	b.n	800d73c <__swhatbuf_r+0x24>

0800d764 <__smakebuf_r>:
 800d764:	898b      	ldrh	r3, [r1, #12]
 800d766:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d768:	079d      	lsls	r5, r3, #30
 800d76a:	4606      	mov	r6, r0
 800d76c:	460c      	mov	r4, r1
 800d76e:	d507      	bpl.n	800d780 <__smakebuf_r+0x1c>
 800d770:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d774:	6023      	str	r3, [r4, #0]
 800d776:	6123      	str	r3, [r4, #16]
 800d778:	2301      	movs	r3, #1
 800d77a:	6163      	str	r3, [r4, #20]
 800d77c:	b003      	add	sp, #12
 800d77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d780:	ab01      	add	r3, sp, #4
 800d782:	466a      	mov	r2, sp
 800d784:	f7ff ffc8 	bl	800d718 <__swhatbuf_r>
 800d788:	9f00      	ldr	r7, [sp, #0]
 800d78a:	4605      	mov	r5, r0
 800d78c:	4639      	mov	r1, r7
 800d78e:	4630      	mov	r0, r6
 800d790:	f7fd fa28 	bl	800abe4 <_malloc_r>
 800d794:	b948      	cbnz	r0, 800d7aa <__smakebuf_r+0x46>
 800d796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d79a:	059a      	lsls	r2, r3, #22
 800d79c:	d4ee      	bmi.n	800d77c <__smakebuf_r+0x18>
 800d79e:	f023 0303 	bic.w	r3, r3, #3
 800d7a2:	f043 0302 	orr.w	r3, r3, #2
 800d7a6:	81a3      	strh	r3, [r4, #12]
 800d7a8:	e7e2      	b.n	800d770 <__smakebuf_r+0xc>
 800d7aa:	89a3      	ldrh	r3, [r4, #12]
 800d7ac:	6020      	str	r0, [r4, #0]
 800d7ae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7b2:	81a3      	strh	r3, [r4, #12]
 800d7b4:	9b01      	ldr	r3, [sp, #4]
 800d7b6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7ba:	b15b      	cbz	r3, 800d7d4 <__smakebuf_r+0x70>
 800d7bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7c0:	4630      	mov	r0, r6
 800d7c2:	f000 f81d 	bl	800d800 <_isatty_r>
 800d7c6:	b128      	cbz	r0, 800d7d4 <__smakebuf_r+0x70>
 800d7c8:	89a3      	ldrh	r3, [r4, #12]
 800d7ca:	f023 0303 	bic.w	r3, r3, #3
 800d7ce:	f043 0301 	orr.w	r3, r3, #1
 800d7d2:	81a3      	strh	r3, [r4, #12]
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	431d      	orrs	r5, r3
 800d7d8:	81a5      	strh	r5, [r4, #12]
 800d7da:	e7cf      	b.n	800d77c <__smakebuf_r+0x18>

0800d7dc <_fstat_r>:
 800d7dc:	b538      	push	{r3, r4, r5, lr}
 800d7de:	4d07      	ldr	r5, [pc, #28]	@ (800d7fc <_fstat_r+0x20>)
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	4604      	mov	r4, r0
 800d7e4:	4608      	mov	r0, r1
 800d7e6:	4611      	mov	r1, r2
 800d7e8:	602b      	str	r3, [r5, #0]
 800d7ea:	f7f6 ff45 	bl	8004678 <_fstat>
 800d7ee:	1c43      	adds	r3, r0, #1
 800d7f0:	d102      	bne.n	800d7f8 <_fstat_r+0x1c>
 800d7f2:	682b      	ldr	r3, [r5, #0]
 800d7f4:	b103      	cbz	r3, 800d7f8 <_fstat_r+0x1c>
 800d7f6:	6023      	str	r3, [r4, #0]
 800d7f8:	bd38      	pop	{r3, r4, r5, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000a34 	.word	0x20000a34

0800d800 <_isatty_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4d06      	ldr	r5, [pc, #24]	@ (800d81c <_isatty_r+0x1c>)
 800d804:	2300      	movs	r3, #0
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	602b      	str	r3, [r5, #0]
 800d80c:	f7f6 ff44 	bl	8004698 <_isatty>
 800d810:	1c43      	adds	r3, r0, #1
 800d812:	d102      	bne.n	800d81a <_isatty_r+0x1a>
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	b103      	cbz	r3, 800d81a <_isatty_r+0x1a>
 800d818:	6023      	str	r3, [r4, #0]
 800d81a:	bd38      	pop	{r3, r4, r5, pc}
 800d81c:	20000a34 	.word	0x20000a34

0800d820 <_init>:
 800d820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d822:	bf00      	nop
 800d824:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d826:	bc08      	pop	{r3}
 800d828:	469e      	mov	lr, r3
 800d82a:	4770      	bx	lr

0800d82c <_fini>:
 800d82c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d82e:	bf00      	nop
 800d830:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d832:	bc08      	pop	{r3}
 800d834:	469e      	mov	lr, r3
 800d836:	4770      	bx	lr
